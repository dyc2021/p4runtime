// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p4_2fv1_2fp4data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p4_2fv1_2fp4data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fv1_2fp4data_2eproto;
namespace p4 {
namespace v1 {
class P4Data;
struct P4DataDefaultTypeInternal;
extern P4DataDefaultTypeInternal _P4Data_default_instance_;
class P4Header;
struct P4HeaderDefaultTypeInternal;
extern P4HeaderDefaultTypeInternal _P4Header_default_instance_;
class P4HeaderStack;
struct P4HeaderStackDefaultTypeInternal;
extern P4HeaderStackDefaultTypeInternal _P4HeaderStack_default_instance_;
class P4HeaderUnion;
struct P4HeaderUnionDefaultTypeInternal;
extern P4HeaderUnionDefaultTypeInternal _P4HeaderUnion_default_instance_;
class P4HeaderUnionStack;
struct P4HeaderUnionStackDefaultTypeInternal;
extern P4HeaderUnionStackDefaultTypeInternal _P4HeaderUnionStack_default_instance_;
class P4StructLike;
struct P4StructLikeDefaultTypeInternal;
extern P4StructLikeDefaultTypeInternal _P4StructLike_default_instance_;
class P4Varbit;
struct P4VarbitDefaultTypeInternal;
extern P4VarbitDefaultTypeInternal _P4Varbit_default_instance_;
}  // namespace v1
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> ::p4::v1::P4Data* Arena::CreateMaybeMessage<::p4::v1::P4Data>(Arena*);
template<> ::p4::v1::P4Header* Arena::CreateMaybeMessage<::p4::v1::P4Header>(Arena*);
template<> ::p4::v1::P4HeaderStack* Arena::CreateMaybeMessage<::p4::v1::P4HeaderStack>(Arena*);
template<> ::p4::v1::P4HeaderUnion* Arena::CreateMaybeMessage<::p4::v1::P4HeaderUnion>(Arena*);
template<> ::p4::v1::P4HeaderUnionStack* Arena::CreateMaybeMessage<::p4::v1::P4HeaderUnionStack>(Arena*);
template<> ::p4::v1::P4StructLike* Arena::CreateMaybeMessage<::p4::v1::P4StructLike>(Arena*);
template<> ::p4::v1::P4Varbit* Arena::CreateMaybeMessage<::p4::v1::P4Varbit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p4 {
namespace v1 {

// ===================================================================

class P4Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Data) */ {
 public:
  inline P4Data() : P4Data(nullptr) {}
  ~P4Data() override;
  explicit constexpr P4Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4Data(const P4Data& from);
  P4Data(P4Data&& from) noexcept
    : P4Data() {
    *this = ::std::move(from);
  }

  inline P4Data& operator=(const P4Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4Data& operator=(P4Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4Data& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kBitstring = 1,
    kVarbit = 2,
    kBool = 3,
    kTuple = 4,
    kStruct = 5,
    kHeader = 6,
    kHeaderUnion = 7,
    kHeaderStack = 8,
    kHeaderUnionStack = 9,
    kEnum = 10,
    kError = 11,
    kEnumValue = 12,
    DATA_NOT_SET = 0,
  };

  static inline const P4Data* internal_default_instance() {
    return reinterpret_cast<const P4Data*>(
               &_P4Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P4Data& a, P4Data& b) {
    a.Swap(&b);
  }
  inline void Swap(P4Data* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4Data* New() const final {
    return new P4Data();
  }

  P4Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4Data";
  }
  protected:
  explicit P4Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitstringFieldNumber = 1,
    kVarbitFieldNumber = 2,
    kBoolFieldNumber = 3,
    kTupleFieldNumber = 4,
    kStructFieldNumber = 5,
    kHeaderFieldNumber = 6,
    kHeaderUnionFieldNumber = 7,
    kHeaderStackFieldNumber = 8,
    kHeaderUnionStackFieldNumber = 9,
    kEnumFieldNumber = 10,
    kErrorFieldNumber = 11,
    kEnumValueFieldNumber = 12,
  };
  // bytes bitstring = 1;
  bool has_bitstring() const;
  private:
  bool _internal_has_bitstring() const;
  public:
  void clear_bitstring();
  const std::string& bitstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bitstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bitstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_bitstring();
  void set_allocated_bitstring(std::string* bitstring);
  private:
  const std::string& _internal_bitstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bitstring(const std::string& value);
  std::string* _internal_mutable_bitstring();
  public:

  // .p4.v1.P4Varbit varbit = 2;
  bool has_varbit() const;
  private:
  bool _internal_has_varbit() const;
  public:
  void clear_varbit();
  const ::p4::v1::P4Varbit& varbit() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4Varbit* release_varbit();
  ::p4::v1::P4Varbit* mutable_varbit();
  void set_allocated_varbit(::p4::v1::P4Varbit* varbit);
  private:
  const ::p4::v1::P4Varbit& _internal_varbit() const;
  ::p4::v1::P4Varbit* _internal_mutable_varbit();
  public:
  void unsafe_arena_set_allocated_varbit(
      ::p4::v1::P4Varbit* varbit);
  ::p4::v1::P4Varbit* unsafe_arena_release_varbit();

  // bool bool = 3;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // .p4.v1.P4StructLike tuple = 4;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::p4::v1::P4StructLike& tuple() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4StructLike* release_tuple();
  ::p4::v1::P4StructLike* mutable_tuple();
  void set_allocated_tuple(::p4::v1::P4StructLike* tuple);
  private:
  const ::p4::v1::P4StructLike& _internal_tuple() const;
  ::p4::v1::P4StructLike* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::p4::v1::P4StructLike* tuple);
  ::p4::v1::P4StructLike* unsafe_arena_release_tuple();

  // .p4.v1.P4StructLike struct = 5;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::p4::v1::P4StructLike& struct_() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4StructLike* release_struct_();
  ::p4::v1::P4StructLike* mutable_struct_();
  void set_allocated_struct_(::p4::v1::P4StructLike* struct_);
  private:
  const ::p4::v1::P4StructLike& _internal_struct_() const;
  ::p4::v1::P4StructLike* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::p4::v1::P4StructLike* struct_);
  ::p4::v1::P4StructLike* unsafe_arena_release_struct_();

  // .p4.v1.P4Header header = 6;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::p4::v1::P4Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4Header* release_header();
  ::p4::v1::P4Header* mutable_header();
  void set_allocated_header(::p4::v1::P4Header* header);
  private:
  const ::p4::v1::P4Header& _internal_header() const;
  ::p4::v1::P4Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::p4::v1::P4Header* header);
  ::p4::v1::P4Header* unsafe_arena_release_header();

  // .p4.v1.P4HeaderUnion header_union = 7;
  bool has_header_union() const;
  private:
  bool _internal_has_header_union() const;
  public:
  void clear_header_union();
  const ::p4::v1::P4HeaderUnion& header_union() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4HeaderUnion* release_header_union();
  ::p4::v1::P4HeaderUnion* mutable_header_union();
  void set_allocated_header_union(::p4::v1::P4HeaderUnion* header_union);
  private:
  const ::p4::v1::P4HeaderUnion& _internal_header_union() const;
  ::p4::v1::P4HeaderUnion* _internal_mutable_header_union();
  public:
  void unsafe_arena_set_allocated_header_union(
      ::p4::v1::P4HeaderUnion* header_union);
  ::p4::v1::P4HeaderUnion* unsafe_arena_release_header_union();

  // .p4.v1.P4HeaderStack header_stack = 8;
  bool has_header_stack() const;
  private:
  bool _internal_has_header_stack() const;
  public:
  void clear_header_stack();
  const ::p4::v1::P4HeaderStack& header_stack() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4HeaderStack* release_header_stack();
  ::p4::v1::P4HeaderStack* mutable_header_stack();
  void set_allocated_header_stack(::p4::v1::P4HeaderStack* header_stack);
  private:
  const ::p4::v1::P4HeaderStack& _internal_header_stack() const;
  ::p4::v1::P4HeaderStack* _internal_mutable_header_stack();
  public:
  void unsafe_arena_set_allocated_header_stack(
      ::p4::v1::P4HeaderStack* header_stack);
  ::p4::v1::P4HeaderStack* unsafe_arena_release_header_stack();

  // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
  bool has_header_union_stack() const;
  private:
  bool _internal_has_header_union_stack() const;
  public:
  void clear_header_union_stack();
  const ::p4::v1::P4HeaderUnionStack& header_union_stack() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4HeaderUnionStack* release_header_union_stack();
  ::p4::v1::P4HeaderUnionStack* mutable_header_union_stack();
  void set_allocated_header_union_stack(::p4::v1::P4HeaderUnionStack* header_union_stack);
  private:
  const ::p4::v1::P4HeaderUnionStack& _internal_header_union_stack() const;
  ::p4::v1::P4HeaderUnionStack* _internal_mutable_header_union_stack();
  public:
  void unsafe_arena_set_allocated_header_union_stack(
      ::p4::v1::P4HeaderUnionStack* header_union_stack);
  ::p4::v1::P4HeaderUnionStack* unsafe_arena_release_header_union_stack();

  // string enum = 10;
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  const std::string& enum_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enum_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enum_();
  PROTOBUF_MUST_USE_RESULT std::string* release_enum_();
  void set_allocated_enum_(std::string* enum_);
  private:
  const std::string& _internal_enum_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_(const std::string& value);
  std::string* _internal_mutable_enum_();
  public:

  // string error = 11;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bytes enum_value = 12;
  bool has_enum_value() const;
  private:
  bool _internal_has_enum_value() const;
  public:
  void clear_enum_value();
  const std::string& enum_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enum_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enum_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_enum_value();
  void set_allocated_enum_value(std::string* enum_value);
  private:
  const std::string& _internal_enum_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_value(const std::string& value);
  std::string* _internal_mutable_enum_value();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:p4.v1.P4Data)
 private:
  class _Internal;
  void set_has_bitstring();
  void set_has_varbit();
  void set_has_bool_();
  void set_has_tuple();
  void set_has_struct_();
  void set_has_header();
  void set_has_header_union();
  void set_has_header_stack();
  void set_has_header_union_stack();
  void set_has_enum_();
  void set_has_error();
  void set_has_enum_value();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitstring_;
    ::p4::v1::P4Varbit* varbit_;
    bool bool__;
    ::p4::v1::P4StructLike* tuple_;
    ::p4::v1::P4StructLike* struct__;
    ::p4::v1::P4Header* header_;
    ::p4::v1::P4HeaderUnion* header_union_;
    ::p4::v1::P4HeaderStack* header_stack_;
    ::p4::v1::P4HeaderUnionStack* header_union_stack_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum_value_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4Varbit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Varbit) */ {
 public:
  inline P4Varbit() : P4Varbit(nullptr) {}
  ~P4Varbit() override;
  explicit constexpr P4Varbit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4Varbit(const P4Varbit& from);
  P4Varbit(P4Varbit&& from) noexcept
    : P4Varbit() {
    *this = ::std::move(from);
  }

  inline P4Varbit& operator=(const P4Varbit& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4Varbit& operator=(P4Varbit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4Varbit& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4Varbit* internal_default_instance() {
    return reinterpret_cast<const P4Varbit*>(
               &_P4Varbit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P4Varbit& a, P4Varbit& b) {
    a.Swap(&b);
  }
  inline void Swap(P4Varbit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4Varbit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4Varbit* New() const final {
    return new P4Varbit();
  }

  P4Varbit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4Varbit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4Varbit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4Varbit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Varbit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4Varbit";
  }
  protected:
  explicit P4Varbit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitstringFieldNumber = 1,
    kBitwidthFieldNumber = 2,
  };
  // bytes bitstring = 1;
  void clear_bitstring();
  const std::string& bitstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bitstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bitstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_bitstring();
  void set_allocated_bitstring(std::string* bitstring);
  private:
  const std::string& _internal_bitstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bitstring(const std::string& value);
  std::string* _internal_mutable_bitstring();
  public:

  // int32 bitwidth = 2;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.v1.P4Varbit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4StructLike final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4StructLike) */ {
 public:
  inline P4StructLike() : P4StructLike(nullptr) {}
  ~P4StructLike() override;
  explicit constexpr P4StructLike(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4StructLike(const P4StructLike& from);
  P4StructLike(P4StructLike&& from) noexcept
    : P4StructLike() {
    *this = ::std::move(from);
  }

  inline P4StructLike& operator=(const P4StructLike& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4StructLike& operator=(P4StructLike&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4StructLike& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4StructLike* internal_default_instance() {
    return reinterpret_cast<const P4StructLike*>(
               &_P4StructLike_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(P4StructLike& a, P4StructLike& b) {
    a.Swap(&b);
  }
  inline void Swap(P4StructLike* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4StructLike* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4StructLike* New() const final {
    return new P4StructLike();
  }

  P4StructLike* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4StructLike>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4StructLike& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4StructLike& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4StructLike* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4StructLike";
  }
  protected:
  explicit P4StructLike(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .p4.v1.P4Data members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::v1::P4Data* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Data >*
      mutable_members();
  private:
  const ::p4::v1::P4Data& _internal_members(int index) const;
  ::p4::v1::P4Data* _internal_add_members();
  public:
  const ::p4::v1::P4Data& members(int index) const;
  ::p4::v1::P4Data* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Data >&
      members() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4StructLike)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Data > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Header) */ {
 public:
  inline P4Header() : P4Header(nullptr) {}
  ~P4Header() override;
  explicit constexpr P4Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4Header(const P4Header& from);
  P4Header(P4Header&& from) noexcept
    : P4Header() {
    *this = ::std::move(from);
  }

  inline P4Header& operator=(const P4Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4Header& operator=(P4Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4Header* internal_default_instance() {
    return reinterpret_cast<const P4Header*>(
               &_P4Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(P4Header& a, P4Header& b) {
    a.Swap(&b);
  }
  inline void Swap(P4Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4Header* New() const final {
    return new P4Header();
  }

  P4Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4Header";
  }
  protected:
  explicit P4Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitstringsFieldNumber = 2,
    kIsValidFieldNumber = 1,
  };
  // repeated bytes bitstrings = 2;
  int bitstrings_size() const;
  private:
  int _internal_bitstrings_size() const;
  public:
  void clear_bitstrings();
  const std::string& bitstrings(int index) const;
  std::string* mutable_bitstrings(int index);
  void set_bitstrings(int index, const std::string& value);
  void set_bitstrings(int index, std::string&& value);
  void set_bitstrings(int index, const char* value);
  void set_bitstrings(int index, const void* value, size_t size);
  std::string* add_bitstrings();
  void add_bitstrings(const std::string& value);
  void add_bitstrings(std::string&& value);
  void add_bitstrings(const char* value);
  void add_bitstrings(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bitstrings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bitstrings();
  private:
  const std::string& _internal_bitstrings(int index) const;
  std::string* _internal_add_bitstrings();
  public:

  // bool is_valid = 1;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:p4.v1.P4Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bitstrings_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderUnion) */ {
 public:
  inline P4HeaderUnion() : P4HeaderUnion(nullptr) {}
  ~P4HeaderUnion() override;
  explicit constexpr P4HeaderUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderUnion(const P4HeaderUnion& from);
  P4HeaderUnion(P4HeaderUnion&& from) noexcept
    : P4HeaderUnion() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnion& operator=(const P4HeaderUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderUnion& operator=(P4HeaderUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderUnion& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderUnion* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnion*>(
               &_P4HeaderUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(P4HeaderUnion& a, P4HeaderUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderUnion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnion* New() const final {
    return new P4HeaderUnion();
  }

  P4HeaderUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderUnion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderUnion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4HeaderUnion";
  }
  protected:
  explicit P4HeaderUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidHeaderNameFieldNumber = 1,
    kValidHeaderFieldNumber = 2,
  };
  // string valid_header_name = 1;
  void clear_valid_header_name();
  const std::string& valid_header_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_header_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_header_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_valid_header_name();
  void set_allocated_valid_header_name(std::string* valid_header_name);
  private:
  const std::string& _internal_valid_header_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_header_name(const std::string& value);
  std::string* _internal_mutable_valid_header_name();
  public:

  // .p4.v1.P4Header valid_header = 2;
  bool has_valid_header() const;
  private:
  bool _internal_has_valid_header() const;
  public:
  void clear_valid_header();
  const ::p4::v1::P4Header& valid_header() const;
  PROTOBUF_MUST_USE_RESULT ::p4::v1::P4Header* release_valid_header();
  ::p4::v1::P4Header* mutable_valid_header();
  void set_allocated_valid_header(::p4::v1::P4Header* valid_header);
  private:
  const ::p4::v1::P4Header& _internal_valid_header() const;
  ::p4::v1::P4Header* _internal_mutable_valid_header();
  public:
  void unsafe_arena_set_allocated_valid_header(
      ::p4::v1::P4Header* valid_header);
  ::p4::v1::P4Header* unsafe_arena_release_valid_header();

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderUnion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_header_name_;
  ::p4::v1::P4Header* valid_header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderStack) */ {
 public:
  inline P4HeaderStack() : P4HeaderStack(nullptr) {}
  ~P4HeaderStack() override;
  explicit constexpr P4HeaderStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderStack(const P4HeaderStack& from);
  P4HeaderStack(P4HeaderStack&& from) noexcept
    : P4HeaderStack() {
    *this = ::std::move(from);
  }

  inline P4HeaderStack& operator=(const P4HeaderStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderStack& operator=(P4HeaderStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderStack* internal_default_instance() {
    return reinterpret_cast<const P4HeaderStack*>(
               &_P4HeaderStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(P4HeaderStack& a, P4HeaderStack& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderStack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderStack* New() const final {
    return new P4HeaderStack();
  }

  P4HeaderStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderStack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4HeaderStack";
  }
  protected:
  explicit P4HeaderStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .p4.v1.P4Header entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::p4::v1::P4Header* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Header >*
      mutable_entries();
  private:
  const ::p4::v1::P4Header& _internal_entries(int index) const;
  ::p4::v1::P4Header* _internal_add_entries();
  public:
  const ::p4::v1::P4Header& entries(int index) const;
  ::p4::v1::P4Header* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Header >&
      entries() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Header > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderUnionStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderUnionStack) */ {
 public:
  inline P4HeaderUnionStack() : P4HeaderUnionStack(nullptr) {}
  ~P4HeaderUnionStack() override;
  explicit constexpr P4HeaderUnionStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderUnionStack(const P4HeaderUnionStack& from);
  P4HeaderUnionStack(P4HeaderUnionStack&& from) noexcept
    : P4HeaderUnionStack() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnionStack& operator=(const P4HeaderUnionStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderUnionStack& operator=(P4HeaderUnionStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderUnionStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderUnionStack* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnionStack*>(
               &_P4HeaderUnionStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(P4HeaderUnionStack& a, P4HeaderUnionStack& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderUnionStack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderUnionStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnionStack* New() const final {
    return new P4HeaderUnionStack();
  }

  P4HeaderUnionStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnionStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderUnionStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderUnionStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnionStack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.v1.P4HeaderUnionStack";
  }
  protected:
  explicit P4HeaderUnionStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .p4.v1.P4HeaderUnion entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::p4::v1::P4HeaderUnion* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4HeaderUnion >*
      mutable_entries();
  private:
  const ::p4::v1::P4HeaderUnion& _internal_entries(int index) const;
  ::p4::v1::P4HeaderUnion* _internal_add_entries();
  public:
  const ::p4::v1::P4HeaderUnion& entries(int index) const;
  ::p4::v1::P4HeaderUnion* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4HeaderUnion >&
      entries() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderUnionStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4HeaderUnion > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fv1_2fp4data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P4Data

// bytes bitstring = 1;
inline bool P4Data::_internal_has_bitstring() const {
  return data_case() == kBitstring;
}
inline bool P4Data::has_bitstring() const {
  return _internal_has_bitstring();
}
inline void P4Data::set_has_bitstring() {
  _oneof_case_[0] = kBitstring;
}
inline void P4Data::clear_bitstring() {
  if (_internal_has_bitstring()) {
    data_.bitstring_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& P4Data::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bitstring)
  return _internal_bitstring();
}
template <typename ArgT0, typename... ArgT>
inline void P4Data::set_bitstring(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
}
inline std::string* P4Data::mutable_bitstring() {
  std::string* _s = _internal_mutable_bitstring();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.bitstring)
  return _s;
}
inline const std::string& P4Data::_internal_bitstring() const {
  if (_internal_has_bitstring()) {
    return data_.bitstring_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::_internal_set_bitstring(const std::string& value) {
  if (!_internal_has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4Data::_internal_mutable_bitstring() {
  if (!_internal_has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.bitstring_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4Data::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.bitstring)
  if (_internal_has_bitstring()) {
    clear_has_data();
    return data_.bitstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void P4Data::set_allocated_bitstring(std::string* bitstring) {
  if (has_data()) {
    clear_data();
  }
  if (bitstring != nullptr) {
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(bitstring);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bitstring);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.bitstring)
}

// .p4.v1.P4Varbit varbit = 2;
inline bool P4Data::_internal_has_varbit() const {
  return data_case() == kVarbit;
}
inline bool P4Data::has_varbit() const {
  return _internal_has_varbit();
}
inline void P4Data::set_has_varbit() {
  _oneof_case_[0] = kVarbit;
}
inline void P4Data::clear_varbit() {
  if (_internal_has_varbit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.varbit_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4Varbit* P4Data::release_varbit() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.varbit)
  if (_internal_has_varbit()) {
    clear_has_data();
      ::p4::v1::P4Varbit* temp = data_.varbit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.varbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4Varbit& P4Data::_internal_varbit() const {
  return _internal_has_varbit()
      ? *data_.varbit_
      : reinterpret_cast< ::p4::v1::P4Varbit&>(::p4::v1::_P4Varbit_default_instance_);
}
inline const ::p4::v1::P4Varbit& P4Data::varbit() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.varbit)
  return _internal_varbit();
}
inline ::p4::v1::P4Varbit* P4Data::unsafe_arena_release_varbit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.varbit)
  if (_internal_has_varbit()) {
    clear_has_data();
    ::p4::v1::P4Varbit* temp = data_.varbit_;
    data_.varbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_varbit(::p4::v1::P4Varbit* varbit) {
  clear_data();
  if (varbit) {
    set_has_varbit();
    data_.varbit_ = varbit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.varbit)
}
inline ::p4::v1::P4Varbit* P4Data::_internal_mutable_varbit() {
  if (!_internal_has_varbit()) {
    clear_data();
    set_has_varbit();
    data_.varbit_ = CreateMaybeMessage< ::p4::v1::P4Varbit >(GetArenaForAllocation());
  }
  return data_.varbit_;
}
inline ::p4::v1::P4Varbit* P4Data::mutable_varbit() {
  ::p4::v1::P4Varbit* _msg = _internal_mutable_varbit();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.varbit)
  return _msg;
}

// bool bool = 3;
inline bool P4Data::_internal_has_bool_() const {
  return data_case() == kBool;
}
inline bool P4Data::has_bool_() const {
  return _internal_has_bool_();
}
inline void P4Data::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void P4Data::clear_bool_() {
  if (_internal_has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool P4Data::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void P4Data::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
}
inline bool P4Data::bool_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bool)
  return _internal_bool_();
}
inline void P4Data::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bool)
}

// .p4.v1.P4StructLike tuple = 4;
inline bool P4Data::_internal_has_tuple() const {
  return data_case() == kTuple;
}
inline bool P4Data::has_tuple() const {
  return _internal_has_tuple();
}
inline void P4Data::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
inline void P4Data::clear_tuple() {
  if (_internal_has_tuple()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.tuple_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4StructLike* P4Data::release_tuple() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.tuple)
  if (_internal_has_tuple()) {
    clear_has_data();
      ::p4::v1::P4StructLike* temp = data_.tuple_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4StructLike& P4Data::_internal_tuple() const {
  return _internal_has_tuple()
      ? *data_.tuple_
      : reinterpret_cast< ::p4::v1::P4StructLike&>(::p4::v1::_P4StructLike_default_instance_);
}
inline const ::p4::v1::P4StructLike& P4Data::tuple() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.tuple)
  return _internal_tuple();
}
inline ::p4::v1::P4StructLike* P4Data::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.tuple)
  if (_internal_has_tuple()) {
    clear_has_data();
    ::p4::v1::P4StructLike* temp = data_.tuple_;
    data_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_tuple(::p4::v1::P4StructLike* tuple) {
  clear_data();
  if (tuple) {
    set_has_tuple();
    data_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.tuple)
}
inline ::p4::v1::P4StructLike* P4Data::_internal_mutable_tuple() {
  if (!_internal_has_tuple()) {
    clear_data();
    set_has_tuple();
    data_.tuple_ = CreateMaybeMessage< ::p4::v1::P4StructLike >(GetArenaForAllocation());
  }
  return data_.tuple_;
}
inline ::p4::v1::P4StructLike* P4Data::mutable_tuple() {
  ::p4::v1::P4StructLike* _msg = _internal_mutable_tuple();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.tuple)
  return _msg;
}

// .p4.v1.P4StructLike struct = 5;
inline bool P4Data::_internal_has_struct_() const {
  return data_case() == kStruct;
}
inline bool P4Data::has_struct_() const {
  return _internal_has_struct_();
}
inline void P4Data::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void P4Data::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.struct__;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4StructLike* P4Data::release_struct_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.struct)
  if (_internal_has_struct_()) {
    clear_has_data();
      ::p4::v1::P4StructLike* temp = data_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4StructLike& P4Data::_internal_struct_() const {
  return _internal_has_struct_()
      ? *data_.struct__
      : reinterpret_cast< ::p4::v1::P4StructLike&>(::p4::v1::_P4StructLike_default_instance_);
}
inline const ::p4::v1::P4StructLike& P4Data::struct_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.struct)
  return _internal_struct_();
}
inline ::p4::v1::P4StructLike* P4Data::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.struct)
  if (_internal_has_struct_()) {
    clear_has_data();
    ::p4::v1::P4StructLike* temp = data_.struct__;
    data_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_struct_(::p4::v1::P4StructLike* struct_) {
  clear_data();
  if (struct_) {
    set_has_struct_();
    data_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.struct)
}
inline ::p4::v1::P4StructLike* P4Data::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_data();
    set_has_struct_();
    data_.struct__ = CreateMaybeMessage< ::p4::v1::P4StructLike >(GetArenaForAllocation());
  }
  return data_.struct__;
}
inline ::p4::v1::P4StructLike* P4Data::mutable_struct_() {
  ::p4::v1::P4StructLike* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.struct)
  return _msg;
}

// .p4.v1.P4Header header = 6;
inline bool P4Data::_internal_has_header() const {
  return data_case() == kHeader;
}
inline bool P4Data::has_header() const {
  return _internal_has_header();
}
inline void P4Data::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void P4Data::clear_header() {
  if (_internal_has_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.header_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4Header* P4Data::release_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header)
  if (_internal_has_header()) {
    clear_has_data();
      ::p4::v1::P4Header* temp = data_.header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4Header& P4Data::_internal_header() const {
  return _internal_has_header()
      ? *data_.header_
      : reinterpret_cast< ::p4::v1::P4Header&>(::p4::v1::_P4Header_default_instance_);
}
inline const ::p4::v1::P4Header& P4Data::header() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header)
  return _internal_header();
}
inline ::p4::v1::P4Header* P4Data::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.header)
  if (_internal_has_header()) {
    clear_has_data();
    ::p4::v1::P4Header* temp = data_.header_;
    data_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_header(::p4::v1::P4Header* header) {
  clear_data();
  if (header) {
    set_has_header();
    data_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.header)
}
inline ::p4::v1::P4Header* P4Data::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_data();
    set_has_header();
    data_.header_ = CreateMaybeMessage< ::p4::v1::P4Header >(GetArenaForAllocation());
  }
  return data_.header_;
}
inline ::p4::v1::P4Header* P4Data::mutable_header() {
  ::p4::v1::P4Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header)
  return _msg;
}

// .p4.v1.P4HeaderUnion header_union = 7;
inline bool P4Data::_internal_has_header_union() const {
  return data_case() == kHeaderUnion;
}
inline bool P4Data::has_header_union() const {
  return _internal_has_header_union();
}
inline void P4Data::set_has_header_union() {
  _oneof_case_[0] = kHeaderUnion;
}
inline void P4Data::clear_header_union() {
  if (_internal_has_header_union()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.header_union_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4HeaderUnion* P4Data::release_header_union() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union)
  if (_internal_has_header_union()) {
    clear_has_data();
      ::p4::v1::P4HeaderUnion* temp = data_.header_union_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.header_union_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4HeaderUnion& P4Data::_internal_header_union() const {
  return _internal_has_header_union()
      ? *data_.header_union_
      : reinterpret_cast< ::p4::v1::P4HeaderUnion&>(::p4::v1::_P4HeaderUnion_default_instance_);
}
inline const ::p4::v1::P4HeaderUnion& P4Data::header_union() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union)
  return _internal_header_union();
}
inline ::p4::v1::P4HeaderUnion* P4Data::unsafe_arena_release_header_union() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.header_union)
  if (_internal_has_header_union()) {
    clear_has_data();
    ::p4::v1::P4HeaderUnion* temp = data_.header_union_;
    data_.header_union_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_header_union(::p4::v1::P4HeaderUnion* header_union) {
  clear_data();
  if (header_union) {
    set_has_header_union();
    data_.header_union_ = header_union;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.header_union)
}
inline ::p4::v1::P4HeaderUnion* P4Data::_internal_mutable_header_union() {
  if (!_internal_has_header_union()) {
    clear_data();
    set_has_header_union();
    data_.header_union_ = CreateMaybeMessage< ::p4::v1::P4HeaderUnion >(GetArenaForAllocation());
  }
  return data_.header_union_;
}
inline ::p4::v1::P4HeaderUnion* P4Data::mutable_header_union() {
  ::p4::v1::P4HeaderUnion* _msg = _internal_mutable_header_union();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union)
  return _msg;
}

// .p4.v1.P4HeaderStack header_stack = 8;
inline bool P4Data::_internal_has_header_stack() const {
  return data_case() == kHeaderStack;
}
inline bool P4Data::has_header_stack() const {
  return _internal_has_header_stack();
}
inline void P4Data::set_has_header_stack() {
  _oneof_case_[0] = kHeaderStack;
}
inline void P4Data::clear_header_stack() {
  if (_internal_has_header_stack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.header_stack_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4HeaderStack* P4Data::release_header_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_stack)
  if (_internal_has_header_stack()) {
    clear_has_data();
      ::p4::v1::P4HeaderStack* temp = data_.header_stack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.header_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4HeaderStack& P4Data::_internal_header_stack() const {
  return _internal_has_header_stack()
      ? *data_.header_stack_
      : reinterpret_cast< ::p4::v1::P4HeaderStack&>(::p4::v1::_P4HeaderStack_default_instance_);
}
inline const ::p4::v1::P4HeaderStack& P4Data::header_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_stack)
  return _internal_header_stack();
}
inline ::p4::v1::P4HeaderStack* P4Data::unsafe_arena_release_header_stack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.header_stack)
  if (_internal_has_header_stack()) {
    clear_has_data();
    ::p4::v1::P4HeaderStack* temp = data_.header_stack_;
    data_.header_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_header_stack(::p4::v1::P4HeaderStack* header_stack) {
  clear_data();
  if (header_stack) {
    set_has_header_stack();
    data_.header_stack_ = header_stack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.header_stack)
}
inline ::p4::v1::P4HeaderStack* P4Data::_internal_mutable_header_stack() {
  if (!_internal_has_header_stack()) {
    clear_data();
    set_has_header_stack();
    data_.header_stack_ = CreateMaybeMessage< ::p4::v1::P4HeaderStack >(GetArenaForAllocation());
  }
  return data_.header_stack_;
}
inline ::p4::v1::P4HeaderStack* P4Data::mutable_header_stack() {
  ::p4::v1::P4HeaderStack* _msg = _internal_mutable_header_stack();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_stack)
  return _msg;
}

// .p4.v1.P4HeaderUnionStack header_union_stack = 9;
inline bool P4Data::_internal_has_header_union_stack() const {
  return data_case() == kHeaderUnionStack;
}
inline bool P4Data::has_header_union_stack() const {
  return _internal_has_header_union_stack();
}
inline void P4Data::set_has_header_union_stack() {
  _oneof_case_[0] = kHeaderUnionStack;
}
inline void P4Data::clear_header_union_stack() {
  if (_internal_has_header_union_stack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.header_union_stack_;
    }
    clear_has_data();
  }
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::release_header_union_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union_stack)
  if (_internal_has_header_union_stack()) {
    clear_has_data();
      ::p4::v1::P4HeaderUnionStack* temp = data_.header_union_stack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.header_union_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::v1::P4HeaderUnionStack& P4Data::_internal_header_union_stack() const {
  return _internal_has_header_union_stack()
      ? *data_.header_union_stack_
      : reinterpret_cast< ::p4::v1::P4HeaderUnionStack&>(::p4::v1::_P4HeaderUnionStack_default_instance_);
}
inline const ::p4::v1::P4HeaderUnionStack& P4Data::header_union_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union_stack)
  return _internal_header_union_stack();
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::unsafe_arena_release_header_union_stack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.v1.P4Data.header_union_stack)
  if (_internal_has_header_union_stack()) {
    clear_has_data();
    ::p4::v1::P4HeaderUnionStack* temp = data_.header_union_stack_;
    data_.header_union_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4Data::unsafe_arena_set_allocated_header_union_stack(::p4::v1::P4HeaderUnionStack* header_union_stack) {
  clear_data();
  if (header_union_stack) {
    set_has_header_union_stack();
    data_.header_union_stack_ = header_union_stack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4Data.header_union_stack)
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::_internal_mutable_header_union_stack() {
  if (!_internal_has_header_union_stack()) {
    clear_data();
    set_has_header_union_stack();
    data_.header_union_stack_ = CreateMaybeMessage< ::p4::v1::P4HeaderUnionStack >(GetArenaForAllocation());
  }
  return data_.header_union_stack_;
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::mutable_header_union_stack() {
  ::p4::v1::P4HeaderUnionStack* _msg = _internal_mutable_header_union_stack();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union_stack)
  return _msg;
}

// string enum = 10;
inline bool P4Data::_internal_has_enum_() const {
  return data_case() == kEnum;
}
inline bool P4Data::has_enum_() const {
  return _internal_has_enum_();
}
inline void P4Data::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void P4Data::clear_enum_() {
  if (_internal_has_enum_()) {
    data_.enum__.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& P4Data::enum_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum)
  return _internal_enum_();
}
template <typename ArgT0, typename... ArgT>
inline void P4Data::set_enum_(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
}
inline std::string* P4Data::mutable_enum_() {
  std::string* _s = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum)
  return _s;
}
inline const std::string& P4Data::_internal_enum_() const {
  if (_internal_has_enum_()) {
    return data_.enum__.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::_internal_set_enum_(const std::string& value) {
  if (!_internal_has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4Data::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.enum__.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4Data::release_enum_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum)
  if (_internal_has_enum_()) {
    clear_has_data();
    return data_.enum__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void P4Data::set_allocated_enum_(std::string* enum_) {
  if (has_data()) {
    clear_data();
  }
  if (enum_ != nullptr) {
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(enum_);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(enum_);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum)
}

// string error = 11;
inline bool P4Data::_internal_has_error() const {
  return data_case() == kError;
}
inline bool P4Data::has_error() const {
  return _internal_has_error();
}
inline void P4Data::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void P4Data::clear_error() {
  if (_internal_has_error()) {
    data_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& P4Data::error() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline void P4Data::set_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
}
inline std::string* P4Data::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.error)
  return _s;
}
inline const std::string& P4Data::_internal_error() const {
  if (_internal_has_error()) {
    return data_.error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4Data::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.error_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4Data::release_error() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.error)
  if (_internal_has_error()) {
    clear_has_data();
    return data_.error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void P4Data::set_allocated_error(std::string* error) {
  if (has_data()) {
    clear_data();
  }
  if (error != nullptr) {
    set_has_error();
    data_.error_.UnsafeSetDefault(error);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(error);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.error)
}

// bytes enum_value = 12;
inline bool P4Data::_internal_has_enum_value() const {
  return data_case() == kEnumValue;
}
inline bool P4Data::has_enum_value() const {
  return _internal_has_enum_value();
}
inline void P4Data::set_has_enum_value() {
  _oneof_case_[0] = kEnumValue;
}
inline void P4Data::clear_enum_value() {
  if (_internal_has_enum_value()) {
    data_.enum_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& P4Data::enum_value() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum_value)
  return _internal_enum_value();
}
template <typename ArgT0, typename... ArgT>
inline void P4Data::set_enum_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
}
inline std::string* P4Data::mutable_enum_value() {
  std::string* _s = _internal_mutable_enum_value();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum_value)
  return _s;
}
inline const std::string& P4Data::_internal_enum_value() const {
  if (_internal_has_enum_value()) {
    return data_.enum_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::_internal_set_enum_value(const std::string& value) {
  if (!_internal_has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4Data::_internal_mutable_enum_value() {
  if (!_internal_has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.enum_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4Data::release_enum_value() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum_value)
  if (_internal_has_enum_value()) {
    clear_has_data();
    return data_.enum_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void P4Data::set_allocated_enum_value(std::string* enum_value) {
  if (has_data()) {
    clear_data();
  }
  if (enum_value != nullptr) {
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(enum_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(enum_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum_value)
}

inline bool P4Data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void P4Data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline P4Data::DataCase P4Data::data_case() const {
  return P4Data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// P4Varbit

// bytes bitstring = 1;
inline void P4Varbit::clear_bitstring() {
  bitstring_.ClearToEmpty();
}
inline const std::string& P4Varbit::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitstring)
  return _internal_bitstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4Varbit::set_bitstring(ArgT0&& arg0, ArgT... args) {
 
 bitstring_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitstring)
}
inline std::string* P4Varbit::mutable_bitstring() {
  std::string* _s = _internal_mutable_bitstring();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Varbit.bitstring)
  return _s;
}
inline const std::string& P4Varbit::_internal_bitstring() const {
  return bitstring_.Get();
}
inline void P4Varbit::_internal_set_bitstring(const std::string& value) {
  
  bitstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4Varbit::_internal_mutable_bitstring() {
  
  return bitstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4Varbit::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Varbit.bitstring)
  return bitstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4Varbit::set_allocated_bitstring(std::string* bitstring) {
  if (bitstring != nullptr) {
    
  } else {
    
  }
  bitstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Varbit.bitstring)
}

// int32 bitwidth = 2;
inline void P4Varbit::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4Varbit::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4Varbit::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitwidth)
  return _internal_bitwidth();
}
inline void P4Varbit::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void P4Varbit::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitwidth)
}

// -------------------------------------------------------------------

// P4StructLike

// repeated .p4.v1.P4Data members = 1;
inline int P4StructLike::_internal_members_size() const {
  return members_.size();
}
inline int P4StructLike::members_size() const {
  return _internal_members_size();
}
inline void P4StructLike::clear_members() {
  members_.Clear();
}
inline ::p4::v1::P4Data* P4StructLike::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4StructLike.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Data >*
P4StructLike::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4StructLike.members)
  return &members_;
}
inline const ::p4::v1::P4Data& P4StructLike::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::v1::P4Data& P4StructLike::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4StructLike.members)
  return _internal_members(index);
}
inline ::p4::v1::P4Data* P4StructLike::_internal_add_members() {
  return members_.Add();
}
inline ::p4::v1::P4Data* P4StructLike::add_members() {
  ::p4::v1::P4Data* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.v1.P4StructLike.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Data >&
P4StructLike::members() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4StructLike.members)
  return members_;
}

// -------------------------------------------------------------------

// P4Header

// bool is_valid = 1;
inline void P4Header::clear_is_valid() {
  is_valid_ = false;
}
inline bool P4Header::_internal_is_valid() const {
  return is_valid_;
}
inline bool P4Header::is_valid() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.is_valid)
  return _internal_is_valid();
}
inline void P4Header::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void P4Header::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.is_valid)
}

// repeated bytes bitstrings = 2;
inline int P4Header::_internal_bitstrings_size() const {
  return bitstrings_.size();
}
inline int P4Header::bitstrings_size() const {
  return _internal_bitstrings_size();
}
inline void P4Header::clear_bitstrings() {
  bitstrings_.Clear();
}
inline std::string* P4Header::add_bitstrings() {
  std::string* _s = _internal_add_bitstrings();
  // @@protoc_insertion_point(field_add_mutable:p4.v1.P4Header.bitstrings)
  return _s;
}
inline const std::string& P4Header::_internal_bitstrings(int index) const {
  return bitstrings_.Get(index);
}
inline const std::string& P4Header::bitstrings(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.bitstrings)
  return _internal_bitstrings(index);
}
inline std::string* P4Header::mutable_bitstrings(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Header.bitstrings)
  return bitstrings_.Mutable(index);
}
inline void P4Header::set_bitstrings(int index, const std::string& value) {
  bitstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.bitstrings)
}
inline void P4Header::set_bitstrings(int index, std::string&& value) {
  bitstrings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.bitstrings)
}
inline void P4Header::set_bitstrings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bitstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Header.bitstrings)
}
inline void P4Header::set_bitstrings(int index, const void* value, size_t size) {
  bitstrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Header.bitstrings)
}
inline std::string* P4Header::_internal_add_bitstrings() {
  return bitstrings_.Add();
}
inline void P4Header::add_bitstrings(const std::string& value) {
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.v1.P4Header.bitstrings)
}
inline void P4Header::add_bitstrings(std::string&& value) {
  bitstrings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.v1.P4Header.bitstrings)
}
inline void P4Header::add_bitstrings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.v1.P4Header.bitstrings)
}
inline void P4Header::add_bitstrings(const void* value, size_t size) {
  bitstrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.v1.P4Header.bitstrings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4Header::bitstrings() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4Header.bitstrings)
  return bitstrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4Header::mutable_bitstrings() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4Header.bitstrings)
  return &bitstrings_;
}

// -------------------------------------------------------------------

// P4HeaderUnion

// string valid_header_name = 1;
inline void P4HeaderUnion::clear_valid_header_name() {
  valid_header_name_.ClearToEmpty();
}
inline const std::string& P4HeaderUnion::valid_header_name() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header_name)
  return _internal_valid_header_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4HeaderUnion::set_valid_header_name(ArgT0&& arg0, ArgT... args) {
 
 valid_header_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.v1.P4HeaderUnion.valid_header_name)
}
inline std::string* P4HeaderUnion::mutable_valid_header_name() {
  std::string* _s = _internal_mutable_valid_header_name();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header_name)
  return _s;
}
inline const std::string& P4HeaderUnion::_internal_valid_header_name() const {
  return valid_header_name_.Get();
}
inline void P4HeaderUnion::_internal_set_valid_header_name(const std::string& value) {
  
  valid_header_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4HeaderUnion::_internal_mutable_valid_header_name() {
  
  return valid_header_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4HeaderUnion::release_valid_header_name() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header_name)
  return valid_header_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4HeaderUnion::set_allocated_valid_header_name(std::string* valid_header_name) {
  if (valid_header_name != nullptr) {
    
  } else {
    
  }
  valid_header_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valid_header_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header_name)
}

// .p4.v1.P4Header valid_header = 2;
inline bool P4HeaderUnion::_internal_has_valid_header() const {
  return this != internal_default_instance() && valid_header_ != nullptr;
}
inline bool P4HeaderUnion::has_valid_header() const {
  return _internal_has_valid_header();
}
inline void P4HeaderUnion::clear_valid_header() {
  if (GetArenaForAllocation() == nullptr && valid_header_ != nullptr) {
    delete valid_header_;
  }
  valid_header_ = nullptr;
}
inline const ::p4::v1::P4Header& P4HeaderUnion::_internal_valid_header() const {
  const ::p4::v1::P4Header* p = valid_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::v1::P4Header&>(
      ::p4::v1::_P4Header_default_instance_);
}
inline const ::p4::v1::P4Header& P4HeaderUnion::valid_header() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header)
  return _internal_valid_header();
}
inline void P4HeaderUnion::unsafe_arena_set_allocated_valid_header(
    ::p4::v1::P4Header* valid_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valid_header_);
  }
  valid_header_ = valid_header;
  if (valid_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.v1.P4HeaderUnion.valid_header)
}
inline ::p4::v1::P4Header* P4HeaderUnion::release_valid_header() {
  
  ::p4::v1::P4Header* temp = valid_header_;
  valid_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::v1::P4Header* P4HeaderUnion::unsafe_arena_release_valid_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header)
  
  ::p4::v1::P4Header* temp = valid_header_;
  valid_header_ = nullptr;
  return temp;
}
inline ::p4::v1::P4Header* P4HeaderUnion::_internal_mutable_valid_header() {
  
  if (valid_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::v1::P4Header>(GetArenaForAllocation());
    valid_header_ = p;
  }
  return valid_header_;
}
inline ::p4::v1::P4Header* P4HeaderUnion::mutable_valid_header() {
  ::p4::v1::P4Header* _msg = _internal_mutable_valid_header();
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header)
  return _msg;
}
inline void P4HeaderUnion::set_allocated_valid_header(::p4::v1::P4Header* valid_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete valid_header_;
  }
  if (valid_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4Header>::GetOwningArena(valid_header);
    if (message_arena != submessage_arena) {
      valid_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valid_header, submessage_arena);
    }
    
  } else {
    
  }
  valid_header_ = valid_header;
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header)
}

// -------------------------------------------------------------------

// P4HeaderStack

// repeated .p4.v1.P4Header entries = 1;
inline int P4HeaderStack::_internal_entries_size() const {
  return entries_.size();
}
inline int P4HeaderStack::entries_size() const {
  return _internal_entries_size();
}
inline void P4HeaderStack::clear_entries() {
  entries_.Clear();
}
inline ::p4::v1::P4Header* P4HeaderStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderStack.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Header >*
P4HeaderStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderStack.entries)
  return &entries_;
}
inline const ::p4::v1::P4Header& P4HeaderStack::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::p4::v1::P4Header& P4HeaderStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderStack.entries)
  return _internal_entries(index);
}
inline ::p4::v1::P4Header* P4HeaderStack::_internal_add_entries() {
  return entries_.Add();
}
inline ::p4::v1::P4Header* P4HeaderStack::add_entries() {
  ::p4::v1::P4Header* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderStack.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4Header >&
P4HeaderStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderStack.entries)
  return entries_;
}

// -------------------------------------------------------------------

// P4HeaderUnionStack

// repeated .p4.v1.P4HeaderUnion entries = 1;
inline int P4HeaderUnionStack::_internal_entries_size() const {
  return entries_.size();
}
inline int P4HeaderUnionStack::entries_size() const {
  return _internal_entries_size();
}
inline void P4HeaderUnionStack::clear_entries() {
  entries_.Clear();
}
inline ::p4::v1::P4HeaderUnion* P4HeaderUnionStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4HeaderUnion >*
P4HeaderUnionStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderUnionStack.entries)
  return &entries_;
}
inline const ::p4::v1::P4HeaderUnion& P4HeaderUnionStack::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::p4::v1::P4HeaderUnion& P4HeaderUnionStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnionStack.entries)
  return _internal_entries(index);
}
inline ::p4::v1::P4HeaderUnion* P4HeaderUnionStack::_internal_add_entries() {
  return entries_.Add();
}
inline ::p4::v1::P4HeaderUnion* P4HeaderUnionStack::add_entries() {
  ::p4::v1::P4HeaderUnion* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderUnionStack.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::v1::P4HeaderUnion >&
P4HeaderUnionStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderUnionStack.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace p4

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto
