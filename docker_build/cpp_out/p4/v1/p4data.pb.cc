// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4data.proto

#include "p4/v1/p4data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace p4 {
namespace v1 {
constexpr P4Data::P4Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct P4DataDefaultTypeInternal {
  constexpr P4DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4DataDefaultTypeInternal() {}
  union {
    P4Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4DataDefaultTypeInternal _P4Data_default_instance_;
constexpr P4Varbit::P4Varbit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bitwidth_(0){}
struct P4VarbitDefaultTypeInternal {
  constexpr P4VarbitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4VarbitDefaultTypeInternal() {}
  union {
    P4Varbit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4VarbitDefaultTypeInternal _P4Varbit_default_instance_;
constexpr P4StructLike::P4StructLike(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_(){}
struct P4StructLikeDefaultTypeInternal {
  constexpr P4StructLikeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4StructLikeDefaultTypeInternal() {}
  union {
    P4StructLike _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4StructLikeDefaultTypeInternal _P4StructLike_default_instance_;
constexpr P4Header::P4Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitstrings_()
  , is_valid_(false){}
struct P4HeaderDefaultTypeInternal {
  constexpr P4HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderDefaultTypeInternal() {}
  union {
    P4Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderDefaultTypeInternal _P4Header_default_instance_;
constexpr P4HeaderUnion::P4HeaderUnion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_header_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , valid_header_(nullptr){}
struct P4HeaderUnionDefaultTypeInternal {
  constexpr P4HeaderUnionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderUnionDefaultTypeInternal() {}
  union {
    P4HeaderUnion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderUnionDefaultTypeInternal _P4HeaderUnion_default_instance_;
constexpr P4HeaderStack::P4HeaderStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct P4HeaderStackDefaultTypeInternal {
  constexpr P4HeaderStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderStackDefaultTypeInternal() {}
  union {
    P4HeaderStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderStackDefaultTypeInternal _P4HeaderStack_default_instance_;
constexpr P4HeaderUnionStack::P4HeaderUnionStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct P4HeaderUnionStackDefaultTypeInternal {
  constexpr P4HeaderUnionStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderUnionStackDefaultTypeInternal() {}
  union {
    P4HeaderUnionStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderUnionStackDefaultTypeInternal _P4HeaderUnionStack_default_instance_;
}  // namespace v1
}  // namespace p4
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p4_2fv1_2fp4data_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_p4_2fv1_2fp4data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p4_2fv1_2fp4data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p4_2fv1_2fp4data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Varbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Varbit, bitstring_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Varbit, bitwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4StructLike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4StructLike, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Header, is_valid_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4Header, bitstrings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderUnion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderUnion, valid_header_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderUnion, valid_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderStack, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderUnionStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::P4HeaderUnionStack, entries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::p4::v1::P4Data)},
  { 19, -1, -1, sizeof(::p4::v1::P4Varbit)},
  { 27, -1, -1, sizeof(::p4::v1::P4StructLike)},
  { 34, -1, -1, sizeof(::p4::v1::P4Header)},
  { 42, -1, -1, sizeof(::p4::v1::P4HeaderUnion)},
  { 50, -1, -1, sizeof(::p4::v1::P4HeaderStack)},
  { 57, -1, -1, sizeof(::p4::v1::P4HeaderUnionStack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4Varbit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4StructLike_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4HeaderUnion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4HeaderStack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_P4HeaderUnionStack_default_instance_),
};

const char descriptor_table_protodef_p4_2fv1_2fp4data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022p4/v1/p4data.proto\022\005p4.v1\"\224\003\n\006P4Data\022\023"
  "\n\tbitstring\030\001 \001(\014H\000\022!\n\006varbit\030\002 \001(\0132\017.p4"
  ".v1.P4VarbitH\000\022\016\n\004bool\030\003 \001(\010H\000\022$\n\005tuple\030"
  "\004 \001(\0132\023.p4.v1.P4StructLikeH\000\022%\n\006struct\030\005"
  " \001(\0132\023.p4.v1.P4StructLikeH\000\022!\n\006header\030\006 "
  "\001(\0132\017.p4.v1.P4HeaderH\000\022,\n\014header_union\030\007"
  " \001(\0132\024.p4.v1.P4HeaderUnionH\000\022,\n\014header_s"
  "tack\030\010 \001(\0132\024.p4.v1.P4HeaderStackH\000\0227\n\022he"
  "ader_union_stack\030\t \001(\0132\031.p4.v1.P4HeaderU"
  "nionStackH\000\022\016\n\004enum\030\n \001(\tH\000\022\017\n\005error\030\013 \001"
  "(\tH\000\022\024\n\nenum_value\030\014 \001(\014H\000B\006\n\004data\"/\n\010P4"
  "Varbit\022\021\n\tbitstring\030\001 \001(\014\022\020\n\010bitwidth\030\002 "
  "\001(\005\".\n\014P4StructLike\022\036\n\007members\030\001 \003(\0132\r.p"
  "4.v1.P4Data\"0\n\010P4Header\022\020\n\010is_valid\030\001 \001("
  "\010\022\022\n\nbitstrings\030\002 \003(\014\"Q\n\rP4HeaderUnion\022\031"
  "\n\021valid_header_name\030\001 \001(\t\022%\n\014valid_heade"
  "r\030\002 \001(\0132\017.p4.v1.P4Header\"1\n\rP4HeaderStac"
  "k\022 \n\007entries\030\001 \003(\0132\017.p4.v1.P4Header\";\n\022P"
  "4HeaderUnionStack\022%\n\007entries\030\001 \003(\0132\024.p4."
  "v1.P4HeaderUnionB&Z$github.com/p4lang/p4"
  "runtime/go/p4/v1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p4_2fv1_2fp4data_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fv1_2fp4data_2eproto = {
  false, false, 824, descriptor_table_protodef_p4_2fv1_2fp4data_2eproto, "p4/v1/p4data.proto", 
  &descriptor_table_p4_2fv1_2fp4data_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_p4_2fv1_2fp4data_2eproto::offsets,
  file_level_metadata_p4_2fv1_2fp4data_2eproto, file_level_enum_descriptors_p4_2fv1_2fp4data_2eproto, file_level_service_descriptors_p4_2fv1_2fp4data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p4_2fv1_2fp4data_2eproto_getter() {
  return &descriptor_table_p4_2fv1_2fp4data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p4_2fv1_2fp4data_2eproto(&descriptor_table_p4_2fv1_2fp4data_2eproto);
namespace p4 {
namespace v1 {

// ===================================================================

class P4Data::_Internal {
 public:
  static const ::p4::v1::P4Varbit& varbit(const P4Data* msg);
  static const ::p4::v1::P4StructLike& tuple(const P4Data* msg);
  static const ::p4::v1::P4StructLike& struct_(const P4Data* msg);
  static const ::p4::v1::P4Header& header(const P4Data* msg);
  static const ::p4::v1::P4HeaderUnion& header_union(const P4Data* msg);
  static const ::p4::v1::P4HeaderStack& header_stack(const P4Data* msg);
  static const ::p4::v1::P4HeaderUnionStack& header_union_stack(const P4Data* msg);
};

const ::p4::v1::P4Varbit&
P4Data::_Internal::varbit(const P4Data* msg) {
  return *msg->data_.varbit_;
}
const ::p4::v1::P4StructLike&
P4Data::_Internal::tuple(const P4Data* msg) {
  return *msg->data_.tuple_;
}
const ::p4::v1::P4StructLike&
P4Data::_Internal::struct_(const P4Data* msg) {
  return *msg->data_.struct__;
}
const ::p4::v1::P4Header&
P4Data::_Internal::header(const P4Data* msg) {
  return *msg->data_.header_;
}
const ::p4::v1::P4HeaderUnion&
P4Data::_Internal::header_union(const P4Data* msg) {
  return *msg->data_.header_union_;
}
const ::p4::v1::P4HeaderStack&
P4Data::_Internal::header_stack(const P4Data* msg) {
  return *msg->data_.header_stack_;
}
const ::p4::v1::P4HeaderUnionStack&
P4Data::_Internal::header_union_stack(const P4Data* msg) {
  return *msg->data_.header_union_stack_;
}
void P4Data::set_allocated_varbit(::p4::v1::P4Varbit* varbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (varbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4Varbit>::GetOwningArena(varbit);
    if (message_arena != submessage_arena) {
      varbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varbit, submessage_arena);
    }
    set_has_varbit();
    data_.varbit_ = varbit;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.varbit)
}
void P4Data::set_allocated_tuple(::p4::v1::P4StructLike* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4StructLike>::GetOwningArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    data_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.tuple)
}
void P4Data::set_allocated_struct_(::p4::v1::P4StructLike* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4StructLike>::GetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    data_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.struct)
}
void P4Data::set_allocated_header(::p4::v1::P4Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    data_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header)
}
void P4Data::set_allocated_header_union(::p4::v1::P4HeaderUnion* header_union) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (header_union) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4HeaderUnion>::GetOwningArena(header_union);
    if (message_arena != submessage_arena) {
      header_union = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_union, submessage_arena);
    }
    set_has_header_union();
    data_.header_union_ = header_union;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_union)
}
void P4Data::set_allocated_header_stack(::p4::v1::P4HeaderStack* header_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (header_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4HeaderStack>::GetOwningArena(header_stack);
    if (message_arena != submessage_arena) {
      header_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_stack, submessage_arena);
    }
    set_has_header_stack();
    data_.header_stack_ = header_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_stack)
}
void P4Data::set_allocated_header_union_stack(::p4::v1::P4HeaderUnionStack* header_union_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (header_union_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::P4HeaderUnionStack>::GetOwningArena(header_union_stack);
    if (message_arena != submessage_arena) {
      header_union_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_union_stack, submessage_arena);
    }
    set_has_header_union_stack();
    data_.header_union_stack_ = header_union_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_union_stack)
}
P4Data::P4Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4Data)
}
P4Data::P4Data(const P4Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBitstring: {
      _internal_set_bitstring(from._internal_bitstring());
      break;
    }
    case kVarbit: {
      _internal_mutable_varbit()->::p4::v1::P4Varbit::MergeFrom(from._internal_varbit());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::p4::v1::P4StructLike::MergeFrom(from._internal_tuple());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::p4::v1::P4StructLike::MergeFrom(from._internal_struct_());
      break;
    }
    case kHeader: {
      _internal_mutable_header()->::p4::v1::P4Header::MergeFrom(from._internal_header());
      break;
    }
    case kHeaderUnion: {
      _internal_mutable_header_union()->::p4::v1::P4HeaderUnion::MergeFrom(from._internal_header_union());
      break;
    }
    case kHeaderStack: {
      _internal_mutable_header_stack()->::p4::v1::P4HeaderStack::MergeFrom(from._internal_header_stack());
      break;
    }
    case kHeaderUnionStack: {
      _internal_mutable_header_union_stack()->::p4::v1::P4HeaderUnionStack::MergeFrom(from._internal_header_union_stack());
      break;
    }
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kEnumValue: {
      _internal_set_enum_value(from._internal_enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Data)
}

void P4Data::SharedCtor() {
clear_has_data();
}

P4Data::~P4Data() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void P4Data::ArenaDtor(void* object) {
  P4Data* _this = reinterpret_cast< P4Data* >(object);
  (void)_this;
}
void P4Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4Data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.P4Data)
  switch (data_case()) {
    case kBitstring: {
      data_.bitstring_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVarbit: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.varbit_;
      }
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kTuple: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.tuple_;
      }
      break;
    }
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.struct__;
      }
      break;
    }
    case kHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.header_;
      }
      break;
    }
    case kHeaderUnion: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.header_union_;
      }
      break;
    }
    case kHeaderStack: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.header_stack_;
      }
      break;
    }
    case kHeaderUnionStack: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.header_union_stack_;
      }
      break;
    }
    case kEnum: {
      data_.enum__.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      data_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kEnumValue: {
      data_.enum_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void P4Data::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bitstring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bitstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4Varbit varbit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_varbit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4StructLike tuple = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4StructLike struct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4Header header = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4HeaderUnion header_union = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_union(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4HeaderStack header_stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_union_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_enum_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.P4Data.enum"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.P4Data.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes enum_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bitstring = 1;
  if (_internal_has_bitstring()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bitstring(), target);
  }

  // .p4.v1.P4Varbit varbit = 2;
  if (_internal_has_varbit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::varbit(this), target, stream);
  }

  // bool bool = 3;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_(), target);
  }

  // .p4.v1.P4StructLike tuple = 4;
  if (_internal_has_tuple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tuple(this), target, stream);
  }

  // .p4.v1.P4StructLike struct = 5;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::struct_(this), target, stream);
  }

  // .p4.v1.P4Header header = 6;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::header(this), target, stream);
  }

  // .p4.v1.P4HeaderUnion header_union = 7;
  if (_internal_has_header_union()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::header_union(this), target, stream);
  }

  // .p4.v1.P4HeaderStack header_stack = 8;
  if (_internal_has_header_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::header_stack(this), target, stream);
  }

  // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
  if (_internal_has_header_union_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::header_union_stack(this), target, stream);
  }

  // string enum = 10;
  if (_internal_has_enum_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enum_().data(), static_cast<int>(this->_internal_enum_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.enum");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_enum_(), target);
  }

  // string error = 11;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.error");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_error(), target);
  }

  // bytes enum_value = 12;
  if (_internal_has_enum_value()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Data)
  return target;
}

size_t P4Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // bytes bitstring = 1;
    case kBitstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bitstring());
      break;
    }
    // .p4.v1.P4Varbit varbit = 2;
    case kVarbit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.varbit_);
      break;
    }
    // bool bool = 3;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // .p4.v1.P4StructLike tuple = 4;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.tuple_);
      break;
    }
    // .p4.v1.P4StructLike struct = 5;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.struct__);
      break;
    }
    // .p4.v1.P4Header header = 6;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.header_);
      break;
    }
    // .p4.v1.P4HeaderUnion header_union = 7;
    case kHeaderUnion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.header_union_);
      break;
    }
    // .p4.v1.P4HeaderStack header_stack = 8;
    case kHeaderStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.header_stack_);
      break;
    }
    // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
    case kHeaderUnionStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.header_union_stack_);
      break;
    }
    // string enum = 10;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_());
      break;
    }
    // string error = 11;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // bytes enum_value = 12;
    case kEnumValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4Data::GetClassData() const { return &_class_data_; }

void P4Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4Data *>(to)->MergeFrom(
      static_cast<const P4Data &>(from));
}


void P4Data::MergeFrom(const P4Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kBitstring: {
      _internal_set_bitstring(from._internal_bitstring());
      break;
    }
    case kVarbit: {
      _internal_mutable_varbit()->::p4::v1::P4Varbit::MergeFrom(from._internal_varbit());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::p4::v1::P4StructLike::MergeFrom(from._internal_tuple());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::p4::v1::P4StructLike::MergeFrom(from._internal_struct_());
      break;
    }
    case kHeader: {
      _internal_mutable_header()->::p4::v1::P4Header::MergeFrom(from._internal_header());
      break;
    }
    case kHeaderUnion: {
      _internal_mutable_header_union()->::p4::v1::P4HeaderUnion::MergeFrom(from._internal_header_union());
      break;
    }
    case kHeaderStack: {
      _internal_mutable_header_stack()->::p4::v1::P4HeaderStack::MergeFrom(from._internal_header_stack());
      break;
    }
    case kHeaderUnionStack: {
      _internal_mutable_header_union_stack()->::p4::v1::P4HeaderUnionStack::MergeFrom(from._internal_header_union_stack());
      break;
    }
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kEnumValue: {
      _internal_set_enum_value(from._internal_enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4Data::CopyFrom(const P4Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Data::IsInitialized() const {
  return true;
}

void P4Data::InternalSwap(P4Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[0]);
}

// ===================================================================

class P4Varbit::_Internal {
 public:
};

P4Varbit::P4Varbit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4Varbit)
}
P4Varbit::P4Varbit(const P4Varbit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bitstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bitstring().empty()) {
    bitstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bitstring(), 
      GetArenaForAllocation());
  }
  bitwidth_ = from.bitwidth_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Varbit)
}

void P4Varbit::SharedCtor() {
bitstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bitwidth_ = 0;
}

P4Varbit::~P4Varbit() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Varbit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4Varbit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bitstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P4Varbit::ArenaDtor(void* object) {
  P4Varbit* _this = reinterpret_cast< P4Varbit* >(object);
  (void)_this;
}
void P4Varbit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4Varbit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4Varbit::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Varbit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitstring_.ClearToEmpty();
  bitwidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4Varbit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bitstring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bitstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bitwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4Varbit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Varbit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bitstring = 1;
  if (!this->_internal_bitstring().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bitstring(), target);
  }

  // int32 bitwidth = 2;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bitwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Varbit)
  return target;
}

size_t P4Varbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Varbit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bitstring = 1;
  if (!this->_internal_bitstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bitstring());
  }

  // int32 bitwidth = 2;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4Varbit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4Varbit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4Varbit::GetClassData() const { return &_class_data_; }

void P4Varbit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4Varbit *>(to)->MergeFrom(
      static_cast<const P4Varbit &>(from));
}


void P4Varbit::MergeFrom(const P4Varbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Varbit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bitstring().empty()) {
    _internal_set_bitstring(from._internal_bitstring());
  }
  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4Varbit::CopyFrom(const P4Varbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Varbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Varbit::IsInitialized() const {
  return true;
}

void P4Varbit::InternalSwap(P4Varbit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bitstring_, lhs_arena,
      &other->bitstring_, rhs_arena
  );
  swap(bitwidth_, other->bitwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4Varbit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[1]);
}

// ===================================================================

class P4StructLike::_Internal {
 public:
};

P4StructLike::P4StructLike(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4StructLike)
}
P4StructLike::P4StructLike(const P4StructLike& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4StructLike)
}

void P4StructLike::SharedCtor() {
}

P4StructLike::~P4StructLike() {
  // @@protoc_insertion_point(destructor:p4.v1.P4StructLike)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4StructLike::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4StructLike::ArenaDtor(void* object) {
  P4StructLike* _this = reinterpret_cast< P4StructLike* >(object);
  (void)_this;
}
void P4StructLike::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4StructLike::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4StructLike::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4StructLike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4StructLike::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.P4Data members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4StructLike::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4StructLike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.P4Data members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4StructLike)
  return target;
}

size_t P4StructLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4StructLike)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.P4Data members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4StructLike::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4StructLike::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4StructLike::GetClassData() const { return &_class_data_; }

void P4StructLike::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4StructLike *>(to)->MergeFrom(
      static_cast<const P4StructLike &>(from));
}


void P4StructLike::MergeFrom(const P4StructLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4StructLike)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4StructLike::CopyFrom(const P4StructLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4StructLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4StructLike::IsInitialized() const {
  return true;
}

void P4StructLike::InternalSwap(P4StructLike* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4StructLike::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[2]);
}

// ===================================================================

class P4Header::_Internal {
 public:
};

P4Header::P4Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bitstrings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4Header)
}
P4Header::P4Header(const P4Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bitstrings_(from.bitstrings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Header)
}

void P4Header::SharedCtor() {
is_valid_ = false;
}

P4Header::~P4Header() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4Header::ArenaDtor(void* object) {
  P4Header* _this = reinterpret_cast< P4Header* >(object);
  (void)_this;
}
void P4Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4Header::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitstrings_.Clear();
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bitstrings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bitstrings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_valid(), target);
  }

  // repeated bytes bitstrings = 2;
  for (int i = 0, n = this->_internal_bitstrings_size(); i < n; i++) {
    const auto& s = this->_internal_bitstrings(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Header)
  return target;
}

size_t P4Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bitstrings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bitstrings_.size());
  for (int i = 0, n = bitstrings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bitstrings_.Get(i));
  }

  // bool is_valid = 1;
  if (this->_internal_is_valid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4Header::GetClassData() const { return &_class_data_; }

void P4Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4Header *>(to)->MergeFrom(
      static_cast<const P4Header &>(from));
}


void P4Header::MergeFrom(const P4Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitstrings_.MergeFrom(from.bitstrings_);
  if (from._internal_is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4Header::CopyFrom(const P4Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Header::IsInitialized() const {
  return true;
}

void P4Header::InternalSwap(P4Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bitstrings_.InternalSwap(&other->bitstrings_);
  swap(is_valid_, other->is_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[3]);
}

// ===================================================================

class P4HeaderUnion::_Internal {
 public:
  static const ::p4::v1::P4Header& valid_header(const P4HeaderUnion* msg);
};

const ::p4::v1::P4Header&
P4HeaderUnion::_Internal::valid_header(const P4HeaderUnion* msg) {
  return *msg->valid_header_;
}
P4HeaderUnion::P4HeaderUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4HeaderUnion)
}
P4HeaderUnion::P4HeaderUnion(const P4HeaderUnion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valid_header_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valid_header_name().empty()) {
    valid_header_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valid_header_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_valid_header()) {
    valid_header_ = new ::p4::v1::P4Header(*from.valid_header_);
  } else {
    valid_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderUnion)
}

void P4HeaderUnion::SharedCtor() {
valid_header_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
valid_header_ = nullptr;
}

P4HeaderUnion::~P4HeaderUnion() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderUnion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderUnion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valid_header_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete valid_header_;
}

void P4HeaderUnion::ArenaDtor(void* object) {
  P4HeaderUnion* _this = reinterpret_cast< P4HeaderUnion* >(object);
  (void)_this;
}
void P4HeaderUnion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderUnion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderUnion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_header_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && valid_header_ != nullptr) {
    delete valid_header_;
  }
  valid_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderUnion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string valid_header_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_valid_header_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.P4HeaderUnion.valid_header_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4Header valid_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderUnion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderUnion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string valid_header_name = 1;
  if (!this->_internal_valid_header_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_header_name().data(), static_cast<int>(this->_internal_valid_header_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4HeaderUnion.valid_header_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valid_header_name(), target);
  }

  // .p4.v1.P4Header valid_header = 2;
  if (this->_internal_has_valid_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::valid_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderUnion)
  return target;
}

size_t P4HeaderUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderUnion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string valid_header_name = 1;
  if (!this->_internal_valid_header_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_header_name());
  }

  // .p4.v1.P4Header valid_header = 2;
  if (this->_internal_has_valid_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valid_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderUnion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderUnion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderUnion::GetClassData() const { return &_class_data_; }

void P4HeaderUnion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderUnion *>(to)->MergeFrom(
      static_cast<const P4HeaderUnion &>(from));
}


void P4HeaderUnion::MergeFrom(const P4HeaderUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderUnion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valid_header_name().empty()) {
    _internal_set_valid_header_name(from._internal_valid_header_name());
  }
  if (from._internal_has_valid_header()) {
    _internal_mutable_valid_header()->::p4::v1::P4Header::MergeFrom(from._internal_valid_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderUnion::CopyFrom(const P4HeaderUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnion::IsInitialized() const {
  return true;
}

void P4HeaderUnion::InternalSwap(P4HeaderUnion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valid_header_name_, lhs_arena,
      &other->valid_header_name_, rhs_arena
  );
  swap(valid_header_, other->valid_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderUnion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[4]);
}

// ===================================================================

class P4HeaderStack::_Internal {
 public:
};

P4HeaderStack::P4HeaderStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4HeaderStack)
}
P4HeaderStack::P4HeaderStack(const P4HeaderStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderStack)
}

void P4HeaderStack::SharedCtor() {
}

P4HeaderStack::~P4HeaderStack() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderStack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderStack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4HeaderStack::ArenaDtor(void* object) {
  P4HeaderStack* _this = reinterpret_cast< P4HeaderStack* >(object);
  (void)_this;
}
void P4HeaderStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderStack::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.P4Header entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.P4Header entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderStack)
  return target;
}

size_t P4HeaderStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.P4Header entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderStack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderStack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderStack::GetClassData() const { return &_class_data_; }

void P4HeaderStack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderStack *>(to)->MergeFrom(
      static_cast<const P4HeaderStack &>(from));
}


void P4HeaderStack::MergeFrom(const P4HeaderStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderStack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderStack::CopyFrom(const P4HeaderStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderStack::IsInitialized() const {
  return true;
}

void P4HeaderStack::InternalSwap(P4HeaderStack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderStack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[5]);
}

// ===================================================================

class P4HeaderUnionStack::_Internal {
 public:
};

P4HeaderUnionStack::P4HeaderUnionStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.P4HeaderUnionStack)
}
P4HeaderUnionStack::P4HeaderUnionStack(const P4HeaderUnionStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderUnionStack)
}

void P4HeaderUnionStack::SharedCtor() {
}

P4HeaderUnionStack::~P4HeaderUnionStack() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderUnionStack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderUnionStack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4HeaderUnionStack::ArenaDtor(void* object) {
  P4HeaderUnionStack* _this = reinterpret_cast< P4HeaderUnionStack* >(object);
  (void)_this;
}
void P4HeaderUnionStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderUnionStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderUnionStack::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderUnionStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderUnionStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.P4HeaderUnion entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderUnionStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderUnionStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.P4HeaderUnion entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderUnionStack)
  return target;
}

size_t P4HeaderUnionStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderUnionStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.P4HeaderUnion entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderUnionStack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderUnionStack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderUnionStack::GetClassData() const { return &_class_data_; }

void P4HeaderUnionStack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderUnionStack *>(to)->MergeFrom(
      static_cast<const P4HeaderUnionStack &>(from));
}


void P4HeaderUnionStack::MergeFrom(const P4HeaderUnionStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderUnionStack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderUnionStack::CopyFrom(const P4HeaderUnionStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderUnionStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnionStack::IsInitialized() const {
  return true;
}

void P4HeaderUnionStack::InternalSwap(P4HeaderUnionStack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderUnionStack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4data_2eproto_getter, &descriptor_table_p4_2fv1_2fp4data_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4data_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p4::v1::P4Data* Arena::CreateMaybeMessage< ::p4::v1::P4Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4Data >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4Varbit* Arena::CreateMaybeMessage< ::p4::v1::P4Varbit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4Varbit >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4StructLike* Arena::CreateMaybeMessage< ::p4::v1::P4StructLike >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4StructLike >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4Header* Arena::CreateMaybeMessage< ::p4::v1::P4Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4Header >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4HeaderUnion* Arena::CreateMaybeMessage< ::p4::v1::P4HeaderUnion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4HeaderUnion >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4HeaderStack* Arena::CreateMaybeMessage< ::p4::v1::P4HeaderStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4HeaderStack >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::P4HeaderUnionStack* Arena::CreateMaybeMessage< ::p4::v1::P4HeaderUnionStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::P4HeaderUnionStack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
