// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4runtime.proto

#include "p4/v1/p4runtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace p4 {
namespace v1 {
constexpr WriteRequest::WriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_()
  , election_id_(nullptr)
  , device_id_(uint64_t{0u})
  , role_id_(uint64_t{0u})
  , atomicity_(0)
{}
struct WriteRequestDefaultTypeInternal {
  constexpr WriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteRequestDefaultTypeInternal() {}
  union {
    WriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
constexpr WriteResponse::WriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteResponseDefaultTypeInternal {
  constexpr WriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteResponseDefaultTypeInternal() {}
  union {
    WriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
constexpr ReadRequest::ReadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_()
  , device_id_(uint64_t{0u}){}
struct ReadRequestDefaultTypeInternal {
  constexpr ReadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRequestDefaultTypeInternal() {}
  union {
    ReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
constexpr ReadResponse::ReadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_(){}
struct ReadResponseDefaultTypeInternal {
  constexpr ReadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadResponseDefaultTypeInternal() {}
  union {
    ReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
constexpr Update::Update(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(nullptr)
  , type_(0)
{}
struct UpdateDefaultTypeInternal {
  constexpr UpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDefaultTypeInternal() {}
  union {
    Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDefaultTypeInternal _Update_default_instance_;
constexpr Entity::Entity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EntityDefaultTypeInternal {
  constexpr EntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EntityDefaultTypeInternal _Entity_default_instance_;
constexpr RuntimeReconfigEntry::RuntimeReconfigEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_reconfig_content_(nullptr)
  , runtime_reconfig_type_(0)
{}
struct RuntimeReconfigEntryDefaultTypeInternal {
  constexpr RuntimeReconfigEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeReconfigEntryDefaultTypeInternal() {}
  union {
    RuntimeReconfigEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeReconfigEntryDefaultTypeInternal _RuntimeReconfigEntry_default_instance_;
constexpr RuntimeReconfigContent::RuntimeReconfigContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RuntimeReconfigContentDefaultTypeInternal {
  constexpr RuntimeReconfigContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeReconfigContentDefaultTypeInternal() {}
  union {
    RuntimeReconfigContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeReconfigContentDefaultTypeInternal _RuntimeReconfigContent_default_instance_;
constexpr InitP4ObjectsNewEntry::InitP4ObjectsNewEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p4objects_new_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitP4ObjectsNewEntryDefaultTypeInternal {
  constexpr InitP4ObjectsNewEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitP4ObjectsNewEntryDefaultTypeInternal() {}
  union {
    InitP4ObjectsNewEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitP4ObjectsNewEntryDefaultTypeInternal _InitP4ObjectsNewEntry_default_instance_;
constexpr InsertTableEntry::InsertTableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertTableEntryDefaultTypeInternal {
  constexpr InsertTableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertTableEntryDefaultTypeInternal() {}
  union {
    InsertTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertTableEntryDefaultTypeInternal _InsertTableEntry_default_instance_;
constexpr ChangeTableEntry::ChangeTableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edge_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_next_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChangeTableEntryDefaultTypeInternal {
  constexpr ChangeTableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeTableEntryDefaultTypeInternal() {}
  union {
    ChangeTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeTableEntryDefaultTypeInternal _ChangeTableEntry_default_instance_;
constexpr DeleteTableEntry::DeleteTableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTableEntryDefaultTypeInternal {
  constexpr DeleteTableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTableEntryDefaultTypeInternal() {}
  union {
    DeleteTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTableEntryDefaultTypeInternal _DeleteTableEntry_default_instance_;
constexpr InsertConditionalEntry::InsertConditionalEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertConditionalEntryDefaultTypeInternal {
  constexpr InsertConditionalEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertConditionalEntryDefaultTypeInternal() {}
  union {
    InsertConditionalEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertConditionalEntryDefaultTypeInternal _InsertConditionalEntry_default_instance_;
constexpr ChangeConditionalEntry::ChangeConditionalEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , true_or_false_next_(false){}
struct ChangeConditionalEntryDefaultTypeInternal {
  constexpr ChangeConditionalEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeConditionalEntryDefaultTypeInternal() {}
  union {
    ChangeConditionalEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeConditionalEntryDefaultTypeInternal _ChangeConditionalEntry_default_instance_;
constexpr DeleteConditionalEntry::DeleteConditionalEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteConditionalEntryDefaultTypeInternal {
  constexpr DeleteConditionalEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteConditionalEntryDefaultTypeInternal() {}
  union {
    DeleteConditionalEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteConditionalEntryDefaultTypeInternal _DeleteConditionalEntry_default_instance_;
constexpr InsertFlexEntry::InsertFlexEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , true_next_node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , false_next_node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertFlexEntryDefaultTypeInternal {
  constexpr InsertFlexEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertFlexEntryDefaultTypeInternal() {}
  union {
    InsertFlexEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertFlexEntryDefaultTypeInternal _InsertFlexEntry_default_instance_;
constexpr ChangeFlexEntry::ChangeFlexEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flx_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_next_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , true_or_false_next_(false){}
struct ChangeFlexEntryDefaultTypeInternal {
  constexpr ChangeFlexEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeFlexEntryDefaultTypeInternal() {}
  union {
    ChangeFlexEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeFlexEntryDefaultTypeInternal _ChangeFlexEntry_default_instance_;
constexpr DeleteFlexEntry::DeleteFlexEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flx_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteFlexEntryDefaultTypeInternal {
  constexpr DeleteFlexEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteFlexEntryDefaultTypeInternal() {}
  union {
    DeleteFlexEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteFlexEntryDefaultTypeInternal _DeleteFlexEntry_default_instance_;
constexpr InsertRegisterArrayEntry::InsertRegisterArrayEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : register_array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , register_array_size_(0u)
  , register_array_bitwidth_(0u){}
struct InsertRegisterArrayEntryDefaultTypeInternal {
  constexpr InsertRegisterArrayEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRegisterArrayEntryDefaultTypeInternal() {}
  union {
    InsertRegisterArrayEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRegisterArrayEntryDefaultTypeInternal _InsertRegisterArrayEntry_default_instance_;
constexpr ChangeRegisterArrayEntry::ChangeRegisterArrayEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : register_array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , register_array_change_type_(0)

  , new_value_(0u){}
struct ChangeRegisterArrayEntryDefaultTypeInternal {
  constexpr ChangeRegisterArrayEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeRegisterArrayEntryDefaultTypeInternal() {}
  union {
    ChangeRegisterArrayEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeRegisterArrayEntryDefaultTypeInternal _ChangeRegisterArrayEntry_default_instance_;
constexpr DeleteRegisterArrayEntry::DeleteRegisterArrayEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : register_array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRegisterArrayEntryDefaultTypeInternal {
  constexpr DeleteRegisterArrayEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRegisterArrayEntryDefaultTypeInternal() {}
  union {
    DeleteRegisterArrayEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRegisterArrayEntryDefaultTypeInternal _DeleteRegisterArrayEntry_default_instance_;
constexpr TriggerEntry::TriggerEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : on_or_off_(false){}
struct TriggerEntryDefaultTypeInternal {
  constexpr TriggerEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TriggerEntryDefaultTypeInternal() {}
  union {
    TriggerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TriggerEntryDefaultTypeInternal _TriggerEntry_default_instance_;
constexpr ChangeInitEntry::ChangeInitEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_next_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChangeInitEntryDefaultTypeInternal {
  constexpr ChangeInitEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeInitEntryDefaultTypeInternal() {}
  union {
    ChangeInitEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeInitEntryDefaultTypeInternal _ChangeInitEntry_default_instance_;
constexpr ExternEntry::ExternEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(nullptr)
  , extern_type_id_(0u)
  , extern_id_(0u){}
struct ExternEntryDefaultTypeInternal {
  constexpr ExternEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternEntryDefaultTypeInternal() {}
  union {
    ExternEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternEntryDefaultTypeInternal _ExternEntry_default_instance_;
constexpr TableEntry_IdleTimeout::TableEntry_IdleTimeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elapsed_ns_(int64_t{0}){}
struct TableEntry_IdleTimeoutDefaultTypeInternal {
  constexpr TableEntry_IdleTimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableEntry_IdleTimeoutDefaultTypeInternal() {}
  union {
    TableEntry_IdleTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableEntry_IdleTimeoutDefaultTypeInternal _TableEntry_IdleTimeout_default_instance_;
constexpr TableEntry::TableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_()
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(nullptr)
  , meter_config_(nullptr)
  , counter_data_(nullptr)
  , time_since_last_hit_(nullptr)
  , table_id_(0u)
  , priority_(0)
  , controller_metadata_(uint64_t{0u})
  , idle_timeout_ns_(int64_t{0})
  , is_default_action_(false){}
struct TableEntryDefaultTypeInternal {
  constexpr TableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableEntryDefaultTypeInternal() {}
  union {
    TableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableEntryDefaultTypeInternal _TableEntry_default_instance_;
constexpr FieldMatch_Exact::FieldMatch_Exact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldMatch_ExactDefaultTypeInternal {
  constexpr FieldMatch_ExactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatch_ExactDefaultTypeInternal() {}
  union {
    FieldMatch_Exact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatch_ExactDefaultTypeInternal _FieldMatch_Exact_default_instance_;
constexpr FieldMatch_Ternary::FieldMatch_Ternary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldMatch_TernaryDefaultTypeInternal {
  constexpr FieldMatch_TernaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatch_TernaryDefaultTypeInternal() {}
  union {
    FieldMatch_Ternary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatch_TernaryDefaultTypeInternal _FieldMatch_Ternary_default_instance_;
constexpr FieldMatch_LPM::FieldMatch_LPM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_len_(0){}
struct FieldMatch_LPMDefaultTypeInternal {
  constexpr FieldMatch_LPMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatch_LPMDefaultTypeInternal() {}
  union {
    FieldMatch_LPM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatch_LPMDefaultTypeInternal _FieldMatch_LPM_default_instance_;
constexpr FieldMatch_Range::FieldMatch_Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : low_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , high_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldMatch_RangeDefaultTypeInternal {
  constexpr FieldMatch_RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatch_RangeDefaultTypeInternal() {}
  union {
    FieldMatch_Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatch_RangeDefaultTypeInternal _FieldMatch_Range_default_instance_;
constexpr FieldMatch_Optional::FieldMatch_Optional(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldMatch_OptionalDefaultTypeInternal {
  constexpr FieldMatch_OptionalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatch_OptionalDefaultTypeInternal() {}
  union {
    FieldMatch_Optional _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatch_OptionalDefaultTypeInternal _FieldMatch_Optional_default_instance_;
constexpr FieldMatch::FieldMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_id_(0u)
  , _oneof_case_{}{}
struct FieldMatchDefaultTypeInternal {
  constexpr FieldMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldMatchDefaultTypeInternal() {}
  union {
    FieldMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldMatchDefaultTypeInternal _FieldMatch_default_instance_;
constexpr TableAction::TableAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TableActionDefaultTypeInternal {
  constexpr TableActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableActionDefaultTypeInternal() {}
  union {
    TableAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableActionDefaultTypeInternal _TableAction_default_instance_;
constexpr Action_Param::Action_Param(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_id_(0u){}
struct Action_ParamDefaultTypeInternal {
  constexpr Action_ParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_ParamDefaultTypeInternal() {}
  union {
    Action_Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_ParamDefaultTypeInternal _Action_Param_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , action_id_(0u){}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr ActionProfileActionSet::ActionProfileActionSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_profile_actions_(){}
struct ActionProfileActionSetDefaultTypeInternal {
  constexpr ActionProfileActionSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileActionSetDefaultTypeInternal() {}
  union {
    ActionProfileActionSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileActionSetDefaultTypeInternal _ActionProfileActionSet_default_instance_;
constexpr ActionProfileAction::ActionProfileAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(nullptr)
  , weight_(0)
  , _oneof_case_{}{}
struct ActionProfileActionDefaultTypeInternal {
  constexpr ActionProfileActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileActionDefaultTypeInternal() {}
  union {
    ActionProfileAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileActionDefaultTypeInternal _ActionProfileAction_default_instance_;
constexpr ActionProfileMember::ActionProfileMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(nullptr)
  , action_profile_id_(0u)
  , member_id_(0u){}
struct ActionProfileMemberDefaultTypeInternal {
  constexpr ActionProfileMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileMemberDefaultTypeInternal() {}
  union {
    ActionProfileMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileMemberDefaultTypeInternal _ActionProfileMember_default_instance_;
constexpr ActionProfileGroup_Member::ActionProfileGroup_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_(0u)
  , weight_(0)
  , _oneof_case_{}{}
struct ActionProfileGroup_MemberDefaultTypeInternal {
  constexpr ActionProfileGroup_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileGroup_MemberDefaultTypeInternal() {}
  union {
    ActionProfileGroup_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileGroup_MemberDefaultTypeInternal _ActionProfileGroup_Member_default_instance_;
constexpr ActionProfileGroup::ActionProfileGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , action_profile_id_(0u)
  , group_id_(0u)
  , max_size_(0){}
struct ActionProfileGroupDefaultTypeInternal {
  constexpr ActionProfileGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileGroupDefaultTypeInternal() {}
  union {
    ActionProfileGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileGroupDefaultTypeInternal _ActionProfileGroup_default_instance_;
constexpr Index::Index(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(int64_t{0}){}
struct IndexDefaultTypeInternal {
  constexpr IndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexDefaultTypeInternal _Index_default_instance_;
constexpr MeterEntry::MeterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(nullptr)
  , config_(nullptr)
  , meter_id_(0u){}
struct MeterEntryDefaultTypeInternal {
  constexpr MeterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterEntryDefaultTypeInternal() {}
  union {
    MeterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterEntryDefaultTypeInternal _MeterEntry_default_instance_;
constexpr DirectMeterEntry::DirectMeterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_entry_(nullptr)
  , config_(nullptr){}
struct DirectMeterEntryDefaultTypeInternal {
  constexpr DirectMeterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectMeterEntryDefaultTypeInternal() {}
  union {
    DirectMeterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectMeterEntryDefaultTypeInternal _DirectMeterEntry_default_instance_;
constexpr MeterConfig::MeterConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cir_(int64_t{0})
  , cburst_(int64_t{0})
  , pir_(int64_t{0})
  , pburst_(int64_t{0}){}
struct MeterConfigDefaultTypeInternal {
  constexpr MeterConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterConfigDefaultTypeInternal() {}
  union {
    MeterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterConfigDefaultTypeInternal _MeterConfig_default_instance_;
constexpr CounterEntry::CounterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(nullptr)
  , data_(nullptr)
  , counter_id_(0u){}
struct CounterEntryDefaultTypeInternal {
  constexpr CounterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CounterEntryDefaultTypeInternal() {}
  union {
    CounterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CounterEntryDefaultTypeInternal _CounterEntry_default_instance_;
constexpr DirectCounterEntry::DirectCounterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_entry_(nullptr)
  , data_(nullptr){}
struct DirectCounterEntryDefaultTypeInternal {
  constexpr DirectCounterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectCounterEntryDefaultTypeInternal() {}
  union {
    DirectCounterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectCounterEntryDefaultTypeInternal _DirectCounterEntry_default_instance_;
constexpr CounterData::CounterData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : byte_count_(int64_t{0})
  , packet_count_(int64_t{0}){}
struct CounterDataDefaultTypeInternal {
  constexpr CounterDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CounterDataDefaultTypeInternal() {}
  union {
    CounterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CounterDataDefaultTypeInternal _CounterData_default_instance_;
constexpr PacketReplicationEngineEntry::PacketReplicationEngineEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PacketReplicationEngineEntryDefaultTypeInternal {
  constexpr PacketReplicationEngineEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketReplicationEngineEntryDefaultTypeInternal() {}
  union {
    PacketReplicationEngineEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketReplicationEngineEntryDefaultTypeInternal _PacketReplicationEngineEntry_default_instance_;
constexpr Replica::Replica(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : egress_port_(0u)
  , instance_(0u){}
struct ReplicaDefaultTypeInternal {
  constexpr ReplicaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplicaDefaultTypeInternal() {}
  union {
    Replica _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplicaDefaultTypeInternal _Replica_default_instance_;
constexpr MulticastGroupEntry::MulticastGroupEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replicas_()
  , multicast_group_id_(0u){}
struct MulticastGroupEntryDefaultTypeInternal {
  constexpr MulticastGroupEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MulticastGroupEntryDefaultTypeInternal() {}
  union {
    MulticastGroupEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MulticastGroupEntryDefaultTypeInternal _MulticastGroupEntry_default_instance_;
constexpr CloneSessionEntry::CloneSessionEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replicas_()
  , session_id_(0u)
  , class_of_service_(0u)
  , packet_length_bytes_(0){}
struct CloneSessionEntryDefaultTypeInternal {
  constexpr CloneSessionEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloneSessionEntryDefaultTypeInternal() {}
  union {
    CloneSessionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloneSessionEntryDefaultTypeInternal _CloneSessionEntry_default_instance_;
constexpr ValueSetMember::ValueSetMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_(){}
struct ValueSetMemberDefaultTypeInternal {
  constexpr ValueSetMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueSetMemberDefaultTypeInternal() {}
  union {
    ValueSetMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueSetMemberDefaultTypeInternal _ValueSetMember_default_instance_;
constexpr ValueSetEntry::ValueSetEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , value_set_id_(0u){}
struct ValueSetEntryDefaultTypeInternal {
  constexpr ValueSetEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueSetEntryDefaultTypeInternal() {}
  union {
    ValueSetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueSetEntryDefaultTypeInternal _ValueSetEntry_default_instance_;
constexpr RegisterEntry::RegisterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(nullptr)
  , data_(nullptr)
  , register_id_(0u){}
struct RegisterEntryDefaultTypeInternal {
  constexpr RegisterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterEntryDefaultTypeInternal() {}
  union {
    RegisterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterEntryDefaultTypeInternal _RegisterEntry_default_instance_;
constexpr DigestEntry_Config::DigestEntry_Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_timeout_ns_(int64_t{0})
  , ack_timeout_ns_(int64_t{0})
  , max_list_size_(0){}
struct DigestEntry_ConfigDefaultTypeInternal {
  constexpr DigestEntry_ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestEntry_ConfigDefaultTypeInternal() {}
  union {
    DigestEntry_Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestEntry_ConfigDefaultTypeInternal _DigestEntry_Config_default_instance_;
constexpr DigestEntry::DigestEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , digest_id_(0u){}
struct DigestEntryDefaultTypeInternal {
  constexpr DigestEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestEntryDefaultTypeInternal() {}
  union {
    DigestEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestEntryDefaultTypeInternal _DigestEntry_default_instance_;
constexpr StreamMessageRequest::StreamMessageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamMessageRequestDefaultTypeInternal {
  constexpr StreamMessageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessageRequestDefaultTypeInternal() {}
  union {
    StreamMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessageRequestDefaultTypeInternal _StreamMessageRequest_default_instance_;
constexpr PacketOut::PacketOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_()
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PacketOutDefaultTypeInternal {
  constexpr PacketOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketOutDefaultTypeInternal() {}
  union {
    PacketOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketOutDefaultTypeInternal _PacketOut_default_instance_;
constexpr DigestListAck::DigestListAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_id_(uint64_t{0u})
  , digest_id_(0u){}
struct DigestListAckDefaultTypeInternal {
  constexpr DigestListAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestListAckDefaultTypeInternal() {}
  union {
    DigestListAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestListAckDefaultTypeInternal _DigestListAck_default_instance_;
constexpr StreamMessageResponse::StreamMessageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamMessageResponseDefaultTypeInternal {
  constexpr StreamMessageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessageResponseDefaultTypeInternal() {}
  union {
    StreamMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessageResponseDefaultTypeInternal _StreamMessageResponse_default_instance_;
constexpr PacketIn::PacketIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_()
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PacketInDefaultTypeInternal {
  constexpr PacketInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketInDefaultTypeInternal() {}
  union {
    PacketIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketInDefaultTypeInternal _PacketIn_default_instance_;
constexpr DigestList::DigestList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , list_id_(uint64_t{0u})
  , timestamp_(int64_t{0})
  , digest_id_(0u){}
struct DigestListDefaultTypeInternal {
  constexpr DigestListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestListDefaultTypeInternal() {}
  union {
    DigestList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestListDefaultTypeInternal _DigestList_default_instance_;
constexpr PacketMetadata::PacketMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_id_(0u){}
struct PacketMetadataDefaultTypeInternal {
  constexpr PacketMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketMetadataDefaultTypeInternal() {}
  union {
    PacketMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketMetadataDefaultTypeInternal _PacketMetadata_default_instance_;
constexpr MasterArbitrationUpdate::MasterArbitrationUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , election_id_(nullptr)
  , status_(nullptr)
  , device_id_(uint64_t{0u}){}
struct MasterArbitrationUpdateDefaultTypeInternal {
  constexpr MasterArbitrationUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MasterArbitrationUpdateDefaultTypeInternal() {}
  union {
    MasterArbitrationUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MasterArbitrationUpdateDefaultTypeInternal _MasterArbitrationUpdate_default_instance_;
constexpr Role::Role(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , id_(uint64_t{0u}){}
struct RoleDefaultTypeInternal {
  constexpr RoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleDefaultTypeInternal() {}
  union {
    Role _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleDefaultTypeInternal _Role_default_instance_;
constexpr IdleTimeoutNotification::IdleTimeoutNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_entry_()
  , timestamp_(int64_t{0}){}
struct IdleTimeoutNotificationDefaultTypeInternal {
  constexpr IdleTimeoutNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdleTimeoutNotificationDefaultTypeInternal() {}
  union {
    IdleTimeoutNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdleTimeoutNotificationDefaultTypeInternal _IdleTimeoutNotification_default_instance_;
constexpr StreamError::StreamError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , canonical_code_(0)
  , code_(0)
  , _oneof_case_{}{}
struct StreamErrorDefaultTypeInternal {
  constexpr StreamErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamErrorDefaultTypeInternal() {}
  union {
    StreamError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamErrorDefaultTypeInternal _StreamError_default_instance_;
constexpr PacketOutError::PacketOutError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packet_out_(nullptr){}
struct PacketOutErrorDefaultTypeInternal {
  constexpr PacketOutErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketOutErrorDefaultTypeInternal() {}
  union {
    PacketOutError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketOutErrorDefaultTypeInternal _PacketOutError_default_instance_;
constexpr DigestListAckError::DigestListAckError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_list_ack_(nullptr){}
struct DigestListAckErrorDefaultTypeInternal {
  constexpr DigestListAckErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestListAckErrorDefaultTypeInternal() {}
  union {
    DigestListAckError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestListAckErrorDefaultTypeInternal _DigestListAckError_default_instance_;
constexpr StreamOtherError::StreamOtherError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_(nullptr){}
struct StreamOtherErrorDefaultTypeInternal {
  constexpr StreamOtherErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamOtherErrorDefaultTypeInternal() {}
  union {
    StreamOtherError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamOtherErrorDefaultTypeInternal _StreamOtherError_default_instance_;
constexpr Uint128::Uint128(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_(uint64_t{0u})
  , low_(uint64_t{0u}){}
struct Uint128DefaultTypeInternal {
  constexpr Uint128DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Uint128DefaultTypeInternal() {}
  union {
    Uint128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Uint128DefaultTypeInternal _Uint128_default_instance_;
constexpr SetForwardingPipelineConfigRequest::SetForwardingPipelineConfigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : election_id_(nullptr)
  , config_(nullptr)
  , device_id_(uint64_t{0u})
  , role_id_(uint64_t{0u})
  , action_(0)
{}
struct SetForwardingPipelineConfigRequestDefaultTypeInternal {
  constexpr SetForwardingPipelineConfigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetForwardingPipelineConfigRequestDefaultTypeInternal() {}
  union {
    SetForwardingPipelineConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetForwardingPipelineConfigRequestDefaultTypeInternal _SetForwardingPipelineConfigRequest_default_instance_;
constexpr SetForwardingPipelineConfigResponse::SetForwardingPipelineConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetForwardingPipelineConfigResponseDefaultTypeInternal {
  constexpr SetForwardingPipelineConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetForwardingPipelineConfigResponseDefaultTypeInternal() {}
  union {
    SetForwardingPipelineConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetForwardingPipelineConfigResponseDefaultTypeInternal _SetForwardingPipelineConfigResponse_default_instance_;
constexpr ForwardingPipelineConfig_Cookie::ForwardingPipelineConfig_Cookie(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cookie_(uint64_t{0u}){}
struct ForwardingPipelineConfig_CookieDefaultTypeInternal {
  constexpr ForwardingPipelineConfig_CookieDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForwardingPipelineConfig_CookieDefaultTypeInternal() {}
  union {
    ForwardingPipelineConfig_Cookie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForwardingPipelineConfig_CookieDefaultTypeInternal _ForwardingPipelineConfig_Cookie_default_instance_;
constexpr ForwardingPipelineConfig::ForwardingPipelineConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p4_device_config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , p4info_(nullptr)
  , cookie_(nullptr){}
struct ForwardingPipelineConfigDefaultTypeInternal {
  constexpr ForwardingPipelineConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForwardingPipelineConfigDefaultTypeInternal() {}
  union {
    ForwardingPipelineConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForwardingPipelineConfigDefaultTypeInternal _ForwardingPipelineConfig_default_instance_;
constexpr GetForwardingPipelineConfigRequest::GetForwardingPipelineConfigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(uint64_t{0u})
  , response_type_(0)
{}
struct GetForwardingPipelineConfigRequestDefaultTypeInternal {
  constexpr GetForwardingPipelineConfigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetForwardingPipelineConfigRequestDefaultTypeInternal() {}
  union {
    GetForwardingPipelineConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetForwardingPipelineConfigRequestDefaultTypeInternal _GetForwardingPipelineConfigRequest_default_instance_;
constexpr GetForwardingPipelineConfigResponse::GetForwardingPipelineConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr){}
struct GetForwardingPipelineConfigResponseDefaultTypeInternal {
  constexpr GetForwardingPipelineConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetForwardingPipelineConfigResponseDefaultTypeInternal() {}
  union {
    GetForwardingPipelineConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetForwardingPipelineConfigResponseDefaultTypeInternal _GetForwardingPipelineConfigResponse_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , details_(nullptr)
  , canonical_code_(0)
  , code_(0){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr CapabilitiesRequest::CapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CapabilitiesRequestDefaultTypeInternal {
  constexpr CapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilitiesRequestDefaultTypeInternal() {}
  union {
    CapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilitiesRequestDefaultTypeInternal _CapabilitiesRequest_default_instance_;
constexpr CapabilitiesResponse::CapabilitiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p4runtime_api_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CapabilitiesResponseDefaultTypeInternal {
  constexpr CapabilitiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilitiesResponseDefaultTypeInternal() {}
  union {
    CapabilitiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilitiesResponseDefaultTypeInternal _CapabilitiesResponse_default_instance_;
}  // namespace v1
}  // namespace p4
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p4_2fv1_2fp4runtime_2eproto[80];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p4_2fv1_2fp4runtime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p4_2fv1_2fp4runtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, election_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, updates_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteRequest, atomicity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::WriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ReadRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ReadRequest, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ReadResponse, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Update, type_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Update, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Entity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::Entity, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigEntry, runtime_reconfig_type_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigEntry, runtime_reconfig_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigContent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigContent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::RuntimeReconfigContent, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InitP4ObjectsNewEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InitP4ObjectsNewEntry, p4objects_new_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertTableEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertTableEntry, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeTableEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeTableEntry, table_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeTableEntry, edge_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeTableEntry, table_name_next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteTableEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteTableEntry, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertConditionalEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertConditionalEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertConditionalEntry, branch_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeConditionalEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeConditionalEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeConditionalEntry, branch_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeConditionalEntry, true_or_false_next_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeConditionalEntry, node_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteConditionalEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteConditionalEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteConditionalEntry, branch_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertFlexEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertFlexEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertFlexEntry, node_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertFlexEntry, true_next_node_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertFlexEntry, false_next_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeFlexEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeFlexEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeFlexEntry, flx_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeFlexEntry, true_or_false_next_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeFlexEntry, node_next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteFlexEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteFlexEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteFlexEntry, flx_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertRegisterArrayEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertRegisterArrayEntry, register_array_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertRegisterArrayEntry, register_array_size_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::InsertRegisterArrayEntry, register_array_bitwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeRegisterArrayEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeRegisterArrayEntry, register_array_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeRegisterArrayEntry, register_array_change_type_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeRegisterArrayEntry, new_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteRegisterArrayEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DeleteRegisterArrayEntry, register_array_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TriggerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TriggerEntry, on_or_off_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeInitEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeInitEntry, pipeline_name_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ChangeInitEntry, table_name_next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ExternEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ExternEntry, extern_type_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ExternEntry, extern_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ExternEntry, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry_IdleTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry_IdleTimeout, elapsed_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, table_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, match_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, action_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, priority_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, controller_metadata_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, meter_config_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, counter_data_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, is_default_action_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, idle_timeout_ns_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, time_since_last_hit_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableEntry, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Exact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Exact, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Ternary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Ternary, value_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Ternary, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_LPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_LPM, value_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_LPM, prefix_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Range, low_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Range, high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch_Optional, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch, field_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::FieldMatch, field_match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::TableAction, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action_Param, param_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action_Param, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Action, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileActionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileActionSet, action_profile_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileAction, action_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileAction, weight_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileAction, watch_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileMember, action_profile_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileMember, member_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileMember, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup_Member, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup_Member, member_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup_Member, weight_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup_Member, watch_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup, action_profile_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup, group_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup, members_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ActionProfileGroup, max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Index, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterEntry, meter_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterEntry, index_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterEntry, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectMeterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectMeterEntry, table_entry_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectMeterEntry, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterConfig, cir_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterConfig, cburst_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterConfig, pir_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MeterConfig, pburst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterEntry, counter_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterEntry, index_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectCounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectCounterEntry, table_entry_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DirectCounterEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterData, byte_count_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CounterData, packet_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketReplicationEngineEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketReplicationEngineEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketReplicationEngineEntry, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Replica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Replica, egress_port_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Replica, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MulticastGroupEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MulticastGroupEntry, multicast_group_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MulticastGroupEntry, replicas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CloneSessionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CloneSessionEntry, session_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CloneSessionEntry, replicas_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CloneSessionEntry, class_of_service_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::CloneSessionEntry, packet_length_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ValueSetMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ValueSetMember, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ValueSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ValueSetEntry, value_set_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ValueSetEntry, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RegisterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::RegisterEntry, register_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::RegisterEntry, index_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::RegisterEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry_Config, max_timeout_ns_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry_Config, max_list_size_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry_Config, ack_timeout_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry, digest_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestEntry, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageRequest, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketOut, payload_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketOut, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestListAck, digest_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestListAck, list_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamMessageResponse, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketIn, payload_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketIn, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestList, digest_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestList, list_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestList, data_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestList, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketMetadata, metadata_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketMetadata, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MasterArbitrationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::MasterArbitrationUpdate, device_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MasterArbitrationUpdate, role_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MasterArbitrationUpdate, election_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::MasterArbitrationUpdate, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Role, id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Role, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::IdleTimeoutNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::IdleTimeoutNotification, table_entry_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::IdleTimeoutNotification, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, canonical_code_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, message_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, space_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, code_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamError, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketOutError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::PacketOutError, packet_out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestListAckError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::DigestListAckError, digest_list_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamOtherError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::StreamOtherError, other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Uint128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Uint128, high_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Uint128, low_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, election_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, action_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::SetForwardingPipelineConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig_Cookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig_Cookie, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig, p4info_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig, p4_device_config_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::ForwardingPipelineConfig, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::GetForwardingPipelineConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::GetForwardingPipelineConfigRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::GetForwardingPipelineConfigRequest, response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::GetForwardingPipelineConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::GetForwardingPipelineConfigResponse, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, canonical_code_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, message_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, space_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, code_),
  PROTOBUF_FIELD_OFFSET(::p4::v1::Error, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::v1::CapabilitiesResponse, p4runtime_api_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::p4::v1::WriteRequest)},
  { 11, -1, -1, sizeof(::p4::v1::WriteResponse)},
  { 17, -1, -1, sizeof(::p4::v1::ReadRequest)},
  { 25, -1, -1, sizeof(::p4::v1::ReadResponse)},
  { 32, -1, -1, sizeof(::p4::v1::Update)},
  { 40, -1, -1, sizeof(::p4::v1::Entity)},
  { 60, -1, -1, sizeof(::p4::v1::RuntimeReconfigEntry)},
  { 68, -1, -1, sizeof(::p4::v1::RuntimeReconfigContent)},
  { 90, -1, -1, sizeof(::p4::v1::InitP4ObjectsNewEntry)},
  { 97, -1, -1, sizeof(::p4::v1::InsertTableEntry)},
  { 105, -1, -1, sizeof(::p4::v1::ChangeTableEntry)},
  { 115, -1, -1, sizeof(::p4::v1::DeleteTableEntry)},
  { 123, -1, -1, sizeof(::p4::v1::InsertConditionalEntry)},
  { 131, -1, -1, sizeof(::p4::v1::ChangeConditionalEntry)},
  { 141, -1, -1, sizeof(::p4::v1::DeleteConditionalEntry)},
  { 149, -1, -1, sizeof(::p4::v1::InsertFlexEntry)},
  { 159, -1, -1, sizeof(::p4::v1::ChangeFlexEntry)},
  { 169, -1, -1, sizeof(::p4::v1::DeleteFlexEntry)},
  { 177, -1, -1, sizeof(::p4::v1::InsertRegisterArrayEntry)},
  { 186, -1, -1, sizeof(::p4::v1::ChangeRegisterArrayEntry)},
  { 195, -1, -1, sizeof(::p4::v1::DeleteRegisterArrayEntry)},
  { 202, -1, -1, sizeof(::p4::v1::TriggerEntry)},
  { 209, -1, -1, sizeof(::p4::v1::ChangeInitEntry)},
  { 217, -1, -1, sizeof(::p4::v1::ExternEntry)},
  { 226, -1, -1, sizeof(::p4::v1::TableEntry_IdleTimeout)},
  { 233, -1, -1, sizeof(::p4::v1::TableEntry)},
  { 250, -1, -1, sizeof(::p4::v1::FieldMatch_Exact)},
  { 257, -1, -1, sizeof(::p4::v1::FieldMatch_Ternary)},
  { 265, -1, -1, sizeof(::p4::v1::FieldMatch_LPM)},
  { 273, -1, -1, sizeof(::p4::v1::FieldMatch_Range)},
  { 281, -1, -1, sizeof(::p4::v1::FieldMatch_Optional)},
  { 288, -1, -1, sizeof(::p4::v1::FieldMatch)},
  { 302, -1, -1, sizeof(::p4::v1::TableAction)},
  { 313, -1, -1, sizeof(::p4::v1::Action_Param)},
  { 321, -1, -1, sizeof(::p4::v1::Action)},
  { 329, -1, -1, sizeof(::p4::v1::ActionProfileActionSet)},
  { 336, -1, -1, sizeof(::p4::v1::ActionProfileAction)},
  { 347, -1, -1, sizeof(::p4::v1::ActionProfileMember)},
  { 356, -1, -1, sizeof(::p4::v1::ActionProfileGroup_Member)},
  { 367, -1, -1, sizeof(::p4::v1::ActionProfileGroup)},
  { 377, -1, -1, sizeof(::p4::v1::Index)},
  { 384, -1, -1, sizeof(::p4::v1::MeterEntry)},
  { 393, -1, -1, sizeof(::p4::v1::DirectMeterEntry)},
  { 401, -1, -1, sizeof(::p4::v1::MeterConfig)},
  { 411, -1, -1, sizeof(::p4::v1::CounterEntry)},
  { 420, -1, -1, sizeof(::p4::v1::DirectCounterEntry)},
  { 428, -1, -1, sizeof(::p4::v1::CounterData)},
  { 436, -1, -1, sizeof(::p4::v1::PacketReplicationEngineEntry)},
  { 445, -1, -1, sizeof(::p4::v1::Replica)},
  { 453, -1, -1, sizeof(::p4::v1::MulticastGroupEntry)},
  { 461, -1, -1, sizeof(::p4::v1::CloneSessionEntry)},
  { 471, -1, -1, sizeof(::p4::v1::ValueSetMember)},
  { 478, -1, -1, sizeof(::p4::v1::ValueSetEntry)},
  { 486, -1, -1, sizeof(::p4::v1::RegisterEntry)},
  { 495, -1, -1, sizeof(::p4::v1::DigestEntry_Config)},
  { 504, -1, -1, sizeof(::p4::v1::DigestEntry)},
  { 512, -1, -1, sizeof(::p4::v1::StreamMessageRequest)},
  { 523, -1, -1, sizeof(::p4::v1::PacketOut)},
  { 531, -1, -1, sizeof(::p4::v1::DigestListAck)},
  { 539, -1, -1, sizeof(::p4::v1::StreamMessageResponse)},
  { 552, -1, -1, sizeof(::p4::v1::PacketIn)},
  { 560, -1, -1, sizeof(::p4::v1::DigestList)},
  { 570, -1, -1, sizeof(::p4::v1::PacketMetadata)},
  { 578, -1, -1, sizeof(::p4::v1::MasterArbitrationUpdate)},
  { 588, -1, -1, sizeof(::p4::v1::Role)},
  { 596, -1, -1, sizeof(::p4::v1::IdleTimeoutNotification)},
  { 604, -1, -1, sizeof(::p4::v1::StreamError)},
  { 618, -1, -1, sizeof(::p4::v1::PacketOutError)},
  { 625, -1, -1, sizeof(::p4::v1::DigestListAckError)},
  { 632, -1, -1, sizeof(::p4::v1::StreamOtherError)},
  { 639, -1, -1, sizeof(::p4::v1::Uint128)},
  { 647, -1, -1, sizeof(::p4::v1::SetForwardingPipelineConfigRequest)},
  { 658, -1, -1, sizeof(::p4::v1::SetForwardingPipelineConfigResponse)},
  { 664, -1, -1, sizeof(::p4::v1::ForwardingPipelineConfig_Cookie)},
  { 671, -1, -1, sizeof(::p4::v1::ForwardingPipelineConfig)},
  { 680, -1, -1, sizeof(::p4::v1::GetForwardingPipelineConfigRequest)},
  { 688, -1, -1, sizeof(::p4::v1::GetForwardingPipelineConfigResponse)},
  { 695, -1, -1, sizeof(::p4::v1::Error)},
  { 706, -1, -1, sizeof(::p4::v1::CapabilitiesRequest)},
  { 712, -1, -1, sizeof(::p4::v1::CapabilitiesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_WriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_WriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ReadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_RuntimeReconfigEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_RuntimeReconfigContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_InitP4ObjectsNewEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_InsertTableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ChangeTableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DeleteTableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_InsertConditionalEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ChangeConditionalEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DeleteConditionalEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_InsertFlexEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ChangeFlexEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DeleteFlexEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_InsertRegisterArrayEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ChangeRegisterArrayEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DeleteRegisterArrayEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_TriggerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ChangeInitEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ExternEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_TableEntry_IdleTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_TableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_Exact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_Ternary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_LPM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_Optional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_FieldMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_TableAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Action_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ActionProfileActionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ActionProfileAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ActionProfileMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ActionProfileGroup_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ActionProfileGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Index_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_MeterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DirectMeterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_MeterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_CounterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DirectCounterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_CounterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_PacketReplicationEngineEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Replica_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_MulticastGroupEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_CloneSessionEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ValueSetMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ValueSetEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_RegisterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DigestEntry_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DigestEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_StreamMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_PacketOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DigestListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_StreamMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_PacketIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DigestList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_PacketMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_MasterArbitrationUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_IdleTimeoutNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_StreamError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_PacketOutError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_DigestListAckError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_StreamOtherError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Uint128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_SetForwardingPipelineConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_SetForwardingPipelineConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ForwardingPipelineConfig_Cookie_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_ForwardingPipelineConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_GetForwardingPipelineConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_GetForwardingPipelineConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_CapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::v1::_CapabilitiesResponse_default_instance_),
};

const char descriptor_table_protodef_p4_2fv1_2fp4runtime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025p4/v1/p4runtime.proto\022\005p4.v1\032\031google/p"
  "rotobuf/any.proto\032\027google/rpc/status.pro"
  "to\032\031p4/config/v1/p4info.proto\032\022p4/v1/p4d"
  "ata.proto\"\372\001\n\014WriteRequest\022\021\n\tdevice_id\030"
  "\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022#\n\013election_id\030\003 "
  "\001(\0132\016.p4.v1.Uint128\022\036\n\007updates\030\004 \003(\0132\r.p"
  "4.v1.Update\0220\n\tatomicity\030\005 \001(\0162\035.p4.v1.W"
  "riteRequest.Atomicity\"O\n\tAtomicity\022\025\n\021CO"
  "NTINUE_ON_ERROR\020\000\022\025\n\021ROLLBACK_ON_ERROR\020\001"
  "\022\024\n\020DATAPLANE_ATOMIC\020\002\"\017\n\rWriteResponse\""
  "A\n\013ReadRequest\022\021\n\tdevice_id\030\001 \001(\004\022\037\n\010ent"
  "ities\030\002 \003(\0132\r.p4.v1.Entity\"/\n\014ReadRespon"
  "se\022\037\n\010entities\030\001 \003(\0132\r.p4.v1.Entity\"\234\001\n\006"
  "Update\022 \n\004type\030\001 \001(\0162\022.p4.v1.Update.Type"
  "\022\035\n\006entity\030\002 \001(\0132\r.p4.v1.Entity\"Q\n\004Type\022"
  "\017\n\013UNSPECIFIED\020\000\022\n\n\006INSERT\020\001\022\n\n\006MODIFY\020\002"
  "\022\n\n\006DELETE\020\003\022\024\n\020RUNTIME_RECONFIG\020\004\"\306\005\n\006E"
  "ntity\022*\n\014extern_entry\030\001 \001(\0132\022.p4.v1.Exte"
  "rnEntryH\000\022(\n\013table_entry\030\002 \001(\0132\021.p4.v1.T"
  "ableEntryH\000\022;\n\025action_profile_member\030\003 \001"
  "(\0132\032.p4.v1.ActionProfileMemberH\000\0229\n\024acti"
  "on_profile_group\030\004 \001(\0132\031.p4.v1.ActionPro"
  "fileGroupH\000\022(\n\013meter_entry\030\005 \001(\0132\021.p4.v1"
  ".MeterEntryH\000\0225\n\022direct_meter_entry\030\006 \001("
  "\0132\027.p4.v1.DirectMeterEntryH\000\022,\n\rcounter_"
  "entry\030\007 \001(\0132\023.p4.v1.CounterEntryH\000\0229\n\024di"
  "rect_counter_entry\030\010 \001(\0132\031.p4.v1.DirectC"
  "ounterEntryH\000\022N\n\037packet_replication_engi"
  "ne_entry\030\t \001(\0132#.p4.v1.PacketReplication"
  "EngineEntryH\000\022/\n\017value_set_entry\030\n \001(\0132\024"
  ".p4.v1.ValueSetEntryH\000\022.\n\016register_entry"
  "\030\013 \001(\0132\024.p4.v1.RegisterEntryH\000\022*\n\014digest"
  "_entry\030\014 \001(\0132\022.p4.v1.DigestEntryH\000\022=\n\026ru"
  "ntime_reconfig_entry\030\r \001(\0132\033.p4.v1.Runti"
  "meReconfigEntryH\000B\010\n\006entity\"\367\003\n\024RuntimeR"
  "econfigEntry\022N\n\025runtime_reconfig_type\030\001 "
  "\001(\0162/.p4.v1.RuntimeReconfigEntry.Runtime"
  "ReconfigType\022\?\n\030runtime_reconfig_content"
  "\030\002 \001(\0132\035.p4.v1.RuntimeReconfigContent\"\315\002"
  "\n\023RuntimeReconfigType\022\026\n\022INIT_P4OBJECTS_"
  "NEW\020\000\022\020\n\014INSERT_TABLE\020\001\022\020\n\014CHANGE_TABLE\020"
  "\002\022\020\n\014DELETE_TABLE\020\003\022\026\n\022INSERT_CONDITIONA"
  "L\020\004\022\026\n\022CHANGE_CONDITIONAL\020\005\022\026\n\022DELETE_CO"
  "NDITIONAL\020\006\022\017\n\013INSERT_FLEX\020\007\022\017\n\013CHANGE_F"
  "LEX\020\010\022\017\n\013DELETE_FLEX\020\t\022\031\n\025INSERT_REGISTE"
  "R_ARRAY\020\n\022\031\n\025CHANGE_REGISTER_ARRAY\020\013\022\031\n\025"
  "DELETE_REGISTER_ARRAY\020\014\022\013\n\007TRIGGER\020\r\022\017\n\013"
  "CHANGE_INIT\020\016\"\255\007\n\026RuntimeReconfigContent"
  "\022@\n\030init_p4objects_new_entry\030\001 \001(\0132\034.p4."
  "v1.InitP4ObjectsNewEntryH\000\0225\n\022insert_tab"
  "le_entry\030\002 \001(\0132\027.p4.v1.InsertTableEntryH"
  "\000\0225\n\022change_table_entry\030\003 \001(\0132\027.p4.v1.Ch"
  "angeTableEntryH\000\0225\n\022delete_table_entry\030\004"
  " \001(\0132\027.p4.v1.DeleteTableEntryH\000\022A\n\030inser"
  "t_conditional_entry\030\005 \001(\0132\035.p4.v1.Insert"
  "ConditionalEntryH\000\022A\n\030change_conditional"
  "_entry\030\006 \001(\0132\035.p4.v1.ChangeConditionalEn"
  "tryH\000\022A\n\030delete_conditional_entry\030\007 \001(\0132"
  "\035.p4.v1.DeleteConditionalEntryH\000\0223\n\021inse"
  "rt_flex_entry\030\010 \001(\0132\026.p4.v1.InsertFlexEn"
  "tryH\000\0223\n\021change_flex_entry\030\t \001(\0132\026.p4.v1"
  ".ChangeFlexEntryH\000\0223\n\021delete_flex_entry\030"
  "\n \001(\0132\026.p4.v1.DeleteFlexEntryH\000\022F\n\033inser"
  "t_register_array_entry\030\013 \001(\0132\037.p4.v1.Ins"
  "ertRegisterArrayEntryH\000\022F\n\033change_regist"
  "er_array_entry\030\014 \001(\0132\037.p4.v1.ChangeRegis"
  "terArrayEntryH\000\022F\n\033delete_register_array"
  "_entry\030\r \001(\0132\037.p4.v1.DeleteRegisterArray"
  "EntryH\000\022,\n\rtrigger_entry\030\016 \001(\0132\023.p4.v1.T"
  "riggerEntryH\000\0223\n\021change_init_entry\030\017 \001(\013"
  "2\026.p4.v1.ChangeInitEntryH\000B\t\n\007content\"3\n"
  "\025InitP4ObjectsNewEntry\022\032\n\022p4objects_new_"
  "json\030\001 \001(\014\"=\n\020InsertTableEntry\022\025\n\rpipeli"
  "ne_name\030\001 \001(\t\022\022\n\ntable_name\030\002 \001(\t\"i\n\020Cha"
  "ngeTableEntry\022\025\n\rpipeline_name\030\001 \001(\t\022\022\n\n"
  "table_name\030\002 \001(\t\022\021\n\tedge_name\030\003 \001(\t\022\027\n\017t"
  "able_name_next\030\004 \001(\t\"=\n\020DeleteTableEntry"
  "\022\025\n\rpipeline_name\030\001 \001(\t\022\022\n\ntable_name\030\002 "
  "\001(\t\"D\n\026InsertConditionalEntry\022\025\n\rpipelin"
  "e_name\030\001 \001(\t\022\023\n\013branch_name\030\002 \001(\t\"s\n\026Cha"
  "ngeConditionalEntry\022\025\n\rpipeline_name\030\001 \001"
  "(\t\022\023\n\013branch_name\030\002 \001(\t\022\032\n\022true_or_false"
  "_next\030\003 \001(\010\022\021\n\tnode_name\030\004 \001(\t\"D\n\026Delete"
  "ConditionalEntry\022\025\n\rpipeline_name\030\001 \001(\t\022"
  "\023\n\013branch_name\030\002 \001(\t\"l\n\017InsertFlexEntry\022"
  "\025\n\rpipeline_name\030\001 \001(\t\022\021\n\tnode_name\030\002 \001("
  "\t\022\026\n\016true_next_node\030\003 \001(\t\022\027\n\017false_next_"
  "node\030\004 \001(\t\"i\n\017ChangeFlexEntry\022\025\n\rpipelin"
  "e_name\030\001 \001(\t\022\020\n\010flx_name\030\002 \001(\t\022\032\n\022true_o"
  "r_false_next\030\003 \001(\010\022\021\n\tnode_next\030\004 \001(\t\":\n"
  "\017DeleteFlexEntry\022\025\n\rpipeline_name\030\001 \001(\t\022"
  "\020\n\010flx_name\030\002 \001(\t\"u\n\030InsertRegisterArray"
  "Entry\022\033\n\023register_array_name\030\001 \001(\t\022\033\n\023re"
  "gister_array_size\030\002 \001(\r\022\037\n\027register_arra"
  "y_bitwidth\030\003 \001(\r\"\350\001\n\030ChangeRegisterArray"
  "Entry\022\033\n\023register_array_name\030\001 \001(\t\022[\n\032re"
  "gister_array_change_type\030\002 \001(\01627.p4.v1.C"
  "hangeRegisterArrayEntry.RegisterArrayCha"
  "ngeType\022\021\n\tnew_value\030\003 \001(\r\"\?\n\027RegisterAr"
  "rayChangeType\022\017\n\013CHANGE_SIZE\020\000\022\023\n\017CHANGE"
  "_BITWIDTH\020\001\"7\n\030DeleteRegisterArrayEntry\022"
  "\033\n\023register_array_name\030\001 \001(\t\"!\n\014TriggerE"
  "ntry\022\021\n\ton_or_off\030\001 \001(\010\"A\n\017ChangeInitEnt"
  "ry\022\025\n\rpipeline_name\030\001 \001(\t\022\027\n\017table_name_"
  "next\030\002 \001(\t\"]\n\013ExternEntry\022\026\n\016extern_type"
  "_id\030\001 \001(\r\022\021\n\textern_id\030\002 \001(\r\022#\n\005entry\030\003 "
  "\001(\0132\024.google.protobuf.Any\"\220\003\n\nTableEntry"
  "\022\020\n\010table_id\030\001 \001(\r\022 \n\005match\030\002 \003(\0132\021.p4.v"
  "1.FieldMatch\022\"\n\006action\030\003 \001(\0132\022.p4.v1.Tab"
  "leAction\022\020\n\010priority\030\004 \001(\005\022\037\n\023controller"
  "_metadata\030\005 \001(\004B\002\030\001\022(\n\014meter_config\030\006 \001("
  "\0132\022.p4.v1.MeterConfig\022(\n\014counter_data\030\007 "
  "\001(\0132\022.p4.v1.CounterData\022\031\n\021is_default_ac"
  "tion\030\010 \001(\010\022\027\n\017idle_timeout_ns\030\t \001(\003\022:\n\023t"
  "ime_since_last_hit\030\n \001(\0132\035.p4.v1.TableEn"
  "try.IdleTimeout\022\020\n\010metadata\030\013 \001(\014\032!\n\013Idl"
  "eTimeout\022\022\n\nelapsed_ns\030\001 \001(\003\"\332\003\n\nFieldMa"
  "tch\022\020\n\010field_id\030\001 \001(\r\022(\n\005exact\030\002 \001(\0132\027.p"
  "4.v1.FieldMatch.ExactH\000\022,\n\007ternary\030\003 \001(\013"
  "2\031.p4.v1.FieldMatch.TernaryH\000\022$\n\003lpm\030\004 \001"
  "(\0132\025.p4.v1.FieldMatch.LPMH\000\022(\n\005range\030\006 \001"
  "(\0132\027.p4.v1.FieldMatch.RangeH\000\022.\n\010optiona"
  "l\030\007 \001(\0132\032.p4.v1.FieldMatch.OptionalH\000\022%\n"
  "\005other\030d \001(\0132\024.google.protobuf.AnyH\000\032\026\n\005"
  "Exact\022\r\n\005value\030\001 \001(\014\032&\n\007Ternary\022\r\n\005value"
  "\030\001 \001(\014\022\014\n\004mask\030\002 \001(\014\032(\n\003LPM\022\r\n\005value\030\001 \001"
  "(\014\022\022\n\nprefix_len\030\002 \001(\005\032\"\n\005Range\022\013\n\003low\030\001"
  " \001(\014\022\014\n\004high\030\002 \001(\014\032\031\n\010Optional\022\r\n\005value\030"
  "\001 \001(\014B\022\n\020field_match_type\"\301\001\n\013TableActio"
  "n\022\037\n\006action\030\001 \001(\0132\r.p4.v1.ActionH\000\022\"\n\030ac"
  "tion_profile_member_id\030\002 \001(\rH\000\022!\n\027action"
  "_profile_group_id\030\003 \001(\rH\000\022B\n\031action_prof"
  "ile_action_set\030\004 \001(\0132\035.p4.v1.ActionProfi"
  "leActionSetH\000B\006\n\004type\"j\n\006Action\022\021\n\tactio"
  "n_id\030\001 \001(\r\022#\n\006params\030\004 \003(\0132\023.p4.v1.Actio"
  "n.Param\032(\n\005Param\022\020\n\010param_id\030\002 \001(\r\022\r\n\005va"
  "lue\030\003 \001(\014\"T\n\026ActionProfileActionSet\022:\n\026a"
  "ction_profile_actions\030\001 \003(\0132\032.p4.v1.Acti"
  "onProfileAction\"}\n\023ActionProfileAction\022\035"
  "\n\006action\030\001 \001(\0132\r.p4.v1.Action\022\016\n\006weight\030"
  "\002 \001(\005\022\023\n\005watch\030\003 \001(\005B\002\030\001H\000\022\024\n\nwatch_port"
  "\030\004 \001(\014H\000B\014\n\nwatch_kind\"b\n\023ActionProfileM"
  "ember\022\031\n\021action_profile_id\030\001 \001(\r\022\021\n\tmemb"
  "er_id\030\002 \001(\r\022\035\n\006action\030\003 \001(\0132\r.p4.v1.Acti"
  "on\"\354\001\n\022ActionProfileGroup\022\031\n\021action_prof"
  "ile_id\030\001 \001(\r\022\020\n\010group_id\030\002 \001(\r\0221\n\007member"
  "s\030\003 \003(\0132 .p4.v1.ActionProfileGroup.Membe"
  "r\022\020\n\010max_size\030\004 \001(\005\032d\n\006Member\022\021\n\tmember_"
  "id\030\001 \001(\r\022\016\n\006weight\030\002 \001(\005\022\023\n\005watch\030\003 \001(\005B"
  "\002\030\001H\000\022\024\n\nwatch_port\030\004 \001(\014H\000B\014\n\nwatch_kin"
  "d\"\026\n\005Index\022\r\n\005index\030\001 \001(\003\"_\n\nMeterEntry\022"
  "\020\n\010meter_id\030\001 \001(\r\022\033\n\005index\030\002 \001(\0132\014.p4.v1"
  ".Index\022\"\n\006config\030\003 \001(\0132\022.p4.v1.MeterConf"
  "ig\"^\n\020DirectMeterEntry\022&\n\013table_entry\030\001 "
  "\001(\0132\021.p4.v1.TableEntry\022\"\n\006config\030\002 \001(\0132\022"
  ".p4.v1.MeterConfig\"G\n\013MeterConfig\022\013\n\003cir"
  "\030\001 \001(\003\022\016\n\006cburst\030\002 \001(\003\022\013\n\003pir\030\003 \001(\003\022\016\n\006p"
  "burst\030\004 \001(\003\"a\n\014CounterEntry\022\022\n\ncounter_i"
  "d\030\001 \001(\r\022\033\n\005index\030\002 \001(\0132\014.p4.v1.Index\022 \n\004"
  "data\030\003 \001(\0132\022.p4.v1.CounterData\"^\n\022Direct"
  "CounterEntry\022&\n\013table_entry\030\001 \001(\0132\021.p4.v"
  "1.TableEntry\022 \n\004data\030\002 \001(\0132\022.p4.v1.Count"
  "erData\"7\n\013CounterData\022\022\n\nbyte_count\030\001 \001("
  "\003\022\024\n\014packet_count\030\002 \001(\003\"\234\001\n\034PacketReplic"
  "ationEngineEntry\022;\n\025multicast_group_entr"
  "y\030\001 \001(\0132\032.p4.v1.MulticastGroupEntryH\000\0227\n"
  "\023clone_session_entry\030\002 \001(\0132\030.p4.v1.Clone"
  "SessionEntryH\000B\006\n\004type\"0\n\007Replica\022\023\n\013egr"
  "ess_port\030\001 \001(\r\022\020\n\010instance\030\002 \001(\r\"S\n\023Mult"
  "icastGroupEntry\022\032\n\022multicast_group_id\030\001 "
  "\001(\r\022 \n\010replicas\030\002 \003(\0132\016.p4.v1.Replica\"\200\001"
  "\n\021CloneSessionEntry\022\022\n\nsession_id\030\001 \001(\r\022"
  " \n\010replicas\030\002 \003(\0132\016.p4.v1.Replica\022\030\n\020cla"
  "ss_of_service\030\003 \001(\r\022\033\n\023packet_length_byt"
  "es\030\004 \001(\005\"2\n\016ValueSetMember\022 \n\005match\030\001 \003("
  "\0132\021.p4.v1.FieldMatch\"M\n\rValueSetEntry\022\024\n"
  "\014value_set_id\030\001 \001(\r\022&\n\007members\030\002 \003(\0132\025.p"
  "4.v1.ValueSetMember\"^\n\rRegisterEntry\022\023\n\013"
  "register_id\030\001 \001(\r\022\033\n\005index\030\002 \001(\0132\014.p4.v1"
  ".Index\022\033\n\004data\030\003 \001(\0132\r.p4.v1.P4Data\"\234\001\n\013"
  "DigestEntry\022\021\n\tdigest_id\030\001 \001(\r\022)\n\006config"
  "\030\002 \001(\0132\031.p4.v1.DigestEntry.Config\032O\n\006Con"
  "fig\022\026\n\016max_timeout_ns\030\001 \001(\003\022\025\n\rmax_list_"
  "size\030\002 \001(\005\022\026\n\016ack_timeout_ns\030\003 \001(\003\"\316\001\n\024S"
  "treamMessageRequest\0225\n\013arbitration\030\001 \001(\013"
  "2\036.p4.v1.MasterArbitrationUpdateH\000\022\"\n\006pa"
  "cket\030\002 \001(\0132\020.p4.v1.PacketOutH\000\022*\n\ndigest"
  "_ack\030\003 \001(\0132\024.p4.v1.DigestListAckH\000\022%\n\005ot"
  "her\030\004 \001(\0132\024.google.protobuf.AnyH\000B\010\n\006upd"
  "ate\"E\n\tPacketOut\022\017\n\007payload\030\001 \001(\014\022\'\n\010met"
  "adata\030\002 \003(\0132\025.p4.v1.PacketMetadata\"3\n\rDi"
  "gestListAck\022\021\n\tdigest_id\030\001 \001(\r\022\017\n\007list_i"
  "d\030\002 \001(\004\"\261\002\n\025StreamMessageResponse\0225\n\013arb"
  "itration\030\001 \001(\0132\036.p4.v1.MasterArbitration"
  "UpdateH\000\022!\n\006packet\030\002 \001(\0132\017.p4.v1.PacketI"
  "nH\000\022#\n\006digest\030\003 \001(\0132\021.p4.v1.DigestListH\000"
  "\022C\n\031idle_timeout_notification\030\004 \001(\0132\036.p4"
  ".v1.IdleTimeoutNotificationH\000\022%\n\005other\030\005"
  " \001(\0132\024.google.protobuf.AnyH\000\022#\n\005error\030\006 "
  "\001(\0132\022.p4.v1.StreamErrorH\000B\010\n\006update\"D\n\010P"
  "acketIn\022\017\n\007payload\030\001 \001(\014\022\'\n\010metadata\030\002 \003"
  "(\0132\025.p4.v1.PacketMetadata\"`\n\nDigestList\022"
  "\021\n\tdigest_id\030\001 \001(\r\022\017\n\007list_id\030\002 \001(\004\022\033\n\004d"
  "ata\030\003 \003(\0132\r.p4.v1.P4Data\022\021\n\ttimestamp\030\004 "
  "\001(\003\"4\n\016PacketMetadata\022\023\n\013metadata_id\030\001 \001"
  "(\r\022\r\n\005value\030\002 \001(\014\"\220\001\n\027MasterArbitrationU"
  "pdate\022\021\n\tdevice_id\030\001 \001(\004\022\031\n\004role\030\002 \001(\0132\013"
  ".p4.v1.Role\022#\n\013election_id\030\003 \001(\0132\016.p4.v1"
  ".Uint128\022\"\n\006status\030\004 \001(\0132\022.google.rpc.St"
  "atus\"8\n\004Role\022\n\n\002id\030\001 \001(\004\022$\n\006config\030\002 \001(\013"
  "2\024.google.protobuf.Any\"T\n\027IdleTimeoutNot"
  "ification\022&\n\013table_entry\030\001 \003(\0132\021.p4.v1.T"
  "ableEntry\022\021\n\ttimestamp\030\002 \001(\003\"\353\001\n\013StreamE"
  "rror\022\026\n\016canonical_code\030\001 \001(\005\022\017\n\007message\030"
  "\002 \001(\t\022\r\n\005space\030\003 \001(\t\022\014\n\004code\030\004 \001(\005\022+\n\npa"
  "cket_out\030\005 \001(\0132\025.p4.v1.PacketOutErrorH\000\022"
  "4\n\017digest_list_ack\030\006 \001(\0132\031.p4.v1.DigestL"
  "istAckErrorH\000\022(\n\005other\030\007 \001(\0132\027.p4.v1.Str"
  "eamOtherErrorH\000B\t\n\007details\"6\n\016PacketOutE"
  "rror\022$\n\npacket_out\030\001 \001(\0132\020.p4.v1.PacketO"
  "ut\"C\n\022DigestListAckError\022-\n\017digest_list_"
  "ack\030\001 \001(\0132\024.p4.v1.DigestListAck\"7\n\020Strea"
  "mOtherError\022#\n\005other\030\001 \001(\0132\024.google.prot"
  "obuf.Any\"$\n\007Uint128\022\014\n\004high\030\001 \001(\004\022\013\n\003low"
  "\030\002 \001(\004\"\331\002\n\"SetForwardingPipelineConfigRe"
  "quest\022\021\n\tdevice_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001("
  "\004\022#\n\013election_id\030\003 \001(\0132\016.p4.v1.Uint128\022@"
  "\n\006action\030\004 \001(\01620.p4.v1.SetForwardingPipe"
  "lineConfigRequest.Action\022/\n\006config\030\005 \001(\013"
  "2\037.p4.v1.ForwardingPipelineConfig\"w\n\006Act"
  "ion\022\017\n\013UNSPECIFIED\020\000\022\n\n\006VERIFY\020\001\022\023\n\017VERI"
  "FY_AND_SAVE\020\002\022\025\n\021VERIFY_AND_COMMIT\020\003\022\n\n\006"
  "COMMIT\020\004\022\030\n\024RECONCILE_AND_COMMIT\020\005\"%\n#Se"
  "tForwardingPipelineConfigResponse\"\254\001\n\030Fo"
  "rwardingPipelineConfig\022$\n\006p4info\030\001 \001(\0132\024"
  ".p4.config.v1.P4Info\022\030\n\020p4_device_config"
  "\030\002 \001(\014\0226\n\006cookie\030\003 \001(\0132&.p4.v1.Forwardin"
  "gPipelineConfig.Cookie\032\030\n\006Cookie\022\016\n\006cook"
  "ie\030\001 \001(\004\"\345\001\n\"GetForwardingPipelineConfig"
  "Request\022\021\n\tdevice_id\030\001 \001(\004\022M\n\rresponse_t"
  "ype\030\002 \001(\01626.p4.v1.GetForwardingPipelineC"
  "onfigRequest.ResponseType\"]\n\014ResponseTyp"
  "e\022\007\n\003ALL\020\000\022\017\n\013COOKIE_ONLY\020\001\022\025\n\021P4INFO_AN"
  "D_COOKIE\020\002\022\034\n\030DEVICE_CONFIG_AND_COOKIE\020\003"
  "\"V\n#GetForwardingPipelineConfigResponse\022"
  "/\n\006config\030\001 \001(\0132\037.p4.v1.ForwardingPipeli"
  "neConfig\"t\n\005Error\022\026\n\016canonical_code\030\001 \001("
  "\005\022\017\n\007message\030\002 \001(\t\022\r\n\005space\030\003 \001(\t\022\014\n\004cod"
  "e\030\004 \001(\005\022%\n\007details\030\005 \001(\0132\024.google.protob"
  "uf.Any\"\025\n\023CapabilitiesRequest\"5\n\024Capabil"
  "itiesResponse\022\035\n\025p4runtime_api_version\030\001"
  " \001(\t*\212\001\n\007SdnPort\022\024\n\020SDN_PORT_UNKNOWN\020\000\022\020"
  "\n\014SDN_PORT_MIN\020\001\022\031\n\014SDN_PORT_MAX\020\377\375\377\377\377\377\377"
  "\377\377\001\022!\n\024SDN_PORT_RECIRCULATE\020\372\377\377\377\377\377\377\377\377\001\022\031"
  "\n\014SDN_PORT_CPU\020\375\377\377\377\377\377\377\377\377\0012\203\004\n\tP4Runtime\022"
  "4\n\005Write\022\023.p4.v1.WriteRequest\032\024.p4.v1.Wr"
  "iteResponse\"\000\0223\n\004Read\022\022.p4.v1.ReadReques"
  "t\032\023.p4.v1.ReadResponse\"\0000\001\022v\n\033SetForward"
  "ingPipelineConfig\022).p4.v1.SetForwardingP"
  "ipelineConfigRequest\032*.p4.v1.SetForwardi"
  "ngPipelineConfigResponse\"\000\022v\n\033GetForward"
  "ingPipelineConfig\022).p4.v1.GetForwardingP"
  "ipelineConfigRequest\032*.p4.v1.GetForwardi"
  "ngPipelineConfigResponse\"\000\022P\n\rStreamChan"
  "nel\022\033.p4.v1.StreamMessageRequest\032\034.p4.v1"
  ".StreamMessageResponse\"\000(\0010\001\022I\n\014Capabili"
  "ties\022\032.p4.v1.CapabilitiesRequest\032\033.p4.v1"
  ".CapabilitiesResponse\"\000B)Z$github.com/p4"
  "lang/p4runtime/go/p4/v1\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p4_2fv1_2fp4runtime_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
  &::descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto,
  &::descriptor_table_p4_2fv1_2fp4data_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p4_2fv1_2fp4runtime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fv1_2fp4runtime_2eproto = {
  false, false, 10754, descriptor_table_protodef_p4_2fv1_2fp4runtime_2eproto, "p4/v1/p4runtime.proto", 
  &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once, descriptor_table_p4_2fv1_2fp4runtime_2eproto_deps, 4, 80,
  schemas, file_default_instances, TableStruct_p4_2fv1_2fp4runtime_2eproto::offsets,
  file_level_metadata_p4_2fv1_2fp4runtime_2eproto, file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto, file_level_service_descriptors_p4_2fv1_2fp4runtime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter() {
  return &descriptor_table_p4_2fv1_2fp4runtime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p4_2fv1_2fp4runtime_2eproto(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
namespace p4 {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRequest_Atomicity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[0];
}
bool WriteRequest_Atomicity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteRequest_Atomicity WriteRequest::CONTINUE_ON_ERROR;
constexpr WriteRequest_Atomicity WriteRequest::ROLLBACK_ON_ERROR;
constexpr WriteRequest_Atomicity WriteRequest::DATAPLANE_ATOMIC;
constexpr WriteRequest_Atomicity WriteRequest::Atomicity_MIN;
constexpr WriteRequest_Atomicity WriteRequest::Atomicity_MAX;
constexpr int WriteRequest::Atomicity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[1];
}
bool Update_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Update_Type Update::UNSPECIFIED;
constexpr Update_Type Update::INSERT;
constexpr Update_Type Update::MODIFY;
constexpr Update_Type Update::DELETE;
constexpr Update_Type Update::RUNTIME_RECONFIG;
constexpr Update_Type Update::Type_MIN;
constexpr Update_Type Update::Type_MAX;
constexpr int Update::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeReconfigEntry_RuntimeReconfigType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[2];
}
bool RuntimeReconfigEntry_RuntimeReconfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::INIT_P4OBJECTS_NEW;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::INSERT_TABLE;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::CHANGE_TABLE;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::DELETE_TABLE;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::INSERT_CONDITIONAL;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::CHANGE_CONDITIONAL;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::DELETE_CONDITIONAL;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::INSERT_FLEX;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::CHANGE_FLEX;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::DELETE_FLEX;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::INSERT_REGISTER_ARRAY;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::CHANGE_REGISTER_ARRAY;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::DELETE_REGISTER_ARRAY;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::TRIGGER;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::CHANGE_INIT;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::RuntimeReconfigType_MIN;
constexpr RuntimeReconfigEntry_RuntimeReconfigType RuntimeReconfigEntry::RuntimeReconfigType_MAX;
constexpr int RuntimeReconfigEntry::RuntimeReconfigType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeRegisterArrayEntry_RegisterArrayChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[3];
}
bool ChangeRegisterArrayEntry_RegisterArrayChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeRegisterArrayEntry_RegisterArrayChangeType ChangeRegisterArrayEntry::CHANGE_SIZE;
constexpr ChangeRegisterArrayEntry_RegisterArrayChangeType ChangeRegisterArrayEntry::CHANGE_BITWIDTH;
constexpr ChangeRegisterArrayEntry_RegisterArrayChangeType ChangeRegisterArrayEntry::RegisterArrayChangeType_MIN;
constexpr ChangeRegisterArrayEntry_RegisterArrayChangeType ChangeRegisterArrayEntry::RegisterArrayChangeType_MAX;
constexpr int ChangeRegisterArrayEntry::RegisterArrayChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetForwardingPipelineConfigRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[4];
}
bool SetForwardingPipelineConfigRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::UNSPECIFIED;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY_AND_SAVE;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY_AND_COMMIT;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::COMMIT;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::RECONCILE_AND_COMMIT;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::Action_MIN;
constexpr SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::Action_MAX;
constexpr int SetForwardingPipelineConfigRequest::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetForwardingPipelineConfigRequest_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[5];
}
bool GetForwardingPipelineConfigRequest_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ALL;
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::COOKIE_ONLY;
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::P4INFO_AND_COOKIE;
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::DEVICE_CONFIG_AND_COOKIE;
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ResponseType_MIN;
constexpr GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ResponseType_MAX;
constexpr int GetForwardingPipelineConfigRequest::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdnPort_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fv1_2fp4runtime_2eproto);
  return file_level_enum_descriptors_p4_2fv1_2fp4runtime_2eproto[6];
}
bool SdnPort_IsValid(int value) {
  switch (value) {
    case -257:
    case -6:
    case -3:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class WriteRequest::_Internal {
 public:
  static const ::p4::v1::Uint128& election_id(const WriteRequest* msg);
};

const ::p4::v1::Uint128&
WriteRequest::_Internal::election_id(const WriteRequest* msg) {
  return *msg->election_id_;
}
WriteRequest::WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = nullptr;
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(atomicity_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.WriteRequest)
}

void WriteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&election_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&election_id_)) + sizeof(atomicity_));
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.WriteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete election_id_;
}

void WriteRequest::ArenaDtor(void* object) {
  WriteRequest* _this = reinterpret_cast< WriteRequest* >(object);
  (void)_this;
}
void WriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  if (GetArenaForAllocation() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomicity_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(atomicity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Uint128 election_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_election_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.Update updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.WriteRequest.Atomicity atomicity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_atomicity(static_cast<::p4::v1::WriteRequest_Atomicity>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::election_id(this), target, stream);
  }

  // repeated .p4.v1.Update updates = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_updates(i), target, stream);
  }

  // .p4.v1.WriteRequest.Atomicity atomicity = 5;
  if (this->_internal_atomicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_atomicity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.WriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Update updates = 4;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *election_id_);
  }

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_device_id());
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // .p4.v1.WriteRequest.Atomicity atomicity = 5;
  if (this->_internal_atomicity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atomicity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRequest::GetClassData() const { return &_class_data_; }

void WriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteRequest *>(to)->MergeFrom(
      static_cast<const WriteRequest &>(from));
}


void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  if (from._internal_has_election_id()) {
    _internal_mutable_election_id()->::p4::v1::Uint128::MergeFrom(from._internal_election_id());
  }
  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_atomicity() != 0) {
    _internal_set_atomicity(from._internal_atomicity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteRequest, atomicity_)
      + sizeof(WriteRequest::atomicity_)
      - PROTOBUF_FIELD_OFFSET(WriteRequest, election_id_)>(
          reinterpret_cast<char*>(&election_id_),
          reinterpret_cast<char*>(&other->election_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[0]);
}

// ===================================================================

class WriteResponse::_Internal {
 public:
};

WriteResponse::WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.v1.WriteResponse)
}
WriteResponse::WriteResponse(const WriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.WriteResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WriteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[1]);
}

// ===================================================================

class ReadRequest::_Internal {
 public:
};

ReadRequest::ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ReadRequest)
}

void ReadRequest::SharedCtor() {
device_id_ = uint64_t{0u};
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.ReadRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadRequest::ArenaDtor(void* object) {
  ReadRequest* _this = reinterpret_cast< ReadRequest* >(object);
  (void)_this;
}
void ReadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  device_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.Entity entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // repeated .p4.v1.Entity entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Entity entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRequest::GetClassData() const { return &_class_data_; }

void ReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRequest *>(to)->MergeFrom(
      static_cast<const ReadRequest &>(from));
}


void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  swap(device_id_, other->device_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[2]);
}

// ===================================================================

class ReadResponse::_Internal {
 public:
};

ReadResponse::ReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ReadResponse)
}
ReadResponse::ReadResponse(const ReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ReadResponse)
}

void ReadResponse::SharedCtor() {
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.ReadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadResponse::ArenaDtor(void* object) {
  ReadResponse* _this = reinterpret_cast< ReadResponse* >(object);
  (void)_this;
}
void ReadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.Entity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.Entity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ReadResponse)
  return target;
}

size_t ReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Entity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResponse::GetClassData() const { return &_class_data_; }

void ReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadResponse *>(to)->MergeFrom(
      static_cast<const ReadResponse &>(from));
}


void ReadResponse::MergeFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  return true;
}

void ReadResponse::InternalSwap(ReadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[3]);
}

// ===================================================================

class Update::_Internal {
 public:
  static const ::p4::v1::Entity& entity(const Update* msg);
};

const ::p4::v1::Entity&
Update::_Internal::entity(const Update* msg) {
  return *msg->entity_;
}
Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity()) {
    entity_ = new ::p4::v1::Entity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Update)
}

void Update::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(type_));
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:p4.v1.Update)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_;
}

void Update::ArenaDtor(void* object) {
  Update* _this = reinterpret_cast< Update* >(object);
  (void)_this;
}
void Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.Update.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::p4::v1::Update_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Entity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.Update.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .p4.v1.Entity entity = 2;
  if (this->_internal_has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Entity entity = 2;
  if (this->_internal_has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  // .p4.v1.Update.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Update::GetClassData() const { return &_class_data_; }

void Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Update *>(to)->MergeFrom(
      static_cast<const Update &>(from));
}


void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Update)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entity()) {
    _internal_mutable_entity()->::p4::v1::Entity::MergeFrom(from._internal_entity());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Update, type_)
      + sizeof(Update::type_)
      - PROTOBUF_FIELD_OFFSET(Update, entity_)>(
          reinterpret_cast<char*>(&entity_),
          reinterpret_cast<char*>(&other->entity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[4]);
}

// ===================================================================

class Entity::_Internal {
 public:
  static const ::p4::v1::ExternEntry& extern_entry(const Entity* msg);
  static const ::p4::v1::TableEntry& table_entry(const Entity* msg);
  static const ::p4::v1::ActionProfileMember& action_profile_member(const Entity* msg);
  static const ::p4::v1::ActionProfileGroup& action_profile_group(const Entity* msg);
  static const ::p4::v1::MeterEntry& meter_entry(const Entity* msg);
  static const ::p4::v1::DirectMeterEntry& direct_meter_entry(const Entity* msg);
  static const ::p4::v1::CounterEntry& counter_entry(const Entity* msg);
  static const ::p4::v1::DirectCounterEntry& direct_counter_entry(const Entity* msg);
  static const ::p4::v1::PacketReplicationEngineEntry& packet_replication_engine_entry(const Entity* msg);
  static const ::p4::v1::ValueSetEntry& value_set_entry(const Entity* msg);
  static const ::p4::v1::RegisterEntry& register_entry(const Entity* msg);
  static const ::p4::v1::DigestEntry& digest_entry(const Entity* msg);
  static const ::p4::v1::RuntimeReconfigEntry& runtime_reconfig_entry(const Entity* msg);
};

const ::p4::v1::ExternEntry&
Entity::_Internal::extern_entry(const Entity* msg) {
  return *msg->entity_.extern_entry_;
}
const ::p4::v1::TableEntry&
Entity::_Internal::table_entry(const Entity* msg) {
  return *msg->entity_.table_entry_;
}
const ::p4::v1::ActionProfileMember&
Entity::_Internal::action_profile_member(const Entity* msg) {
  return *msg->entity_.action_profile_member_;
}
const ::p4::v1::ActionProfileGroup&
Entity::_Internal::action_profile_group(const Entity* msg) {
  return *msg->entity_.action_profile_group_;
}
const ::p4::v1::MeterEntry&
Entity::_Internal::meter_entry(const Entity* msg) {
  return *msg->entity_.meter_entry_;
}
const ::p4::v1::DirectMeterEntry&
Entity::_Internal::direct_meter_entry(const Entity* msg) {
  return *msg->entity_.direct_meter_entry_;
}
const ::p4::v1::CounterEntry&
Entity::_Internal::counter_entry(const Entity* msg) {
  return *msg->entity_.counter_entry_;
}
const ::p4::v1::DirectCounterEntry&
Entity::_Internal::direct_counter_entry(const Entity* msg) {
  return *msg->entity_.direct_counter_entry_;
}
const ::p4::v1::PacketReplicationEngineEntry&
Entity::_Internal::packet_replication_engine_entry(const Entity* msg) {
  return *msg->entity_.packet_replication_engine_entry_;
}
const ::p4::v1::ValueSetEntry&
Entity::_Internal::value_set_entry(const Entity* msg) {
  return *msg->entity_.value_set_entry_;
}
const ::p4::v1::RegisterEntry&
Entity::_Internal::register_entry(const Entity* msg) {
  return *msg->entity_.register_entry_;
}
const ::p4::v1::DigestEntry&
Entity::_Internal::digest_entry(const Entity* msg) {
  return *msg->entity_.digest_entry_;
}
const ::p4::v1::RuntimeReconfigEntry&
Entity::_Internal::runtime_reconfig_entry(const Entity* msg) {
  return *msg->entity_.runtime_reconfig_entry_;
}
void Entity::set_allocated_extern_entry(::p4::v1::ExternEntry* extern_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (extern_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ExternEntry>::GetOwningArena(extern_entry);
    if (message_arena != submessage_arena) {
      extern_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extern_entry, submessage_arena);
    }
    set_has_extern_entry();
    entity_.extern_entry_ = extern_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.extern_entry)
}
void Entity::set_allocated_table_entry(::p4::v1::TableEntry* table_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (table_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::TableEntry>::GetOwningArena(table_entry);
    if (message_arena != submessage_arena) {
      table_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_entry, submessage_arena);
    }
    set_has_table_entry();
    entity_.table_entry_ = table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.table_entry)
}
void Entity::set_allocated_action_profile_member(::p4::v1::ActionProfileMember* action_profile_member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (action_profile_member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ActionProfileMember>::GetOwningArena(action_profile_member);
    if (message_arena != submessage_arena) {
      action_profile_member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_profile_member, submessage_arena);
    }
    set_has_action_profile_member();
    entity_.action_profile_member_ = action_profile_member;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.action_profile_member)
}
void Entity::set_allocated_action_profile_group(::p4::v1::ActionProfileGroup* action_profile_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (action_profile_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ActionProfileGroup>::GetOwningArena(action_profile_group);
    if (message_arena != submessage_arena) {
      action_profile_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_profile_group, submessage_arena);
    }
    set_has_action_profile_group();
    entity_.action_profile_group_ = action_profile_group;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.action_profile_group)
}
void Entity::set_allocated_meter_entry(::p4::v1::MeterEntry* meter_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (meter_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::MeterEntry>::GetOwningArena(meter_entry);
    if (message_arena != submessage_arena) {
      meter_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meter_entry, submessage_arena);
    }
    set_has_meter_entry();
    entity_.meter_entry_ = meter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.meter_entry)
}
void Entity::set_allocated_direct_meter_entry(::p4::v1::DirectMeterEntry* direct_meter_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (direct_meter_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DirectMeterEntry>::GetOwningArena(direct_meter_entry);
    if (message_arena != submessage_arena) {
      direct_meter_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_meter_entry, submessage_arena);
    }
    set_has_direct_meter_entry();
    entity_.direct_meter_entry_ = direct_meter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.direct_meter_entry)
}
void Entity::set_allocated_counter_entry(::p4::v1::CounterEntry* counter_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (counter_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::CounterEntry>::GetOwningArena(counter_entry);
    if (message_arena != submessage_arena) {
      counter_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter_entry, submessage_arena);
    }
    set_has_counter_entry();
    entity_.counter_entry_ = counter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.counter_entry)
}
void Entity::set_allocated_direct_counter_entry(::p4::v1::DirectCounterEntry* direct_counter_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (direct_counter_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DirectCounterEntry>::GetOwningArena(direct_counter_entry);
    if (message_arena != submessage_arena) {
      direct_counter_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_counter_entry, submessage_arena);
    }
    set_has_direct_counter_entry();
    entity_.direct_counter_entry_ = direct_counter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.direct_counter_entry)
}
void Entity::set_allocated_packet_replication_engine_entry(::p4::v1::PacketReplicationEngineEntry* packet_replication_engine_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (packet_replication_engine_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::PacketReplicationEngineEntry>::GetOwningArena(packet_replication_engine_entry);
    if (message_arena != submessage_arena) {
      packet_replication_engine_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_replication_engine_entry, submessage_arena);
    }
    set_has_packet_replication_engine_entry();
    entity_.packet_replication_engine_entry_ = packet_replication_engine_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.packet_replication_engine_entry)
}
void Entity::set_allocated_value_set_entry(::p4::v1::ValueSetEntry* value_set_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (value_set_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ValueSetEntry>::GetOwningArena(value_set_entry);
    if (message_arena != submessage_arena) {
      value_set_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_set_entry, submessage_arena);
    }
    set_has_value_set_entry();
    entity_.value_set_entry_ = value_set_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.value_set_entry)
}
void Entity::set_allocated_register_entry(::p4::v1::RegisterEntry* register_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (register_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::RegisterEntry>::GetOwningArena(register_entry);
    if (message_arena != submessage_arena) {
      register_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_entry, submessage_arena);
    }
    set_has_register_entry();
    entity_.register_entry_ = register_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.register_entry)
}
void Entity::set_allocated_digest_entry(::p4::v1::DigestEntry* digest_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (digest_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DigestEntry>::GetOwningArena(digest_entry);
    if (message_arena != submessage_arena) {
      digest_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest_entry, submessage_arena);
    }
    set_has_digest_entry();
    entity_.digest_entry_ = digest_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.digest_entry)
}
void Entity::set_allocated_runtime_reconfig_entry(::p4::v1::RuntimeReconfigEntry* runtime_reconfig_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (runtime_reconfig_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::RuntimeReconfigEntry>::GetOwningArena(runtime_reconfig_entry);
    if (message_arena != submessage_arena) {
      runtime_reconfig_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_reconfig_entry, submessage_arena);
    }
    set_has_runtime_reconfig_entry();
    entity_.runtime_reconfig_entry_ = runtime_reconfig_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.runtime_reconfig_entry)
}
Entity::Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entity();
  switch (from.entity_case()) {
    case kExternEntry: {
      _internal_mutable_extern_entry()->::p4::v1::ExternEntry::MergeFrom(from._internal_extern_entry());
      break;
    }
    case kTableEntry: {
      _internal_mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from._internal_table_entry());
      break;
    }
    case kActionProfileMember: {
      _internal_mutable_action_profile_member()->::p4::v1::ActionProfileMember::MergeFrom(from._internal_action_profile_member());
      break;
    }
    case kActionProfileGroup: {
      _internal_mutable_action_profile_group()->::p4::v1::ActionProfileGroup::MergeFrom(from._internal_action_profile_group());
      break;
    }
    case kMeterEntry: {
      _internal_mutable_meter_entry()->::p4::v1::MeterEntry::MergeFrom(from._internal_meter_entry());
      break;
    }
    case kDirectMeterEntry: {
      _internal_mutable_direct_meter_entry()->::p4::v1::DirectMeterEntry::MergeFrom(from._internal_direct_meter_entry());
      break;
    }
    case kCounterEntry: {
      _internal_mutable_counter_entry()->::p4::v1::CounterEntry::MergeFrom(from._internal_counter_entry());
      break;
    }
    case kDirectCounterEntry: {
      _internal_mutable_direct_counter_entry()->::p4::v1::DirectCounterEntry::MergeFrom(from._internal_direct_counter_entry());
      break;
    }
    case kPacketReplicationEngineEntry: {
      _internal_mutable_packet_replication_engine_entry()->::p4::v1::PacketReplicationEngineEntry::MergeFrom(from._internal_packet_replication_engine_entry());
      break;
    }
    case kValueSetEntry: {
      _internal_mutable_value_set_entry()->::p4::v1::ValueSetEntry::MergeFrom(from._internal_value_set_entry());
      break;
    }
    case kRegisterEntry: {
      _internal_mutable_register_entry()->::p4::v1::RegisterEntry::MergeFrom(from._internal_register_entry());
      break;
    }
    case kDigestEntry: {
      _internal_mutable_digest_entry()->::p4::v1::DigestEntry::MergeFrom(from._internal_digest_entry());
      break;
    }
    case kRuntimeReconfigEntry: {
      _internal_mutable_runtime_reconfig_entry()->::p4::v1::RuntimeReconfigEntry::MergeFrom(from._internal_runtime_reconfig_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.Entity)
}

void Entity::SharedCtor() {
clear_has_entity();
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:p4.v1.Entity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Entity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entity()) {
    clear_entity();
  }
}

void Entity::ArenaDtor(void* object) {
  Entity* _this = reinterpret_cast< Entity* >(object);
  (void)_this;
}
void Entity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Entity::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.Entity)
  switch (entity_case()) {
    case kExternEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.extern_entry_;
      }
      break;
    }
    case kTableEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.table_entry_;
      }
      break;
    }
    case kActionProfileMember: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.action_profile_member_;
      }
      break;
    }
    case kActionProfileGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.action_profile_group_;
      }
      break;
    }
    case kMeterEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.meter_entry_;
      }
      break;
    }
    case kDirectMeterEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.direct_meter_entry_;
      }
      break;
    }
    case kCounterEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.counter_entry_;
      }
      break;
    }
    case kDirectCounterEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.direct_counter_entry_;
      }
      break;
    }
    case kPacketReplicationEngineEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.packet_replication_engine_entry_;
      }
      break;
    }
    case kValueSetEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.value_set_entry_;
      }
      break;
    }
    case kRegisterEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.register_entry_;
      }
      break;
    }
    case kDigestEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.digest_entry_;
      }
      break;
    }
    case kRuntimeReconfigEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.runtime_reconfig_entry_;
      }
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.ExternEntry extern_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extern_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.TableEntry table_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ActionProfileMember action_profile_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_profile_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ActionProfileGroup action_profile_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_profile_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.MeterEntry meter_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meter_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_meter_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.CounterEntry counter_entry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_counter_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_replication_engine_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ValueSetEntry value_set_entry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_set_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.RegisterEntry register_entry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DigestEntry digest_entry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.RuntimeReconfigEntry runtime_reconfig_entry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_reconfig_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.ExternEntry extern_entry = 1;
  if (_internal_has_extern_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::extern_entry(this), target, stream);
  }

  // .p4.v1.TableEntry table_entry = 2;
  if (_internal_has_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_entry(this), target, stream);
  }

  // .p4.v1.ActionProfileMember action_profile_member = 3;
  if (_internal_has_action_profile_member()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action_profile_member(this), target, stream);
  }

  // .p4.v1.ActionProfileGroup action_profile_group = 4;
  if (_internal_has_action_profile_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action_profile_group(this), target, stream);
  }

  // .p4.v1.MeterEntry meter_entry = 5;
  if (_internal_has_meter_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::meter_entry(this), target, stream);
  }

  // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
  if (_internal_has_direct_meter_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::direct_meter_entry(this), target, stream);
  }

  // .p4.v1.CounterEntry counter_entry = 7;
  if (_internal_has_counter_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::counter_entry(this), target, stream);
  }

  // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
  if (_internal_has_direct_counter_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::direct_counter_entry(this), target, stream);
  }

  // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
  if (_internal_has_packet_replication_engine_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::packet_replication_engine_entry(this), target, stream);
  }

  // .p4.v1.ValueSetEntry value_set_entry = 10;
  if (_internal_has_value_set_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::value_set_entry(this), target, stream);
  }

  // .p4.v1.RegisterEntry register_entry = 11;
  if (_internal_has_register_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::register_entry(this), target, stream);
  }

  // .p4.v1.DigestEntry digest_entry = 12;
  if (_internal_has_digest_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::digest_entry(this), target, stream);
  }

  // .p4.v1.RuntimeReconfigEntry runtime_reconfig_entry = 13;
  if (_internal_has_runtime_reconfig_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::runtime_reconfig_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Entity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_case()) {
    // .p4.v1.ExternEntry extern_entry = 1;
    case kExternEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.extern_entry_);
      break;
    }
    // .p4.v1.TableEntry table_entry = 2;
    case kTableEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.table_entry_);
      break;
    }
    // .p4.v1.ActionProfileMember action_profile_member = 3;
    case kActionProfileMember: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.action_profile_member_);
      break;
    }
    // .p4.v1.ActionProfileGroup action_profile_group = 4;
    case kActionProfileGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.action_profile_group_);
      break;
    }
    // .p4.v1.MeterEntry meter_entry = 5;
    case kMeterEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.meter_entry_);
      break;
    }
    // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
    case kDirectMeterEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.direct_meter_entry_);
      break;
    }
    // .p4.v1.CounterEntry counter_entry = 7;
    case kCounterEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.counter_entry_);
      break;
    }
    // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
    case kDirectCounterEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.direct_counter_entry_);
      break;
    }
    // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
    case kPacketReplicationEngineEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.packet_replication_engine_entry_);
      break;
    }
    // .p4.v1.ValueSetEntry value_set_entry = 10;
    case kValueSetEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.value_set_entry_);
      break;
    }
    // .p4.v1.RegisterEntry register_entry = 11;
    case kRegisterEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.register_entry_);
      break;
    }
    // .p4.v1.DigestEntry digest_entry = 12;
    case kDigestEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.digest_entry_);
      break;
    }
    // .p4.v1.RuntimeReconfigEntry runtime_reconfig_entry = 13;
    case kRuntimeReconfigEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.runtime_reconfig_entry_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Entity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity::GetClassData() const { return &_class_data_; }

void Entity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Entity *>(to)->MergeFrom(
      static_cast<const Entity &>(from));
}


void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_case()) {
    case kExternEntry: {
      _internal_mutable_extern_entry()->::p4::v1::ExternEntry::MergeFrom(from._internal_extern_entry());
      break;
    }
    case kTableEntry: {
      _internal_mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from._internal_table_entry());
      break;
    }
    case kActionProfileMember: {
      _internal_mutable_action_profile_member()->::p4::v1::ActionProfileMember::MergeFrom(from._internal_action_profile_member());
      break;
    }
    case kActionProfileGroup: {
      _internal_mutable_action_profile_group()->::p4::v1::ActionProfileGroup::MergeFrom(from._internal_action_profile_group());
      break;
    }
    case kMeterEntry: {
      _internal_mutable_meter_entry()->::p4::v1::MeterEntry::MergeFrom(from._internal_meter_entry());
      break;
    }
    case kDirectMeterEntry: {
      _internal_mutable_direct_meter_entry()->::p4::v1::DirectMeterEntry::MergeFrom(from._internal_direct_meter_entry());
      break;
    }
    case kCounterEntry: {
      _internal_mutable_counter_entry()->::p4::v1::CounterEntry::MergeFrom(from._internal_counter_entry());
      break;
    }
    case kDirectCounterEntry: {
      _internal_mutable_direct_counter_entry()->::p4::v1::DirectCounterEntry::MergeFrom(from._internal_direct_counter_entry());
      break;
    }
    case kPacketReplicationEngineEntry: {
      _internal_mutable_packet_replication_engine_entry()->::p4::v1::PacketReplicationEngineEntry::MergeFrom(from._internal_packet_replication_engine_entry());
      break;
    }
    case kValueSetEntry: {
      _internal_mutable_value_set_entry()->::p4::v1::ValueSetEntry::MergeFrom(from._internal_value_set_entry());
      break;
    }
    case kRegisterEntry: {
      _internal_mutable_register_entry()->::p4::v1::RegisterEntry::MergeFrom(from._internal_register_entry());
      break;
    }
    case kDigestEntry: {
      _internal_mutable_digest_entry()->::p4::v1::DigestEntry::MergeFrom(from._internal_digest_entry());
      break;
    }
    case kRuntimeReconfigEntry: {
      _internal_mutable_runtime_reconfig_entry()->::p4::v1::RuntimeReconfigEntry::MergeFrom(from._internal_runtime_reconfig_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[5]);
}

// ===================================================================

class RuntimeReconfigEntry::_Internal {
 public:
  static const ::p4::v1::RuntimeReconfigContent& runtime_reconfig_content(const RuntimeReconfigEntry* msg);
};

const ::p4::v1::RuntimeReconfigContent&
RuntimeReconfigEntry::_Internal::runtime_reconfig_content(const RuntimeReconfigEntry* msg) {
  return *msg->runtime_reconfig_content_;
}
RuntimeReconfigEntry::RuntimeReconfigEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.RuntimeReconfigEntry)
}
RuntimeReconfigEntry::RuntimeReconfigEntry(const RuntimeReconfigEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runtime_reconfig_content()) {
    runtime_reconfig_content_ = new ::p4::v1::RuntimeReconfigContent(*from.runtime_reconfig_content_);
  } else {
    runtime_reconfig_content_ = nullptr;
  }
  runtime_reconfig_type_ = from.runtime_reconfig_type_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.RuntimeReconfigEntry)
}

void RuntimeReconfigEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&runtime_reconfig_content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&runtime_reconfig_type_) -
    reinterpret_cast<char*>(&runtime_reconfig_content_)) + sizeof(runtime_reconfig_type_));
}

RuntimeReconfigEntry::~RuntimeReconfigEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.RuntimeReconfigEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeReconfigEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete runtime_reconfig_content_;
}

void RuntimeReconfigEntry::ArenaDtor(void* object) {
  RuntimeReconfigEntry* _this = reinterpret_cast< RuntimeReconfigEntry* >(object);
  (void)_this;
}
void RuntimeReconfigEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeReconfigEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeReconfigEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.RuntimeReconfigEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && runtime_reconfig_content_ != nullptr) {
    delete runtime_reconfig_content_;
  }
  runtime_reconfig_content_ = nullptr;
  runtime_reconfig_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeReconfigEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.RuntimeReconfigEntry.RuntimeReconfigType runtime_reconfig_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_runtime_reconfig_type(static_cast<::p4::v1::RuntimeReconfigEntry_RuntimeReconfigType>(val));
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.RuntimeReconfigContent runtime_reconfig_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_reconfig_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeReconfigEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.RuntimeReconfigEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.RuntimeReconfigEntry.RuntimeReconfigType runtime_reconfig_type = 1;
  if (this->_internal_runtime_reconfig_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_runtime_reconfig_type(), target);
  }

  // .p4.v1.RuntimeReconfigContent runtime_reconfig_content = 2;
  if (this->_internal_has_runtime_reconfig_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::runtime_reconfig_content(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.RuntimeReconfigEntry)
  return target;
}

size_t RuntimeReconfigEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.RuntimeReconfigEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.RuntimeReconfigContent runtime_reconfig_content = 2;
  if (this->_internal_has_runtime_reconfig_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_reconfig_content_);
  }

  // .p4.v1.RuntimeReconfigEntry.RuntimeReconfigType runtime_reconfig_type = 1;
  if (this->_internal_runtime_reconfig_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_runtime_reconfig_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeReconfigEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeReconfigEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeReconfigEntry::GetClassData() const { return &_class_data_; }

void RuntimeReconfigEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuntimeReconfigEntry *>(to)->MergeFrom(
      static_cast<const RuntimeReconfigEntry &>(from));
}


void RuntimeReconfigEntry::MergeFrom(const RuntimeReconfigEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.RuntimeReconfigEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_runtime_reconfig_content()) {
    _internal_mutable_runtime_reconfig_content()->::p4::v1::RuntimeReconfigContent::MergeFrom(from._internal_runtime_reconfig_content());
  }
  if (from._internal_runtime_reconfig_type() != 0) {
    _internal_set_runtime_reconfig_type(from._internal_runtime_reconfig_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeReconfigEntry::CopyFrom(const RuntimeReconfigEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.RuntimeReconfigEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeReconfigEntry::IsInitialized() const {
  return true;
}

void RuntimeReconfigEntry::InternalSwap(RuntimeReconfigEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeReconfigEntry, runtime_reconfig_type_)
      + sizeof(RuntimeReconfigEntry::runtime_reconfig_type_)
      - PROTOBUF_FIELD_OFFSET(RuntimeReconfigEntry, runtime_reconfig_content_)>(
          reinterpret_cast<char*>(&runtime_reconfig_content_),
          reinterpret_cast<char*>(&other->runtime_reconfig_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeReconfigEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[6]);
}

// ===================================================================

class RuntimeReconfigContent::_Internal {
 public:
  static const ::p4::v1::InitP4ObjectsNewEntry& init_p4objects_new_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::InsertTableEntry& insert_table_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::ChangeTableEntry& change_table_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::DeleteTableEntry& delete_table_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::InsertConditionalEntry& insert_conditional_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::ChangeConditionalEntry& change_conditional_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::DeleteConditionalEntry& delete_conditional_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::InsertFlexEntry& insert_flex_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::ChangeFlexEntry& change_flex_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::DeleteFlexEntry& delete_flex_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::InsertRegisterArrayEntry& insert_register_array_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::ChangeRegisterArrayEntry& change_register_array_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::DeleteRegisterArrayEntry& delete_register_array_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::TriggerEntry& trigger_entry(const RuntimeReconfigContent* msg);
  static const ::p4::v1::ChangeInitEntry& change_init_entry(const RuntimeReconfigContent* msg);
};

const ::p4::v1::InitP4ObjectsNewEntry&
RuntimeReconfigContent::_Internal::init_p4objects_new_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.init_p4objects_new_entry_;
}
const ::p4::v1::InsertTableEntry&
RuntimeReconfigContent::_Internal::insert_table_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.insert_table_entry_;
}
const ::p4::v1::ChangeTableEntry&
RuntimeReconfigContent::_Internal::change_table_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.change_table_entry_;
}
const ::p4::v1::DeleteTableEntry&
RuntimeReconfigContent::_Internal::delete_table_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.delete_table_entry_;
}
const ::p4::v1::InsertConditionalEntry&
RuntimeReconfigContent::_Internal::insert_conditional_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.insert_conditional_entry_;
}
const ::p4::v1::ChangeConditionalEntry&
RuntimeReconfigContent::_Internal::change_conditional_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.change_conditional_entry_;
}
const ::p4::v1::DeleteConditionalEntry&
RuntimeReconfigContent::_Internal::delete_conditional_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.delete_conditional_entry_;
}
const ::p4::v1::InsertFlexEntry&
RuntimeReconfigContent::_Internal::insert_flex_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.insert_flex_entry_;
}
const ::p4::v1::ChangeFlexEntry&
RuntimeReconfigContent::_Internal::change_flex_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.change_flex_entry_;
}
const ::p4::v1::DeleteFlexEntry&
RuntimeReconfigContent::_Internal::delete_flex_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.delete_flex_entry_;
}
const ::p4::v1::InsertRegisterArrayEntry&
RuntimeReconfigContent::_Internal::insert_register_array_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.insert_register_array_entry_;
}
const ::p4::v1::ChangeRegisterArrayEntry&
RuntimeReconfigContent::_Internal::change_register_array_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.change_register_array_entry_;
}
const ::p4::v1::DeleteRegisterArrayEntry&
RuntimeReconfigContent::_Internal::delete_register_array_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.delete_register_array_entry_;
}
const ::p4::v1::TriggerEntry&
RuntimeReconfigContent::_Internal::trigger_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.trigger_entry_;
}
const ::p4::v1::ChangeInitEntry&
RuntimeReconfigContent::_Internal::change_init_entry(const RuntimeReconfigContent* msg) {
  return *msg->content_.change_init_entry_;
}
void RuntimeReconfigContent::set_allocated_init_p4objects_new_entry(::p4::v1::InitP4ObjectsNewEntry* init_p4objects_new_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (init_p4objects_new_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::InitP4ObjectsNewEntry>::GetOwningArena(init_p4objects_new_entry);
    if (message_arena != submessage_arena) {
      init_p4objects_new_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_p4objects_new_entry, submessage_arena);
    }
    set_has_init_p4objects_new_entry();
    content_.init_p4objects_new_entry_ = init_p4objects_new_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.init_p4objects_new_entry)
}
void RuntimeReconfigContent::set_allocated_insert_table_entry(::p4::v1::InsertTableEntry* insert_table_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (insert_table_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::InsertTableEntry>::GetOwningArena(insert_table_entry);
    if (message_arena != submessage_arena) {
      insert_table_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_table_entry, submessage_arena);
    }
    set_has_insert_table_entry();
    content_.insert_table_entry_ = insert_table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.insert_table_entry)
}
void RuntimeReconfigContent::set_allocated_change_table_entry(::p4::v1::ChangeTableEntry* change_table_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (change_table_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ChangeTableEntry>::GetOwningArena(change_table_entry);
    if (message_arena != submessage_arena) {
      change_table_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_table_entry, submessage_arena);
    }
    set_has_change_table_entry();
    content_.change_table_entry_ = change_table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.change_table_entry)
}
void RuntimeReconfigContent::set_allocated_delete_table_entry(::p4::v1::DeleteTableEntry* delete_table_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (delete_table_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DeleteTableEntry>::GetOwningArena(delete_table_entry);
    if (message_arena != submessage_arena) {
      delete_table_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_table_entry, submessage_arena);
    }
    set_has_delete_table_entry();
    content_.delete_table_entry_ = delete_table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.delete_table_entry)
}
void RuntimeReconfigContent::set_allocated_insert_conditional_entry(::p4::v1::InsertConditionalEntry* insert_conditional_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (insert_conditional_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::InsertConditionalEntry>::GetOwningArena(insert_conditional_entry);
    if (message_arena != submessage_arena) {
      insert_conditional_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_conditional_entry, submessage_arena);
    }
    set_has_insert_conditional_entry();
    content_.insert_conditional_entry_ = insert_conditional_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.insert_conditional_entry)
}
void RuntimeReconfigContent::set_allocated_change_conditional_entry(::p4::v1::ChangeConditionalEntry* change_conditional_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (change_conditional_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ChangeConditionalEntry>::GetOwningArena(change_conditional_entry);
    if (message_arena != submessage_arena) {
      change_conditional_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_conditional_entry, submessage_arena);
    }
    set_has_change_conditional_entry();
    content_.change_conditional_entry_ = change_conditional_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.change_conditional_entry)
}
void RuntimeReconfigContent::set_allocated_delete_conditional_entry(::p4::v1::DeleteConditionalEntry* delete_conditional_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (delete_conditional_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DeleteConditionalEntry>::GetOwningArena(delete_conditional_entry);
    if (message_arena != submessage_arena) {
      delete_conditional_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_conditional_entry, submessage_arena);
    }
    set_has_delete_conditional_entry();
    content_.delete_conditional_entry_ = delete_conditional_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.delete_conditional_entry)
}
void RuntimeReconfigContent::set_allocated_insert_flex_entry(::p4::v1::InsertFlexEntry* insert_flex_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (insert_flex_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::InsertFlexEntry>::GetOwningArena(insert_flex_entry);
    if (message_arena != submessage_arena) {
      insert_flex_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_flex_entry, submessage_arena);
    }
    set_has_insert_flex_entry();
    content_.insert_flex_entry_ = insert_flex_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.insert_flex_entry)
}
void RuntimeReconfigContent::set_allocated_change_flex_entry(::p4::v1::ChangeFlexEntry* change_flex_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (change_flex_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ChangeFlexEntry>::GetOwningArena(change_flex_entry);
    if (message_arena != submessage_arena) {
      change_flex_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_flex_entry, submessage_arena);
    }
    set_has_change_flex_entry();
    content_.change_flex_entry_ = change_flex_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.change_flex_entry)
}
void RuntimeReconfigContent::set_allocated_delete_flex_entry(::p4::v1::DeleteFlexEntry* delete_flex_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (delete_flex_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DeleteFlexEntry>::GetOwningArena(delete_flex_entry);
    if (message_arena != submessage_arena) {
      delete_flex_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_flex_entry, submessage_arena);
    }
    set_has_delete_flex_entry();
    content_.delete_flex_entry_ = delete_flex_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.delete_flex_entry)
}
void RuntimeReconfigContent::set_allocated_insert_register_array_entry(::p4::v1::InsertRegisterArrayEntry* insert_register_array_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (insert_register_array_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::InsertRegisterArrayEntry>::GetOwningArena(insert_register_array_entry);
    if (message_arena != submessage_arena) {
      insert_register_array_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_register_array_entry, submessage_arena);
    }
    set_has_insert_register_array_entry();
    content_.insert_register_array_entry_ = insert_register_array_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.insert_register_array_entry)
}
void RuntimeReconfigContent::set_allocated_change_register_array_entry(::p4::v1::ChangeRegisterArrayEntry* change_register_array_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (change_register_array_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ChangeRegisterArrayEntry>::GetOwningArena(change_register_array_entry);
    if (message_arena != submessage_arena) {
      change_register_array_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_register_array_entry, submessage_arena);
    }
    set_has_change_register_array_entry();
    content_.change_register_array_entry_ = change_register_array_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.change_register_array_entry)
}
void RuntimeReconfigContent::set_allocated_delete_register_array_entry(::p4::v1::DeleteRegisterArrayEntry* delete_register_array_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (delete_register_array_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DeleteRegisterArrayEntry>::GetOwningArena(delete_register_array_entry);
    if (message_arena != submessage_arena) {
      delete_register_array_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_register_array_entry, submessage_arena);
    }
    set_has_delete_register_array_entry();
    content_.delete_register_array_entry_ = delete_register_array_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.delete_register_array_entry)
}
void RuntimeReconfigContent::set_allocated_trigger_entry(::p4::v1::TriggerEntry* trigger_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (trigger_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::TriggerEntry>::GetOwningArena(trigger_entry);
    if (message_arena != submessage_arena) {
      trigger_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_entry, submessage_arena);
    }
    set_has_trigger_entry();
    content_.trigger_entry_ = trigger_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.trigger_entry)
}
void RuntimeReconfigContent::set_allocated_change_init_entry(::p4::v1::ChangeInitEntry* change_init_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (change_init_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ChangeInitEntry>::GetOwningArena(change_init_entry);
    if (message_arena != submessage_arena) {
      change_init_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_init_entry, submessage_arena);
    }
    set_has_change_init_entry();
    content_.change_init_entry_ = change_init_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RuntimeReconfigContent.change_init_entry)
}
RuntimeReconfigContent::RuntimeReconfigContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.RuntimeReconfigContent)
}
RuntimeReconfigContent::RuntimeReconfigContent(const RuntimeReconfigContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kInitP4ObjectsNewEntry: {
      _internal_mutable_init_p4objects_new_entry()->::p4::v1::InitP4ObjectsNewEntry::MergeFrom(from._internal_init_p4objects_new_entry());
      break;
    }
    case kInsertTableEntry: {
      _internal_mutable_insert_table_entry()->::p4::v1::InsertTableEntry::MergeFrom(from._internal_insert_table_entry());
      break;
    }
    case kChangeTableEntry: {
      _internal_mutable_change_table_entry()->::p4::v1::ChangeTableEntry::MergeFrom(from._internal_change_table_entry());
      break;
    }
    case kDeleteTableEntry: {
      _internal_mutable_delete_table_entry()->::p4::v1::DeleteTableEntry::MergeFrom(from._internal_delete_table_entry());
      break;
    }
    case kInsertConditionalEntry: {
      _internal_mutable_insert_conditional_entry()->::p4::v1::InsertConditionalEntry::MergeFrom(from._internal_insert_conditional_entry());
      break;
    }
    case kChangeConditionalEntry: {
      _internal_mutable_change_conditional_entry()->::p4::v1::ChangeConditionalEntry::MergeFrom(from._internal_change_conditional_entry());
      break;
    }
    case kDeleteConditionalEntry: {
      _internal_mutable_delete_conditional_entry()->::p4::v1::DeleteConditionalEntry::MergeFrom(from._internal_delete_conditional_entry());
      break;
    }
    case kInsertFlexEntry: {
      _internal_mutable_insert_flex_entry()->::p4::v1::InsertFlexEntry::MergeFrom(from._internal_insert_flex_entry());
      break;
    }
    case kChangeFlexEntry: {
      _internal_mutable_change_flex_entry()->::p4::v1::ChangeFlexEntry::MergeFrom(from._internal_change_flex_entry());
      break;
    }
    case kDeleteFlexEntry: {
      _internal_mutable_delete_flex_entry()->::p4::v1::DeleteFlexEntry::MergeFrom(from._internal_delete_flex_entry());
      break;
    }
    case kInsertRegisterArrayEntry: {
      _internal_mutable_insert_register_array_entry()->::p4::v1::InsertRegisterArrayEntry::MergeFrom(from._internal_insert_register_array_entry());
      break;
    }
    case kChangeRegisterArrayEntry: {
      _internal_mutable_change_register_array_entry()->::p4::v1::ChangeRegisterArrayEntry::MergeFrom(from._internal_change_register_array_entry());
      break;
    }
    case kDeleteRegisterArrayEntry: {
      _internal_mutable_delete_register_array_entry()->::p4::v1::DeleteRegisterArrayEntry::MergeFrom(from._internal_delete_register_array_entry());
      break;
    }
    case kTriggerEntry: {
      _internal_mutable_trigger_entry()->::p4::v1::TriggerEntry::MergeFrom(from._internal_trigger_entry());
      break;
    }
    case kChangeInitEntry: {
      _internal_mutable_change_init_entry()->::p4::v1::ChangeInitEntry::MergeFrom(from._internal_change_init_entry());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.RuntimeReconfigContent)
}

void RuntimeReconfigContent::SharedCtor() {
clear_has_content();
}

RuntimeReconfigContent::~RuntimeReconfigContent() {
  // @@protoc_insertion_point(destructor:p4.v1.RuntimeReconfigContent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeReconfigContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void RuntimeReconfigContent::ArenaDtor(void* object) {
  RuntimeReconfigContent* _this = reinterpret_cast< RuntimeReconfigContent* >(object);
  (void)_this;
}
void RuntimeReconfigContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeReconfigContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeReconfigContent::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.RuntimeReconfigContent)
  switch (content_case()) {
    case kInitP4ObjectsNewEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.init_p4objects_new_entry_;
      }
      break;
    }
    case kInsertTableEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.insert_table_entry_;
      }
      break;
    }
    case kChangeTableEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.change_table_entry_;
      }
      break;
    }
    case kDeleteTableEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.delete_table_entry_;
      }
      break;
    }
    case kInsertConditionalEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.insert_conditional_entry_;
      }
      break;
    }
    case kChangeConditionalEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.change_conditional_entry_;
      }
      break;
    }
    case kDeleteConditionalEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.delete_conditional_entry_;
      }
      break;
    }
    case kInsertFlexEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.insert_flex_entry_;
      }
      break;
    }
    case kChangeFlexEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.change_flex_entry_;
      }
      break;
    }
    case kDeleteFlexEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.delete_flex_entry_;
      }
      break;
    }
    case kInsertRegisterArrayEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.insert_register_array_entry_;
      }
      break;
    }
    case kChangeRegisterArrayEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.change_register_array_entry_;
      }
      break;
    }
    case kDeleteRegisterArrayEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.delete_register_array_entry_;
      }
      break;
    }
    case kTriggerEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.trigger_entry_;
      }
      break;
    }
    case kChangeInitEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.change_init_entry_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void RuntimeReconfigContent::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.RuntimeReconfigContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeReconfigContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.InitP4ObjectsNewEntry init_p4objects_new_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_p4objects_new_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.InsertTableEntry insert_table_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeTableEntry change_table_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DeleteTableEntry delete_table_entry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.InsertConditionalEntry insert_conditional_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_conditional_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeConditionalEntry change_conditional_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_conditional_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DeleteConditionalEntry delete_conditional_entry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_conditional_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.InsertFlexEntry insert_flex_entry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_flex_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeFlexEntry change_flex_entry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_flex_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DeleteFlexEntry delete_flex_entry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_flex_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.InsertRegisterArrayEntry insert_register_array_entry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_register_array_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeRegisterArrayEntry change_register_array_entry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_register_array_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DeleteRegisterArrayEntry delete_register_array_entry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_register_array_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.TriggerEntry trigger_entry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeInitEntry change_init_entry = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_init_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeReconfigContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.RuntimeReconfigContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.InitP4ObjectsNewEntry init_p4objects_new_entry = 1;
  if (_internal_has_init_p4objects_new_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::init_p4objects_new_entry(this), target, stream);
  }

  // .p4.v1.InsertTableEntry insert_table_entry = 2;
  if (_internal_has_insert_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::insert_table_entry(this), target, stream);
  }

  // .p4.v1.ChangeTableEntry change_table_entry = 3;
  if (_internal_has_change_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::change_table_entry(this), target, stream);
  }

  // .p4.v1.DeleteTableEntry delete_table_entry = 4;
  if (_internal_has_delete_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::delete_table_entry(this), target, stream);
  }

  // .p4.v1.InsertConditionalEntry insert_conditional_entry = 5;
  if (_internal_has_insert_conditional_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::insert_conditional_entry(this), target, stream);
  }

  // .p4.v1.ChangeConditionalEntry change_conditional_entry = 6;
  if (_internal_has_change_conditional_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::change_conditional_entry(this), target, stream);
  }

  // .p4.v1.DeleteConditionalEntry delete_conditional_entry = 7;
  if (_internal_has_delete_conditional_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delete_conditional_entry(this), target, stream);
  }

  // .p4.v1.InsertFlexEntry insert_flex_entry = 8;
  if (_internal_has_insert_flex_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::insert_flex_entry(this), target, stream);
  }

  // .p4.v1.ChangeFlexEntry change_flex_entry = 9;
  if (_internal_has_change_flex_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::change_flex_entry(this), target, stream);
  }

  // .p4.v1.DeleteFlexEntry delete_flex_entry = 10;
  if (_internal_has_delete_flex_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::delete_flex_entry(this), target, stream);
  }

  // .p4.v1.InsertRegisterArrayEntry insert_register_array_entry = 11;
  if (_internal_has_insert_register_array_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::insert_register_array_entry(this), target, stream);
  }

  // .p4.v1.ChangeRegisterArrayEntry change_register_array_entry = 12;
  if (_internal_has_change_register_array_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::change_register_array_entry(this), target, stream);
  }

  // .p4.v1.DeleteRegisterArrayEntry delete_register_array_entry = 13;
  if (_internal_has_delete_register_array_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::delete_register_array_entry(this), target, stream);
  }

  // .p4.v1.TriggerEntry trigger_entry = 14;
  if (_internal_has_trigger_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::trigger_entry(this), target, stream);
  }

  // .p4.v1.ChangeInitEntry change_init_entry = 15;
  if (_internal_has_change_init_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::change_init_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.RuntimeReconfigContent)
  return target;
}

size_t RuntimeReconfigContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.RuntimeReconfigContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .p4.v1.InitP4ObjectsNewEntry init_p4objects_new_entry = 1;
    case kInitP4ObjectsNewEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.init_p4objects_new_entry_);
      break;
    }
    // .p4.v1.InsertTableEntry insert_table_entry = 2;
    case kInsertTableEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.insert_table_entry_);
      break;
    }
    // .p4.v1.ChangeTableEntry change_table_entry = 3;
    case kChangeTableEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.change_table_entry_);
      break;
    }
    // .p4.v1.DeleteTableEntry delete_table_entry = 4;
    case kDeleteTableEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.delete_table_entry_);
      break;
    }
    // .p4.v1.InsertConditionalEntry insert_conditional_entry = 5;
    case kInsertConditionalEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.insert_conditional_entry_);
      break;
    }
    // .p4.v1.ChangeConditionalEntry change_conditional_entry = 6;
    case kChangeConditionalEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.change_conditional_entry_);
      break;
    }
    // .p4.v1.DeleteConditionalEntry delete_conditional_entry = 7;
    case kDeleteConditionalEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.delete_conditional_entry_);
      break;
    }
    // .p4.v1.InsertFlexEntry insert_flex_entry = 8;
    case kInsertFlexEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.insert_flex_entry_);
      break;
    }
    // .p4.v1.ChangeFlexEntry change_flex_entry = 9;
    case kChangeFlexEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.change_flex_entry_);
      break;
    }
    // .p4.v1.DeleteFlexEntry delete_flex_entry = 10;
    case kDeleteFlexEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.delete_flex_entry_);
      break;
    }
    // .p4.v1.InsertRegisterArrayEntry insert_register_array_entry = 11;
    case kInsertRegisterArrayEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.insert_register_array_entry_);
      break;
    }
    // .p4.v1.ChangeRegisterArrayEntry change_register_array_entry = 12;
    case kChangeRegisterArrayEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.change_register_array_entry_);
      break;
    }
    // .p4.v1.DeleteRegisterArrayEntry delete_register_array_entry = 13;
    case kDeleteRegisterArrayEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.delete_register_array_entry_);
      break;
    }
    // .p4.v1.TriggerEntry trigger_entry = 14;
    case kTriggerEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.trigger_entry_);
      break;
    }
    // .p4.v1.ChangeInitEntry change_init_entry = 15;
    case kChangeInitEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.change_init_entry_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeReconfigContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeReconfigContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeReconfigContent::GetClassData() const { return &_class_data_; }

void RuntimeReconfigContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuntimeReconfigContent *>(to)->MergeFrom(
      static_cast<const RuntimeReconfigContent &>(from));
}


void RuntimeReconfigContent::MergeFrom(const RuntimeReconfigContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.RuntimeReconfigContent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kInitP4ObjectsNewEntry: {
      _internal_mutable_init_p4objects_new_entry()->::p4::v1::InitP4ObjectsNewEntry::MergeFrom(from._internal_init_p4objects_new_entry());
      break;
    }
    case kInsertTableEntry: {
      _internal_mutable_insert_table_entry()->::p4::v1::InsertTableEntry::MergeFrom(from._internal_insert_table_entry());
      break;
    }
    case kChangeTableEntry: {
      _internal_mutable_change_table_entry()->::p4::v1::ChangeTableEntry::MergeFrom(from._internal_change_table_entry());
      break;
    }
    case kDeleteTableEntry: {
      _internal_mutable_delete_table_entry()->::p4::v1::DeleteTableEntry::MergeFrom(from._internal_delete_table_entry());
      break;
    }
    case kInsertConditionalEntry: {
      _internal_mutable_insert_conditional_entry()->::p4::v1::InsertConditionalEntry::MergeFrom(from._internal_insert_conditional_entry());
      break;
    }
    case kChangeConditionalEntry: {
      _internal_mutable_change_conditional_entry()->::p4::v1::ChangeConditionalEntry::MergeFrom(from._internal_change_conditional_entry());
      break;
    }
    case kDeleteConditionalEntry: {
      _internal_mutable_delete_conditional_entry()->::p4::v1::DeleteConditionalEntry::MergeFrom(from._internal_delete_conditional_entry());
      break;
    }
    case kInsertFlexEntry: {
      _internal_mutable_insert_flex_entry()->::p4::v1::InsertFlexEntry::MergeFrom(from._internal_insert_flex_entry());
      break;
    }
    case kChangeFlexEntry: {
      _internal_mutable_change_flex_entry()->::p4::v1::ChangeFlexEntry::MergeFrom(from._internal_change_flex_entry());
      break;
    }
    case kDeleteFlexEntry: {
      _internal_mutable_delete_flex_entry()->::p4::v1::DeleteFlexEntry::MergeFrom(from._internal_delete_flex_entry());
      break;
    }
    case kInsertRegisterArrayEntry: {
      _internal_mutable_insert_register_array_entry()->::p4::v1::InsertRegisterArrayEntry::MergeFrom(from._internal_insert_register_array_entry());
      break;
    }
    case kChangeRegisterArrayEntry: {
      _internal_mutable_change_register_array_entry()->::p4::v1::ChangeRegisterArrayEntry::MergeFrom(from._internal_change_register_array_entry());
      break;
    }
    case kDeleteRegisterArrayEntry: {
      _internal_mutable_delete_register_array_entry()->::p4::v1::DeleteRegisterArrayEntry::MergeFrom(from._internal_delete_register_array_entry());
      break;
    }
    case kTriggerEntry: {
      _internal_mutable_trigger_entry()->::p4::v1::TriggerEntry::MergeFrom(from._internal_trigger_entry());
      break;
    }
    case kChangeInitEntry: {
      _internal_mutable_change_init_entry()->::p4::v1::ChangeInitEntry::MergeFrom(from._internal_change_init_entry());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeReconfigContent::CopyFrom(const RuntimeReconfigContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.RuntimeReconfigContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeReconfigContent::IsInitialized() const {
  return true;
}

void RuntimeReconfigContent::InternalSwap(RuntimeReconfigContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeReconfigContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[7]);
}

// ===================================================================

class InitP4ObjectsNewEntry::_Internal {
 public:
};

InitP4ObjectsNewEntry::InitP4ObjectsNewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.InitP4ObjectsNewEntry)
}
InitP4ObjectsNewEntry::InitP4ObjectsNewEntry(const InitP4ObjectsNewEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p4objects_new_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_p4objects_new_json().empty()) {
    p4objects_new_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_p4objects_new_json(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.InitP4ObjectsNewEntry)
}

void InitP4ObjectsNewEntry::SharedCtor() {
p4objects_new_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InitP4ObjectsNewEntry::~InitP4ObjectsNewEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.InitP4ObjectsNewEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitP4ObjectsNewEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  p4objects_new_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitP4ObjectsNewEntry::ArenaDtor(void* object) {
  InitP4ObjectsNewEntry* _this = reinterpret_cast< InitP4ObjectsNewEntry* >(object);
  (void)_this;
}
void InitP4ObjectsNewEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitP4ObjectsNewEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitP4ObjectsNewEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.InitP4ObjectsNewEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p4objects_new_json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitP4ObjectsNewEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes p4objects_new_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_p4objects_new_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitP4ObjectsNewEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.InitP4ObjectsNewEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes p4objects_new_json = 1;
  if (!this->_internal_p4objects_new_json().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_p4objects_new_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.InitP4ObjectsNewEntry)
  return target;
}

size_t InitP4ObjectsNewEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.InitP4ObjectsNewEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes p4objects_new_json = 1;
  if (!this->_internal_p4objects_new_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p4objects_new_json());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitP4ObjectsNewEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitP4ObjectsNewEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitP4ObjectsNewEntry::GetClassData() const { return &_class_data_; }

void InitP4ObjectsNewEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitP4ObjectsNewEntry *>(to)->MergeFrom(
      static_cast<const InitP4ObjectsNewEntry &>(from));
}


void InitP4ObjectsNewEntry::MergeFrom(const InitP4ObjectsNewEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.InitP4ObjectsNewEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p4objects_new_json().empty()) {
    _internal_set_p4objects_new_json(from._internal_p4objects_new_json());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitP4ObjectsNewEntry::CopyFrom(const InitP4ObjectsNewEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.InitP4ObjectsNewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitP4ObjectsNewEntry::IsInitialized() const {
  return true;
}

void InitP4ObjectsNewEntry::InternalSwap(InitP4ObjectsNewEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &p4objects_new_json_, lhs_arena,
      &other->p4objects_new_json_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitP4ObjectsNewEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[8]);
}

// ===================================================================

class InsertTableEntry::_Internal {
 public:
};

InsertTableEntry::InsertTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.InsertTableEntry)
}
InsertTableEntry::InsertTableEntry(const InsertTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.InsertTableEntry)
}

void InsertTableEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsertTableEntry::~InsertTableEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.InsertTableEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertTableEntry::ArenaDtor(void* object) {
  InsertTableEntry* _this = reinterpret_cast< InsertTableEntry* >(object);
  (void)_this;
}
void InsertTableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.InsertTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertTableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertTableEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertTableEntry.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertTableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.InsertTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertTableEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertTableEntry.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.InsertTableEntry)
  return target;
}

size_t InsertTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.InsertTableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertTableEntry::GetClassData() const { return &_class_data_; }

void InsertTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertTableEntry *>(to)->MergeFrom(
      static_cast<const InsertTableEntry &>(from));
}


void InsertTableEntry::MergeFrom(const InsertTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.InsertTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertTableEntry::CopyFrom(const InsertTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.InsertTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertTableEntry::IsInitialized() const {
  return true;
}

void InsertTableEntry::InternalSwap(InsertTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertTableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[9]);
}

// ===================================================================

class ChangeTableEntry::_Internal {
 public:
};

ChangeTableEntry::ChangeTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ChangeTableEntry)
}
ChangeTableEntry::ChangeTableEntry(const ChangeTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  edge_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edge_name().empty()) {
    edge_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edge_name(), 
      GetArenaForAllocation());
  }
  table_name_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name_next().empty()) {
    table_name_next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name_next(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ChangeTableEntry)
}

void ChangeTableEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edge_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeTableEntry::~ChangeTableEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ChangeTableEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edge_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeTableEntry::ArenaDtor(void* object) {
  ChangeTableEntry* _this = reinterpret_cast< ChangeTableEntry* >(object);
  (void)_this;
}
void ChangeTableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ChangeTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  edge_name_.ClearToEmpty();
  table_name_next_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeTableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeTableEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeTableEntry.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string edge_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_edge_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeTableEntry.edge_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name_next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_table_name_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeTableEntry.table_name_next"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeTableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ChangeTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeTableEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeTableEntry.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // string edge_name = 3;
  if (!this->_internal_edge_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edge_name().data(), static_cast<int>(this->_internal_edge_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeTableEntry.edge_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_edge_name(), target);
  }

  // string table_name_next = 4;
  if (!this->_internal_table_name_next().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name_next().data(), static_cast<int>(this->_internal_table_name_next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeTableEntry.table_name_next");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_table_name_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ChangeTableEntry)
  return target;
}

size_t ChangeTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ChangeTableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string edge_name = 3;
  if (!this->_internal_edge_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edge_name());
  }

  // string table_name_next = 4;
  if (!this->_internal_table_name_next().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name_next());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeTableEntry::GetClassData() const { return &_class_data_; }

void ChangeTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeTableEntry *>(to)->MergeFrom(
      static_cast<const ChangeTableEntry &>(from));
}


void ChangeTableEntry::MergeFrom(const ChangeTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ChangeTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_edge_name().empty()) {
    _internal_set_edge_name(from._internal_edge_name());
  }
  if (!from._internal_table_name_next().empty()) {
    _internal_set_table_name_next(from._internal_table_name_next());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeTableEntry::CopyFrom(const ChangeTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ChangeTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTableEntry::IsInitialized() const {
  return true;
}

void ChangeTableEntry::InternalSwap(ChangeTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edge_name_, lhs_arena,
      &other->edge_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_next_, lhs_arena,
      &other->table_name_next_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeTableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[10]);
}

// ===================================================================

class DeleteTableEntry::_Internal {
 public:
};

DeleteTableEntry::DeleteTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DeleteTableEntry)
}
DeleteTableEntry::DeleteTableEntry(const DeleteTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DeleteTableEntry)
}

void DeleteTableEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTableEntry::~DeleteTableEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DeleteTableEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTableEntry::ArenaDtor(void* object) {
  DeleteTableEntry* _this = reinterpret_cast< DeleteTableEntry* >(object);
  (void)_this;
}
void DeleteTableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DeleteTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteTableEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteTableEntry.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DeleteTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteTableEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteTableEntry.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DeleteTableEntry)
  return target;
}

size_t DeleteTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DeleteTableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTableEntry::GetClassData() const { return &_class_data_; }

void DeleteTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTableEntry *>(to)->MergeFrom(
      static_cast<const DeleteTableEntry &>(from));
}


void DeleteTableEntry::MergeFrom(const DeleteTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DeleteTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTableEntry::CopyFrom(const DeleteTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DeleteTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableEntry::IsInitialized() const {
  return true;
}

void DeleteTableEntry::InternalSwap(DeleteTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[11]);
}

// ===================================================================

class InsertConditionalEntry::_Internal {
 public:
};

InsertConditionalEntry::InsertConditionalEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.InsertConditionalEntry)
}
InsertConditionalEntry::InsertConditionalEntry(const InsertConditionalEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch_name().empty()) {
    branch_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.InsertConditionalEntry)
}

void InsertConditionalEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsertConditionalEntry::~InsertConditionalEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.InsertConditionalEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertConditionalEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertConditionalEntry::ArenaDtor(void* object) {
  InsertConditionalEntry* _this = reinterpret_cast< InsertConditionalEntry* >(object);
  (void)_this;
}
void InsertConditionalEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertConditionalEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertConditionalEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.InsertConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  branch_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertConditionalEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertConditionalEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string branch_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_branch_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertConditionalEntry.branch_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertConditionalEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.InsertConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertConditionalEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch_name().data(), static_cast<int>(this->_internal_branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertConditionalEntry.branch_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_branch_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.InsertConditionalEntry)
  return target;
}

size_t InsertConditionalEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.InsertConditionalEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertConditionalEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertConditionalEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertConditionalEntry::GetClassData() const { return &_class_data_; }

void InsertConditionalEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertConditionalEntry *>(to)->MergeFrom(
      static_cast<const InsertConditionalEntry &>(from));
}


void InsertConditionalEntry::MergeFrom(const InsertConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.InsertConditionalEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_branch_name().empty()) {
    _internal_set_branch_name(from._internal_branch_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertConditionalEntry::CopyFrom(const InsertConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.InsertConditionalEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertConditionalEntry::IsInitialized() const {
  return true;
}

void InsertConditionalEntry::InternalSwap(InsertConditionalEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_name_, lhs_arena,
      &other->branch_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertConditionalEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[12]);
}

// ===================================================================

class ChangeConditionalEntry::_Internal {
 public:
};

ChangeConditionalEntry::ChangeConditionalEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ChangeConditionalEntry)
}
ChangeConditionalEntry::ChangeConditionalEntry(const ChangeConditionalEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch_name().empty()) {
    branch_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch_name(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  true_or_false_next_ = from.true_or_false_next_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ChangeConditionalEntry)
}

void ChangeConditionalEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
true_or_false_next_ = false;
}

ChangeConditionalEntry::~ChangeConditionalEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ChangeConditionalEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeConditionalEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeConditionalEntry::ArenaDtor(void* object) {
  ChangeConditionalEntry* _this = reinterpret_cast< ChangeConditionalEntry* >(object);
  (void)_this;
}
void ChangeConditionalEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeConditionalEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeConditionalEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ChangeConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  branch_name_.ClearToEmpty();
  node_name_.ClearToEmpty();
  true_or_false_next_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeConditionalEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeConditionalEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string branch_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_branch_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeConditionalEntry.branch_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool true_or_false_next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          true_or_false_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeConditionalEntry.node_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeConditionalEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ChangeConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeConditionalEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch_name().data(), static_cast<int>(this->_internal_branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeConditionalEntry.branch_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_branch_name(), target);
  }

  // bool true_or_false_next = 3;
  if (this->_internal_true_or_false_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_true_or_false_next(), target);
  }

  // string node_name = 4;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeConditionalEntry.node_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ChangeConditionalEntry)
  return target;
}

size_t ChangeConditionalEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ChangeConditionalEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch_name());
  }

  // string node_name = 4;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // bool true_or_false_next = 3;
  if (this->_internal_true_or_false_next() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeConditionalEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeConditionalEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeConditionalEntry::GetClassData() const { return &_class_data_; }

void ChangeConditionalEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeConditionalEntry *>(to)->MergeFrom(
      static_cast<const ChangeConditionalEntry &>(from));
}


void ChangeConditionalEntry::MergeFrom(const ChangeConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ChangeConditionalEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_branch_name().empty()) {
    _internal_set_branch_name(from._internal_branch_name());
  }
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_true_or_false_next() != 0) {
    _internal_set_true_or_false_next(from._internal_true_or_false_next());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeConditionalEntry::CopyFrom(const ChangeConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ChangeConditionalEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConditionalEntry::IsInitialized() const {
  return true;
}

void ChangeConditionalEntry::InternalSwap(ChangeConditionalEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_name_, lhs_arena,
      &other->branch_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, lhs_arena,
      &other->node_name_, rhs_arena
  );
  swap(true_or_false_next_, other->true_or_false_next_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeConditionalEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[13]);
}

// ===================================================================

class DeleteConditionalEntry::_Internal {
 public:
};

DeleteConditionalEntry::DeleteConditionalEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DeleteConditionalEntry)
}
DeleteConditionalEntry::DeleteConditionalEntry(const DeleteConditionalEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch_name().empty()) {
    branch_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DeleteConditionalEntry)
}

void DeleteConditionalEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteConditionalEntry::~DeleteConditionalEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DeleteConditionalEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteConditionalEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteConditionalEntry::ArenaDtor(void* object) {
  DeleteConditionalEntry* _this = reinterpret_cast< DeleteConditionalEntry* >(object);
  (void)_this;
}
void DeleteConditionalEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteConditionalEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteConditionalEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DeleteConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  branch_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConditionalEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteConditionalEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string branch_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_branch_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteConditionalEntry.branch_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteConditionalEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DeleteConditionalEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteConditionalEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch_name().data(), static_cast<int>(this->_internal_branch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteConditionalEntry.branch_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_branch_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DeleteConditionalEntry)
  return target;
}

size_t DeleteConditionalEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DeleteConditionalEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string branch_name = 2;
  if (!this->_internal_branch_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConditionalEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteConditionalEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConditionalEntry::GetClassData() const { return &_class_data_; }

void DeleteConditionalEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteConditionalEntry *>(to)->MergeFrom(
      static_cast<const DeleteConditionalEntry &>(from));
}


void DeleteConditionalEntry::MergeFrom(const DeleteConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DeleteConditionalEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_branch_name().empty()) {
    _internal_set_branch_name(from._internal_branch_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConditionalEntry::CopyFrom(const DeleteConditionalEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DeleteConditionalEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConditionalEntry::IsInitialized() const {
  return true;
}

void DeleteConditionalEntry::InternalSwap(DeleteConditionalEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_name_, lhs_arena,
      &other->branch_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConditionalEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[14]);
}

// ===================================================================

class InsertFlexEntry::_Internal {
 public:
};

InsertFlexEntry::InsertFlexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.InsertFlexEntry)
}
InsertFlexEntry::InsertFlexEntry(const InsertFlexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  true_next_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_true_next_node().empty()) {
    true_next_node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_true_next_node(), 
      GetArenaForAllocation());
  }
  false_next_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_false_next_node().empty()) {
    false_next_node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_false_next_node(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.InsertFlexEntry)
}

void InsertFlexEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
true_next_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
false_next_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsertFlexEntry::~InsertFlexEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.InsertFlexEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertFlexEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  true_next_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  false_next_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertFlexEntry::ArenaDtor(void* object) {
  InsertFlexEntry* _this = reinterpret_cast< InsertFlexEntry* >(object);
  (void)_this;
}
void InsertFlexEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertFlexEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertFlexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.InsertFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  node_name_.ClearToEmpty();
  true_next_node_.ClearToEmpty();
  false_next_node_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertFlexEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertFlexEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertFlexEntry.node_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string true_next_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_true_next_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertFlexEntry.true_next_node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string false_next_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_false_next_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertFlexEntry.false_next_node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertFlexEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.InsertFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertFlexEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertFlexEntry.node_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_name(), target);
  }

  // string true_next_node = 3;
  if (!this->_internal_true_next_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_true_next_node().data(), static_cast<int>(this->_internal_true_next_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertFlexEntry.true_next_node");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_true_next_node(), target);
  }

  // string false_next_node = 4;
  if (!this->_internal_false_next_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_false_next_node().data(), static_cast<int>(this->_internal_false_next_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertFlexEntry.false_next_node");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_false_next_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.InsertFlexEntry)
  return target;
}

size_t InsertFlexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.InsertFlexEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // string true_next_node = 3;
  if (!this->_internal_true_next_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_true_next_node());
  }

  // string false_next_node = 4;
  if (!this->_internal_false_next_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_false_next_node());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertFlexEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertFlexEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertFlexEntry::GetClassData() const { return &_class_data_; }

void InsertFlexEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertFlexEntry *>(to)->MergeFrom(
      static_cast<const InsertFlexEntry &>(from));
}


void InsertFlexEntry::MergeFrom(const InsertFlexEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.InsertFlexEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_true_next_node().empty()) {
    _internal_set_true_next_node(from._internal_true_next_node());
  }
  if (!from._internal_false_next_node().empty()) {
    _internal_set_false_next_node(from._internal_false_next_node());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertFlexEntry::CopyFrom(const InsertFlexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.InsertFlexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFlexEntry::IsInitialized() const {
  return true;
}

void InsertFlexEntry::InternalSwap(InsertFlexEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, lhs_arena,
      &other->node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &true_next_node_, lhs_arena,
      &other->true_next_node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &false_next_node_, lhs_arena,
      &other->false_next_node_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertFlexEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[15]);
}

// ===================================================================

class ChangeFlexEntry::_Internal {
 public:
};

ChangeFlexEntry::ChangeFlexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ChangeFlexEntry)
}
ChangeFlexEntry::ChangeFlexEntry(const ChangeFlexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  flx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flx_name().empty()) {
    flx_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flx_name(), 
      GetArenaForAllocation());
  }
  node_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_next().empty()) {
    node_next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_next(), 
      GetArenaForAllocation());
  }
  true_or_false_next_ = from.true_or_false_next_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ChangeFlexEntry)
}

void ChangeFlexEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
true_or_false_next_ = false;
}

ChangeFlexEntry::~ChangeFlexEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ChangeFlexEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeFlexEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flx_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeFlexEntry::ArenaDtor(void* object) {
  ChangeFlexEntry* _this = reinterpret_cast< ChangeFlexEntry* >(object);
  (void)_this;
}
void ChangeFlexEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFlexEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeFlexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ChangeFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  flx_name_.ClearToEmpty();
  node_next_.ClearToEmpty();
  true_or_false_next_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFlexEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeFlexEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string flx_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_flx_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeFlexEntry.flx_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool true_or_false_next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          true_or_false_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeFlexEntry.node_next"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFlexEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ChangeFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeFlexEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string flx_name = 2;
  if (!this->_internal_flx_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flx_name().data(), static_cast<int>(this->_internal_flx_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeFlexEntry.flx_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flx_name(), target);
  }

  // bool true_or_false_next = 3;
  if (this->_internal_true_or_false_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_true_or_false_next(), target);
  }

  // string node_next = 4;
  if (!this->_internal_node_next().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_next().data(), static_cast<int>(this->_internal_node_next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeFlexEntry.node_next");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ChangeFlexEntry)
  return target;
}

size_t ChangeFlexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ChangeFlexEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string flx_name = 2;
  if (!this->_internal_flx_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flx_name());
  }

  // string node_next = 4;
  if (!this->_internal_node_next().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_next());
  }

  // bool true_or_false_next = 3;
  if (this->_internal_true_or_false_next() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeFlexEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeFlexEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeFlexEntry::GetClassData() const { return &_class_data_; }

void ChangeFlexEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeFlexEntry *>(to)->MergeFrom(
      static_cast<const ChangeFlexEntry &>(from));
}


void ChangeFlexEntry::MergeFrom(const ChangeFlexEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ChangeFlexEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_flx_name().empty()) {
    _internal_set_flx_name(from._internal_flx_name());
  }
  if (!from._internal_node_next().empty()) {
    _internal_set_node_next(from._internal_node_next());
  }
  if (from._internal_true_or_false_next() != 0) {
    _internal_set_true_or_false_next(from._internal_true_or_false_next());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeFlexEntry::CopyFrom(const ChangeFlexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ChangeFlexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFlexEntry::IsInitialized() const {
  return true;
}

void ChangeFlexEntry::InternalSwap(ChangeFlexEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flx_name_, lhs_arena,
      &other->flx_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_next_, lhs_arena,
      &other->node_next_, rhs_arena
  );
  swap(true_or_false_next_, other->true_or_false_next_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFlexEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[16]);
}

// ===================================================================

class DeleteFlexEntry::_Internal {
 public:
};

DeleteFlexEntry::DeleteFlexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DeleteFlexEntry)
}
DeleteFlexEntry::DeleteFlexEntry(const DeleteFlexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  flx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flx_name().empty()) {
    flx_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flx_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DeleteFlexEntry)
}

void DeleteFlexEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flx_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteFlexEntry::~DeleteFlexEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DeleteFlexEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteFlexEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flx_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteFlexEntry::ArenaDtor(void* object) {
  DeleteFlexEntry* _this = reinterpret_cast< DeleteFlexEntry* >(object);
  (void)_this;
}
void DeleteFlexEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFlexEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteFlexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DeleteFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  flx_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFlexEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteFlexEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string flx_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_flx_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteFlexEntry.flx_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFlexEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DeleteFlexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteFlexEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string flx_name = 2;
  if (!this->_internal_flx_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flx_name().data(), static_cast<int>(this->_internal_flx_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteFlexEntry.flx_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flx_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DeleteFlexEntry)
  return target;
}

size_t DeleteFlexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DeleteFlexEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string flx_name = 2;
  if (!this->_internal_flx_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flx_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteFlexEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteFlexEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteFlexEntry::GetClassData() const { return &_class_data_; }

void DeleteFlexEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteFlexEntry *>(to)->MergeFrom(
      static_cast<const DeleteFlexEntry &>(from));
}


void DeleteFlexEntry::MergeFrom(const DeleteFlexEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DeleteFlexEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_flx_name().empty()) {
    _internal_set_flx_name(from._internal_flx_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteFlexEntry::CopyFrom(const DeleteFlexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DeleteFlexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFlexEntry::IsInitialized() const {
  return true;
}

void DeleteFlexEntry::InternalSwap(DeleteFlexEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flx_name_, lhs_arena,
      &other->flx_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFlexEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[17]);
}

// ===================================================================

class InsertRegisterArrayEntry::_Internal {
 public:
};

InsertRegisterArrayEntry::InsertRegisterArrayEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.InsertRegisterArrayEntry)
}
InsertRegisterArrayEntry::InsertRegisterArrayEntry(const InsertRegisterArrayEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_array_name().empty()) {
    register_array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_array_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&register_array_size_, &from.register_array_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&register_array_bitwidth_) -
    reinterpret_cast<char*>(&register_array_size_)) + sizeof(register_array_bitwidth_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.InsertRegisterArrayEntry)
}

void InsertRegisterArrayEntry::SharedCtor() {
register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&register_array_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&register_array_bitwidth_) -
    reinterpret_cast<char*>(&register_array_size_)) + sizeof(register_array_bitwidth_));
}

InsertRegisterArrayEntry::~InsertRegisterArrayEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.InsertRegisterArrayEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertRegisterArrayEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  register_array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertRegisterArrayEntry::ArenaDtor(void* object) {
  InsertRegisterArrayEntry* _this = reinterpret_cast< InsertRegisterArrayEntry* >(object);
  (void)_this;
}
void InsertRegisterArrayEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRegisterArrayEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRegisterArrayEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.InsertRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  register_array_name_.ClearToEmpty();
  ::memset(&register_array_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&register_array_bitwidth_) -
      reinterpret_cast<char*>(&register_array_size_)) + sizeof(register_array_bitwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRegisterArrayEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string register_array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_register_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.InsertRegisterArrayEntry.register_array_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 register_array_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          register_array_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 register_array_bitwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          register_array_bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRegisterArrayEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.InsertRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_register_array_name().data(), static_cast<int>(this->_internal_register_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.InsertRegisterArrayEntry.register_array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_register_array_name(), target);
  }

  // uint32 register_array_size = 2;
  if (this->_internal_register_array_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_register_array_size(), target);
  }

  // uint32 register_array_bitwidth = 3;
  if (this->_internal_register_array_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_array_bitwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.InsertRegisterArrayEntry)
  return target;
}

size_t InsertRegisterArrayEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.InsertRegisterArrayEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_register_array_name());
  }

  // uint32 register_array_size = 2;
  if (this->_internal_register_array_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_register_array_size());
  }

  // uint32 register_array_bitwidth = 3;
  if (this->_internal_register_array_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_register_array_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRegisterArrayEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertRegisterArrayEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRegisterArrayEntry::GetClassData() const { return &_class_data_; }

void InsertRegisterArrayEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertRegisterArrayEntry *>(to)->MergeFrom(
      static_cast<const InsertRegisterArrayEntry &>(from));
}


void InsertRegisterArrayEntry::MergeFrom(const InsertRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.InsertRegisterArrayEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_register_array_name().empty()) {
    _internal_set_register_array_name(from._internal_register_array_name());
  }
  if (from._internal_register_array_size() != 0) {
    _internal_set_register_array_size(from._internal_register_array_size());
  }
  if (from._internal_register_array_bitwidth() != 0) {
    _internal_set_register_array_bitwidth(from._internal_register_array_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRegisterArrayEntry::CopyFrom(const InsertRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.InsertRegisterArrayEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRegisterArrayEntry::IsInitialized() const {
  return true;
}

void InsertRegisterArrayEntry::InternalSwap(InsertRegisterArrayEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_array_name_, lhs_arena,
      &other->register_array_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRegisterArrayEntry, register_array_bitwidth_)
      + sizeof(InsertRegisterArrayEntry::register_array_bitwidth_)
      - PROTOBUF_FIELD_OFFSET(InsertRegisterArrayEntry, register_array_size_)>(
          reinterpret_cast<char*>(&register_array_size_),
          reinterpret_cast<char*>(&other->register_array_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRegisterArrayEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[18]);
}

// ===================================================================

class ChangeRegisterArrayEntry::_Internal {
 public:
};

ChangeRegisterArrayEntry::ChangeRegisterArrayEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ChangeRegisterArrayEntry)
}
ChangeRegisterArrayEntry::ChangeRegisterArrayEntry(const ChangeRegisterArrayEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_array_name().empty()) {
    register_array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_array_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&register_array_change_type_, &from.register_array_change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_value_) -
    reinterpret_cast<char*>(&register_array_change_type_)) + sizeof(new_value_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ChangeRegisterArrayEntry)
}

void ChangeRegisterArrayEntry::SharedCtor() {
register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&register_array_change_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_value_) -
    reinterpret_cast<char*>(&register_array_change_type_)) + sizeof(new_value_));
}

ChangeRegisterArrayEntry::~ChangeRegisterArrayEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ChangeRegisterArrayEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeRegisterArrayEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  register_array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeRegisterArrayEntry::ArenaDtor(void* object) {
  ChangeRegisterArrayEntry* _this = reinterpret_cast< ChangeRegisterArrayEntry* >(object);
  (void)_this;
}
void ChangeRegisterArrayEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeRegisterArrayEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeRegisterArrayEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ChangeRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  register_array_name_.ClearToEmpty();
  ::memset(&register_array_change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_value_) -
      reinterpret_cast<char*>(&register_array_change_type_)) + sizeof(new_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeRegisterArrayEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string register_array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_register_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeRegisterArrayEntry.register_array_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ChangeRegisterArrayEntry.RegisterArrayChangeType register_array_change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_register_array_change_type(static_cast<::p4::v1::ChangeRegisterArrayEntry_RegisterArrayChangeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 new_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeRegisterArrayEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ChangeRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_register_array_name().data(), static_cast<int>(this->_internal_register_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeRegisterArrayEntry.register_array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_register_array_name(), target);
  }

  // .p4.v1.ChangeRegisterArrayEntry.RegisterArrayChangeType register_array_change_type = 2;
  if (this->_internal_register_array_change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_register_array_change_type(), target);
  }

  // uint32 new_value = 3;
  if (this->_internal_new_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ChangeRegisterArrayEntry)
  return target;
}

size_t ChangeRegisterArrayEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ChangeRegisterArrayEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_register_array_name());
  }

  // .p4.v1.ChangeRegisterArrayEntry.RegisterArrayChangeType register_array_change_type = 2;
  if (this->_internal_register_array_change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_register_array_change_type());
  }

  // uint32 new_value = 3;
  if (this->_internal_new_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeRegisterArrayEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeRegisterArrayEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeRegisterArrayEntry::GetClassData() const { return &_class_data_; }

void ChangeRegisterArrayEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeRegisterArrayEntry *>(to)->MergeFrom(
      static_cast<const ChangeRegisterArrayEntry &>(from));
}


void ChangeRegisterArrayEntry::MergeFrom(const ChangeRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ChangeRegisterArrayEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_register_array_name().empty()) {
    _internal_set_register_array_name(from._internal_register_array_name());
  }
  if (from._internal_register_array_change_type() != 0) {
    _internal_set_register_array_change_type(from._internal_register_array_change_type());
  }
  if (from._internal_new_value() != 0) {
    _internal_set_new_value(from._internal_new_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeRegisterArrayEntry::CopyFrom(const ChangeRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ChangeRegisterArrayEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRegisterArrayEntry::IsInitialized() const {
  return true;
}

void ChangeRegisterArrayEntry::InternalSwap(ChangeRegisterArrayEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_array_name_, lhs_arena,
      &other->register_array_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeRegisterArrayEntry, new_value_)
      + sizeof(ChangeRegisterArrayEntry::new_value_)
      - PROTOBUF_FIELD_OFFSET(ChangeRegisterArrayEntry, register_array_change_type_)>(
          reinterpret_cast<char*>(&register_array_change_type_),
          reinterpret_cast<char*>(&other->register_array_change_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeRegisterArrayEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[19]);
}

// ===================================================================

class DeleteRegisterArrayEntry::_Internal {
 public:
};

DeleteRegisterArrayEntry::DeleteRegisterArrayEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DeleteRegisterArrayEntry)
}
DeleteRegisterArrayEntry::DeleteRegisterArrayEntry(const DeleteRegisterArrayEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_array_name().empty()) {
    register_array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_array_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DeleteRegisterArrayEntry)
}

void DeleteRegisterArrayEntry::SharedCtor() {
register_array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteRegisterArrayEntry::~DeleteRegisterArrayEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DeleteRegisterArrayEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRegisterArrayEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  register_array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRegisterArrayEntry::ArenaDtor(void* object) {
  DeleteRegisterArrayEntry* _this = reinterpret_cast< DeleteRegisterArrayEntry* >(object);
  (void)_this;
}
void DeleteRegisterArrayEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRegisterArrayEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRegisterArrayEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DeleteRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  register_array_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRegisterArrayEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string register_array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_register_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.DeleteRegisterArrayEntry.register_array_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRegisterArrayEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DeleteRegisterArrayEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_register_array_name().data(), static_cast<int>(this->_internal_register_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.DeleteRegisterArrayEntry.register_array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_register_array_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DeleteRegisterArrayEntry)
  return target;
}

size_t DeleteRegisterArrayEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DeleteRegisterArrayEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string register_array_name = 1;
  if (!this->_internal_register_array_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_register_array_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRegisterArrayEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRegisterArrayEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRegisterArrayEntry::GetClassData() const { return &_class_data_; }

void DeleteRegisterArrayEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRegisterArrayEntry *>(to)->MergeFrom(
      static_cast<const DeleteRegisterArrayEntry &>(from));
}


void DeleteRegisterArrayEntry::MergeFrom(const DeleteRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DeleteRegisterArrayEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_register_array_name().empty()) {
    _internal_set_register_array_name(from._internal_register_array_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRegisterArrayEntry::CopyFrom(const DeleteRegisterArrayEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DeleteRegisterArrayEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRegisterArrayEntry::IsInitialized() const {
  return true;
}

void DeleteRegisterArrayEntry::InternalSwap(DeleteRegisterArrayEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_array_name_, lhs_arena,
      &other->register_array_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRegisterArrayEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[20]);
}

// ===================================================================

class TriggerEntry::_Internal {
 public:
};

TriggerEntry::TriggerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.TriggerEntry)
}
TriggerEntry::TriggerEntry(const TriggerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  on_or_off_ = from.on_or_off_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.TriggerEntry)
}

void TriggerEntry::SharedCtor() {
on_or_off_ = false;
}

TriggerEntry::~TriggerEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.TriggerEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TriggerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TriggerEntry::ArenaDtor(void* object) {
  TriggerEntry* _this = reinterpret_cast< TriggerEntry* >(object);
  (void)_this;
}
void TriggerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TriggerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TriggerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TriggerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_or_off_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriggerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool on_or_off = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_or_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TriggerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on_or_off = 1;
  if (this->_internal_on_or_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_on_or_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TriggerEntry)
  return target;
}

size_t TriggerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TriggerEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on_or_off = 1;
  if (this->_internal_on_or_off() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TriggerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TriggerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TriggerEntry::GetClassData() const { return &_class_data_; }

void TriggerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TriggerEntry *>(to)->MergeFrom(
      static_cast<const TriggerEntry &>(from));
}


void TriggerEntry::MergeFrom(const TriggerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TriggerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_on_or_off() != 0) {
    _internal_set_on_or_off(from._internal_on_or_off());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TriggerEntry::CopyFrom(const TriggerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TriggerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerEntry::IsInitialized() const {
  return true;
}

void TriggerEntry::InternalSwap(TriggerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(on_or_off_, other->on_or_off_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[21]);
}

// ===================================================================

class ChangeInitEntry::_Internal {
 public:
};

ChangeInitEntry::ChangeInitEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ChangeInitEntry)
}
ChangeInitEntry::ChangeInitEntry(const ChangeInitEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_name().empty()) {
    pipeline_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_name(), 
      GetArenaForAllocation());
  }
  table_name_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name_next().empty()) {
    table_name_next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name_next(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ChangeInitEntry)
}

void ChangeInitEntry::SharedCtor() {
pipeline_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeInitEntry::~ChangeInitEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ChangeInitEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeInitEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pipeline_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeInitEntry::ArenaDtor(void* object) {
  ChangeInitEntry* _this = reinterpret_cast< ChangeInitEntry* >(object);
  (void)_this;
}
void ChangeInitEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeInitEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeInitEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ChangeInitEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_name_.ClearToEmpty();
  table_name_next_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeInitEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeInitEntry.pipeline_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name_next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.ChangeInitEntry.table_name_next"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeInitEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ChangeInitEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_name().data(), static_cast<int>(this->_internal_pipeline_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeInitEntry.pipeline_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_name(), target);
  }

  // string table_name_next = 2;
  if (!this->_internal_table_name_next().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name_next().data(), static_cast<int>(this->_internal_table_name_next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.ChangeInitEntry.table_name_next");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ChangeInitEntry)
  return target;
}

size_t ChangeInitEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ChangeInitEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pipeline_name = 1;
  if (!this->_internal_pipeline_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_name());
  }

  // string table_name_next = 2;
  if (!this->_internal_table_name_next().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name_next());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeInitEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeInitEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeInitEntry::GetClassData() const { return &_class_data_; }

void ChangeInitEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeInitEntry *>(to)->MergeFrom(
      static_cast<const ChangeInitEntry &>(from));
}


void ChangeInitEntry::MergeFrom(const ChangeInitEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ChangeInitEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pipeline_name().empty()) {
    _internal_set_pipeline_name(from._internal_pipeline_name());
  }
  if (!from._internal_table_name_next().empty()) {
    _internal_set_table_name_next(from._internal_table_name_next());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeInitEntry::CopyFrom(const ChangeInitEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ChangeInitEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeInitEntry::IsInitialized() const {
  return true;
}

void ChangeInitEntry::InternalSwap(ChangeInitEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_name_, lhs_arena,
      &other->pipeline_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_next_, lhs_arena,
      &other->table_name_next_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeInitEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[22]);
}

// ===================================================================

class ExternEntry::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& entry(const ExternEntry* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ExternEntry::_Internal::entry(const ExternEntry* msg) {
  return *msg->entry_;
}
void ExternEntry::clear_entry() {
  if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
ExternEntry::ExternEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ExternEntry)
}
ExternEntry::ExternEntry(const ExternEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  ::memcpy(&extern_type_id_, &from.extern_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&extern_type_id_)) + sizeof(extern_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ExternEntry)
}

void ExternEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(extern_id_));
}

ExternEntry::~ExternEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ExternEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entry_;
}

void ExternEntry::ArenaDtor(void* object) {
  ExternEntry* _this = reinterpret_cast< ExternEntry* >(object);
  (void)_this;
}
void ExternEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ExternEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
  ::memset(&extern_type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extern_id_) -
      reinterpret_cast<char*>(&extern_type_id_)) + sizeof(extern_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extern_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extern_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 extern_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ExternEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extern_type_id = 1;
  if (this->_internal_extern_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extern_type_id(), target);
  }

  // uint32 extern_id = 2;
  if (this->_internal_extern_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extern_id(), target);
  }

  // .google.protobuf.Any entry = 3;
  if (this->_internal_has_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ExternEntry)
  return target;
}

size_t ExternEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ExternEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any entry = 3;
  if (this->_internal_has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  // uint32 extern_type_id = 1;
  if (this->_internal_extern_type_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_extern_type_id());
  }

  // uint32 extern_id = 2;
  if (this->_internal_extern_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_extern_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternEntry::GetClassData() const { return &_class_data_; }

void ExternEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExternEntry *>(to)->MergeFrom(
      static_cast<const ExternEntry &>(from));
}


void ExternEntry::MergeFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ExternEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry()) {
    _internal_mutable_entry()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_entry());
  }
  if (from._internal_extern_type_id() != 0) {
    _internal_set_extern_type_id(from._internal_extern_type_id());
  }
  if (from._internal_extern_id() != 0) {
    _internal_set_extern_id(from._internal_extern_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternEntry::CopyFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ExternEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternEntry::IsInitialized() const {
  return true;
}

void ExternEntry::InternalSwap(ExternEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExternEntry, extern_id_)
      + sizeof(ExternEntry::extern_id_)
      - PROTOBUF_FIELD_OFFSET(ExternEntry, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[23]);
}

// ===================================================================

class TableEntry_IdleTimeout::_Internal {
 public:
};

TableEntry_IdleTimeout::TableEntry_IdleTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.TableEntry.IdleTimeout)
}
TableEntry_IdleTimeout::TableEntry_IdleTimeout(const TableEntry_IdleTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  elapsed_ns_ = from.elapsed_ns_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableEntry.IdleTimeout)
}

void TableEntry_IdleTimeout::SharedCtor() {
elapsed_ns_ = int64_t{0};
}

TableEntry_IdleTimeout::~TableEntry_IdleTimeout() {
  // @@protoc_insertion_point(destructor:p4.v1.TableEntry.IdleTimeout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableEntry_IdleTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableEntry_IdleTimeout::ArenaDtor(void* object) {
  TableEntry_IdleTimeout* _this = reinterpret_cast< TableEntry_IdleTimeout* >(object);
  (void)_this;
}
void TableEntry_IdleTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableEntry_IdleTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableEntry_IdleTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableEntry.IdleTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elapsed_ns_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableEntry_IdleTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 elapsed_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          elapsed_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableEntry_IdleTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableEntry.IdleTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 elapsed_ns = 1;
  if (this->_internal_elapsed_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_elapsed_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableEntry.IdleTimeout)
  return target;
}

size_t TableEntry_IdleTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableEntry.IdleTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 elapsed_ns = 1;
  if (this->_internal_elapsed_ns() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_ns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableEntry_IdleTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableEntry_IdleTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableEntry_IdleTimeout::GetClassData() const { return &_class_data_; }

void TableEntry_IdleTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableEntry_IdleTimeout *>(to)->MergeFrom(
      static_cast<const TableEntry_IdleTimeout &>(from));
}


void TableEntry_IdleTimeout::MergeFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableEntry.IdleTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_elapsed_ns() != 0) {
    _internal_set_elapsed_ns(from._internal_elapsed_ns());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableEntry_IdleTimeout::CopyFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableEntry.IdleTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry_IdleTimeout::IsInitialized() const {
  return true;
}

void TableEntry_IdleTimeout::InternalSwap(TableEntry_IdleTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(elapsed_ns_, other->elapsed_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableEntry_IdleTimeout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[24]);
}

// ===================================================================

class TableEntry::_Internal {
 public:
  static const ::p4::v1::TableAction& action(const TableEntry* msg);
  static const ::p4::v1::MeterConfig& meter_config(const TableEntry* msg);
  static const ::p4::v1::CounterData& counter_data(const TableEntry* msg);
  static const ::p4::v1::TableEntry_IdleTimeout& time_since_last_hit(const TableEntry* msg);
};

const ::p4::v1::TableAction&
TableEntry::_Internal::action(const TableEntry* msg) {
  return *msg->action_;
}
const ::p4::v1::MeterConfig&
TableEntry::_Internal::meter_config(const TableEntry* msg) {
  return *msg->meter_config_;
}
const ::p4::v1::CounterData&
TableEntry::_Internal::counter_data(const TableEntry* msg) {
  return *msg->counter_data_;
}
const ::p4::v1::TableEntry_IdleTimeout&
TableEntry::_Internal::time_since_last_hit(const TableEntry* msg) {
  return *msg->time_since_last_hit_;
}
TableEntry::TableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.TableEntry)
}
TableEntry::TableEntry(const TableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_(from.match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_action()) {
    action_ = new ::p4::v1::TableAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_meter_config()) {
    meter_config_ = new ::p4::v1::MeterConfig(*from.meter_config_);
  } else {
    meter_config_ = nullptr;
  }
  if (from._internal_has_counter_data()) {
    counter_data_ = new ::p4::v1::CounterData(*from.counter_data_);
  } else {
    counter_data_ = nullptr;
  }
  if (from._internal_has_time_since_last_hit()) {
    time_since_last_hit_ = new ::p4::v1::TableEntry_IdleTimeout(*from.time_since_last_hit_);
  } else {
    time_since_last_hit_ = nullptr;
  }
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(is_default_action_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableEntry)
}

void TableEntry::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&action_)) + sizeof(is_default_action_));
}

TableEntry::~TableEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.TableEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete meter_config_;
  if (this != internal_default_instance()) delete counter_data_;
  if (this != internal_default_instance()) delete time_since_last_hit_;
}

void TableEntry::ArenaDtor(void* object) {
  TableEntry* _this = reinterpret_cast< TableEntry* >(object);
  (void)_this;
}
void TableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  metadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaForAllocation() == nullptr && meter_config_ != nullptr) {
    delete meter_config_;
  }
  meter_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && counter_data_ != nullptr) {
    delete counter_data_;
  }
  counter_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_since_last_hit_ != nullptr) {
    delete time_since_last_hit_;
  }
  time_since_last_hit_ = nullptr;
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_action_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(is_default_action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.FieldMatch match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.TableAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 controller_metadata = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          controller_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.MeterConfig meter_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_meter_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.CounterData counter_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_default_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_default_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 idle_timeout_ns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          idle_timeout_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_last_hit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 table_id = 1;
  if (this->_internal_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_table_id(), target);
  }

  // repeated .p4.v1.FieldMatch match = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_match(i), target, stream);
  }

  // .p4.v1.TableAction action = 3;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action(this), target, stream);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->_internal_controller_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_controller_metadata(), target);
  }

  // .p4.v1.MeterConfig meter_config = 6;
  if (this->_internal_has_meter_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::meter_config(this), target, stream);
  }

  // .p4.v1.CounterData counter_data = 7;
  if (this->_internal_has_counter_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::counter_data(this), target, stream);
  }

  // bool is_default_action = 8;
  if (this->_internal_is_default_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_default_action(), target);
  }

  // int64 idle_timeout_ns = 9;
  if (this->_internal_idle_timeout_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_idle_timeout_ns(), target);
  }

  // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->_internal_has_time_since_last_hit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::time_since_last_hit(this), target, stream);
  }

  // bytes metadata = 11;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableEntry)
  return target;
}

size_t TableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.FieldMatch match = 2;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes metadata = 11;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // .p4.v1.TableAction action = 3;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .p4.v1.MeterConfig meter_config = 6;
  if (this->_internal_has_meter_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meter_config_);
  }

  // .p4.v1.CounterData counter_data = 7;
  if (this->_internal_has_counter_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counter_data_);
  }

  // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->_internal_has_time_since_last_hit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_since_last_hit_);
  }

  // uint32 table_id = 1;
  if (this->_internal_table_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_table_id());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->_internal_controller_metadata() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_controller_metadata());
  }

  // int64 idle_timeout_ns = 9;
  if (this->_internal_idle_timeout_ns() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_idle_timeout_ns());
  }

  // bool is_default_action = 8;
  if (this->_internal_is_default_action() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableEntry::GetClassData() const { return &_class_data_; }

void TableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableEntry *>(to)->MergeFrom(
      static_cast<const TableEntry &>(from));
}


void TableEntry::MergeFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::p4::v1::TableAction::MergeFrom(from._internal_action());
  }
  if (from._internal_has_meter_config()) {
    _internal_mutable_meter_config()->::p4::v1::MeterConfig::MergeFrom(from._internal_meter_config());
  }
  if (from._internal_has_counter_data()) {
    _internal_mutable_counter_data()->::p4::v1::CounterData::MergeFrom(from._internal_counter_data());
  }
  if (from._internal_has_time_since_last_hit()) {
    _internal_mutable_time_since_last_hit()->::p4::v1::TableEntry_IdleTimeout::MergeFrom(from._internal_time_since_last_hit());
  }
  if (from._internal_table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_controller_metadata() != 0) {
    _internal_set_controller_metadata(from._internal_controller_metadata());
  }
  if (from._internal_idle_timeout_ns() != 0) {
    _internal_set_idle_timeout_ns(from._internal_idle_timeout_ns());
  }
  if (from._internal_is_default_action() != 0) {
    _internal_set_is_default_action(from._internal_is_default_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableEntry::CopyFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry::IsInitialized() const {
  return true;
}

void TableEntry::InternalSwap(TableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableEntry, is_default_action_)
      + sizeof(TableEntry::is_default_action_)
      - PROTOBUF_FIELD_OFFSET(TableEntry, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[25]);
}

// ===================================================================

class FieldMatch_Exact::_Internal {
 public:
};

FieldMatch_Exact::FieldMatch_Exact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch.Exact)
}
FieldMatch_Exact::FieldMatch_Exact(const FieldMatch_Exact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Exact)
}

void FieldMatch_Exact::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Exact::~FieldMatch_Exact() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Exact)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch_Exact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Exact::ArenaDtor(void* object) {
  FieldMatch_Exact* _this = reinterpret_cast< FieldMatch_Exact* >(object);
  (void)_this;
}
void FieldMatch_Exact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch_Exact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch_Exact::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Exact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch_Exact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Exact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Exact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Exact)
  return target;
}

size_t FieldMatch_Exact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Exact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch_Exact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch_Exact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch_Exact::GetClassData() const { return &_class_data_; }

void FieldMatch_Exact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch_Exact *>(to)->MergeFrom(
      static_cast<const FieldMatch_Exact &>(from));
}


void FieldMatch_Exact::MergeFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Exact)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch_Exact::CopyFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Exact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Exact::IsInitialized() const {
  return true;
}

void FieldMatch_Exact::InternalSwap(FieldMatch_Exact* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Exact::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[26]);
}

// ===================================================================

class FieldMatch_Ternary::_Internal {
 public:
};

FieldMatch_Ternary::FieldMatch_Ternary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch.Ternary)
}
FieldMatch_Ternary::FieldMatch_Ternary(const FieldMatch_Ternary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mask().empty()) {
    mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mask(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Ternary)
}

void FieldMatch_Ternary::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Ternary::~FieldMatch_Ternary() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Ternary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch_Ternary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Ternary::ArenaDtor(void* object) {
  FieldMatch_Ternary* _this = reinterpret_cast< FieldMatch_Ternary* >(object);
  (void)_this;
}
void FieldMatch_Ternary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch_Ternary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch_Ternary::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Ternary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  mask_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch_Ternary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Ternary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Ternary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // bytes mask = 2;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Ternary)
  return target;
}

size_t FieldMatch_Ternary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Ternary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes mask = 2;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch_Ternary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch_Ternary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch_Ternary::GetClassData() const { return &_class_data_; }

void FieldMatch_Ternary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch_Ternary *>(to)->MergeFrom(
      static_cast<const FieldMatch_Ternary &>(from));
}


void FieldMatch_Ternary::MergeFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Ternary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch_Ternary::CopyFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Ternary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Ternary::IsInitialized() const {
  return true;
}

void FieldMatch_Ternary::InternalSwap(FieldMatch_Ternary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Ternary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[27]);
}

// ===================================================================

class FieldMatch_LPM::_Internal {
 public:
};

FieldMatch_LPM::FieldMatch_LPM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch.LPM)
}
FieldMatch_LPM::FieldMatch_LPM(const FieldMatch_LPM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.LPM)
}

void FieldMatch_LPM::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prefix_len_ = 0;
}

FieldMatch_LPM::~FieldMatch_LPM() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.LPM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch_LPM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_LPM::ArenaDtor(void* object) {
  FieldMatch_LPM* _this = reinterpret_cast< FieldMatch_LPM* >(object);
  (void)_this;
}
void FieldMatch_LPM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch_LPM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch_LPM::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.LPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  prefix_len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch_LPM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_LPM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.LPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // int32 prefix_len = 2;
  if (this->_internal_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.LPM)
  return target;
}

size_t FieldMatch_LPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.LPM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 prefix_len = 2;
  if (this->_internal_prefix_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prefix_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch_LPM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch_LPM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch_LPM::GetClassData() const { return &_class_data_; }

void FieldMatch_LPM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch_LPM *>(to)->MergeFrom(
      static_cast<const FieldMatch_LPM &>(from));
}


void FieldMatch_LPM::MergeFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.LPM)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch_LPM::CopyFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.LPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_LPM::IsInitialized() const {
  return true;
}

void FieldMatch_LPM::InternalSwap(FieldMatch_LPM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_LPM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[28]);
}

// ===================================================================

class FieldMatch_Range::_Internal {
 public:
};

FieldMatch_Range::FieldMatch_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch.Range)
}
FieldMatch_Range::FieldMatch_Range(const FieldMatch_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  low_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_low().empty()) {
    low_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_low(), 
      GetArenaForAllocation());
  }
  high_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_high().empty()) {
    high_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_high(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Range)
}

void FieldMatch_Range::SharedCtor() {
low_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
high_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Range::~FieldMatch_Range() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch_Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  low_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Range::ArenaDtor(void* object) {
  FieldMatch_Range* _this = reinterpret_cast< FieldMatch_Range* >(object);
  (void)_this;
}
void FieldMatch_Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  low_.ClearToEmpty();
  high_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch_Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_low();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_high();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes low = 1;
  if (!this->_internal_low().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_low(), target);
  }

  // bytes high = 2;
  if (!this->_internal_high().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Range)
  return target;
}

size_t FieldMatch_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes low = 1;
  if (!this->_internal_low().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_low());
  }

  // bytes high = 2;
  if (!this->_internal_high().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_high());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch_Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch_Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch_Range::GetClassData() const { return &_class_data_; }

void FieldMatch_Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch_Range *>(to)->MergeFrom(
      static_cast<const FieldMatch_Range &>(from));
}


void FieldMatch_Range::MergeFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_low().empty()) {
    _internal_set_low(from._internal_low());
  }
  if (!from._internal_high().empty()) {
    _internal_set_high(from._internal_high());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch_Range::CopyFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Range::IsInitialized() const {
  return true;
}

void FieldMatch_Range::InternalSwap(FieldMatch_Range* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &low_, lhs_arena,
      &other->low_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &high_, lhs_arena,
      &other->high_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[29]);
}

// ===================================================================

class FieldMatch_Optional::_Internal {
 public:
};

FieldMatch_Optional::FieldMatch_Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch.Optional)
}
FieldMatch_Optional::FieldMatch_Optional(const FieldMatch_Optional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Optional)
}

void FieldMatch_Optional::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Optional::~FieldMatch_Optional() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Optional)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch_Optional::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Optional::ArenaDtor(void* object) {
  FieldMatch_Optional* _this = reinterpret_cast< FieldMatch_Optional* >(object);
  (void)_this;
}
void FieldMatch_Optional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch_Optional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch_Optional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Optional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Optional)
  return target;
}

size_t FieldMatch_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Optional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch_Optional::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch_Optional::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch_Optional::GetClassData() const { return &_class_data_; }

void FieldMatch_Optional::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch_Optional *>(to)->MergeFrom(
      static_cast<const FieldMatch_Optional &>(from));
}


void FieldMatch_Optional::MergeFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Optional)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch_Optional::CopyFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Optional::IsInitialized() const {
  return true;
}

void FieldMatch_Optional::InternalSwap(FieldMatch_Optional* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Optional::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[30]);
}

// ===================================================================

class FieldMatch::_Internal {
 public:
  static const ::p4::v1::FieldMatch_Exact& exact(const FieldMatch* msg);
  static const ::p4::v1::FieldMatch_Ternary& ternary(const FieldMatch* msg);
  static const ::p4::v1::FieldMatch_LPM& lpm(const FieldMatch* msg);
  static const ::p4::v1::FieldMatch_Range& range(const FieldMatch* msg);
  static const ::p4::v1::FieldMatch_Optional& optional(const FieldMatch* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& other(const FieldMatch* msg);
};

const ::p4::v1::FieldMatch_Exact&
FieldMatch::_Internal::exact(const FieldMatch* msg) {
  return *msg->field_match_type_.exact_;
}
const ::p4::v1::FieldMatch_Ternary&
FieldMatch::_Internal::ternary(const FieldMatch* msg) {
  return *msg->field_match_type_.ternary_;
}
const ::p4::v1::FieldMatch_LPM&
FieldMatch::_Internal::lpm(const FieldMatch* msg) {
  return *msg->field_match_type_.lpm_;
}
const ::p4::v1::FieldMatch_Range&
FieldMatch::_Internal::range(const FieldMatch* msg) {
  return *msg->field_match_type_.range_;
}
const ::p4::v1::FieldMatch_Optional&
FieldMatch::_Internal::optional(const FieldMatch* msg) {
  return *msg->field_match_type_.optional_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
FieldMatch::_Internal::other(const FieldMatch* msg) {
  return *msg->field_match_type_.other_;
}
void FieldMatch::set_allocated_exact(::p4::v1::FieldMatch_Exact* exact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (exact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::FieldMatch_Exact>::GetOwningArena(exact);
    if (message_arena != submessage_arena) {
      exact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact, submessage_arena);
    }
    set_has_exact();
    field_match_type_.exact_ = exact;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.exact)
}
void FieldMatch::set_allocated_ternary(::p4::v1::FieldMatch_Ternary* ternary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (ternary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::FieldMatch_Ternary>::GetOwningArena(ternary);
    if (message_arena != submessage_arena) {
      ternary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ternary, submessage_arena);
    }
    set_has_ternary();
    field_match_type_.ternary_ = ternary;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.ternary)
}
void FieldMatch::set_allocated_lpm(::p4::v1::FieldMatch_LPM* lpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (lpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::FieldMatch_LPM>::GetOwningArena(lpm);
    if (message_arena != submessage_arena) {
      lpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lpm, submessage_arena);
    }
    set_has_lpm();
    field_match_type_.lpm_ = lpm;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.lpm)
}
void FieldMatch::set_allocated_range(::p4::v1::FieldMatch_Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::FieldMatch_Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    field_match_type_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.range)
}
void FieldMatch::set_allocated_optional(::p4::v1::FieldMatch_Optional* optional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (optional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::FieldMatch_Optional>::GetOwningArena(optional);
    if (message_arena != submessage_arena) {
      optional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional, submessage_arena);
    }
    set_has_optional();
    field_match_type_.optional_ = optional;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.optional)
}
void FieldMatch::set_allocated_other(::PROTOBUF_NAMESPACE_ID::Any* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_field_match_type();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    field_match_type_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.other)
}
void FieldMatch::clear_other() {
  if (_internal_has_other()) {
    if (GetArenaForAllocation() == nullptr) {
      delete field_match_type_.other_;
    }
    clear_has_field_match_type();
  }
}
FieldMatch::FieldMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.FieldMatch)
}
FieldMatch::FieldMatch(const FieldMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_id_ = from.field_id_;
  clear_has_field_match_type();
  switch (from.field_match_type_case()) {
    case kExact: {
      _internal_mutable_exact()->::p4::v1::FieldMatch_Exact::MergeFrom(from._internal_exact());
      break;
    }
    case kTernary: {
      _internal_mutable_ternary()->::p4::v1::FieldMatch_Ternary::MergeFrom(from._internal_ternary());
      break;
    }
    case kLpm: {
      _internal_mutable_lpm()->::p4::v1::FieldMatch_LPM::MergeFrom(from._internal_lpm());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::p4::v1::FieldMatch_Range::MergeFrom(from._internal_range());
      break;
    }
    case kOptional: {
      _internal_mutable_optional()->::p4::v1::FieldMatch_Optional::MergeFrom(from._internal_optional());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch)
}

void FieldMatch::SharedCtor() {
field_id_ = 0u;
clear_has_field_match_type();
}

FieldMatch::~FieldMatch() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_field_match_type()) {
    clear_field_match_type();
  }
}

void FieldMatch::ArenaDtor(void* object) {
  FieldMatch* _this = reinterpret_cast< FieldMatch* >(object);
  (void)_this;
}
void FieldMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMatch::clear_field_match_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.FieldMatch)
  switch (field_match_type_case()) {
    case kExact: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.exact_;
      }
      break;
    }
    case kTernary: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.ternary_;
      }
      break;
    }
    case kLpm: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.lpm_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.range_;
      }
      break;
    }
    case kOptional: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.optional_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete field_match_type_.other_;
      }
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELD_MATCH_TYPE_NOT_SET;
}


void FieldMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_id_ = 0u;
  clear_field_match_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.FieldMatch.Exact exact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.FieldMatch.Ternary ternary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ternary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.FieldMatch.LPM lpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lpm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.FieldMatch.Range range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.FieldMatch.Optional optional = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any other = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->_internal_field_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_id(), target);
  }

  // .p4.v1.FieldMatch.Exact exact = 2;
  if (_internal_has_exact()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exact(this), target, stream);
  }

  // .p4.v1.FieldMatch.Ternary ternary = 3;
  if (_internal_has_ternary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ternary(this), target, stream);
  }

  // .p4.v1.FieldMatch.LPM lpm = 4;
  if (_internal_has_lpm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lpm(this), target, stream);
  }

  // .p4.v1.FieldMatch.Range range = 6;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::range(this), target, stream);
  }

  // .p4.v1.FieldMatch.Optional optional = 7;
  if (_internal_has_optional()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::optional(this), target, stream);
  }

  // .google.protobuf.Any other = 100;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch)
  return target;
}

size_t FieldMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->_internal_field_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_field_id());
  }

  switch (field_match_type_case()) {
    // .p4.v1.FieldMatch.Exact exact = 2;
    case kExact: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.exact_);
      break;
    }
    // .p4.v1.FieldMatch.Ternary ternary = 3;
    case kTernary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.ternary_);
      break;
    }
    // .p4.v1.FieldMatch.LPM lpm = 4;
    case kLpm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.lpm_);
      break;
    }
    // .p4.v1.FieldMatch.Range range = 6;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.range_);
      break;
    }
    // .p4.v1.FieldMatch.Optional optional = 7;
    case kOptional: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.optional_);
      break;
    }
    // .google.protobuf.Any other = 100;
    case kOther: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.other_);
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMatch::GetClassData() const { return &_class_data_; }

void FieldMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMatch *>(to)->MergeFrom(
      static_cast<const FieldMatch &>(from));
}


void FieldMatch::MergeFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_field_id() != 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  switch (from.field_match_type_case()) {
    case kExact: {
      _internal_mutable_exact()->::p4::v1::FieldMatch_Exact::MergeFrom(from._internal_exact());
      break;
    }
    case kTernary: {
      _internal_mutable_ternary()->::p4::v1::FieldMatch_Ternary::MergeFrom(from._internal_ternary());
      break;
    }
    case kLpm: {
      _internal_mutable_lpm()->::p4::v1::FieldMatch_LPM::MergeFrom(from._internal_lpm());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::p4::v1::FieldMatch_Range::MergeFrom(from._internal_range());
      break;
    }
    case kOptional: {
      _internal_mutable_optional()->::p4::v1::FieldMatch_Optional::MergeFrom(from._internal_optional());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMatch::CopyFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch::IsInitialized() const {
  return true;
}

void FieldMatch::InternalSwap(FieldMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(field_id_, other->field_id_);
  swap(field_match_type_, other->field_match_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[31]);
}

// ===================================================================

class TableAction::_Internal {
 public:
  static const ::p4::v1::Action& action(const TableAction* msg);
  static const ::p4::v1::ActionProfileActionSet& action_profile_action_set(const TableAction* msg);
};

const ::p4::v1::Action&
TableAction::_Internal::action(const TableAction* msg) {
  return *msg->type_.action_;
}
const ::p4::v1::ActionProfileActionSet&
TableAction::_Internal::action_profile_action_set(const TableAction* msg) {
  return *msg->type_.action_profile_action_set_;
}
void TableAction::set_allocated_action(::p4::v1::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::Action>::GetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    type_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableAction.action)
}
void TableAction::set_allocated_action_profile_action_set(::p4::v1::ActionProfileActionSet* action_profile_action_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (action_profile_action_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::ActionProfileActionSet>::GetOwningArena(action_profile_action_set);
    if (message_arena != submessage_arena) {
      action_profile_action_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_profile_action_set, submessage_arena);
    }
    set_has_action_profile_action_set();
    type_.action_profile_action_set_ = action_profile_action_set;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableAction.action_profile_action_set)
}
TableAction::TableAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.TableAction)
}
TableAction::TableAction(const TableAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kAction: {
      _internal_mutable_action()->::p4::v1::Action::MergeFrom(from._internal_action());
      break;
    }
    case kActionProfileMemberId: {
      _internal_set_action_profile_member_id(from._internal_action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      _internal_set_action_profile_group_id(from._internal_action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      _internal_mutable_action_profile_action_set()->::p4::v1::ActionProfileActionSet::MergeFrom(from._internal_action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableAction)
}

void TableAction::SharedCtor() {
clear_has_type();
}

TableAction::~TableAction() {
  // @@protoc_insertion_point(destructor:p4.v1.TableAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void TableAction::ArenaDtor(void* object) {
  TableAction* _this = reinterpret_cast< TableAction* >(object);
  (void)_this;
}
void TableAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableAction::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.TableAction)
  switch (type_case()) {
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.action_;
      }
      break;
    }
    case kActionProfileMemberId: {
      // No need to clear
      break;
    }
    case kActionProfileGroupId: {
      // No need to clear
      break;
    }
    case kActionProfileActionSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.action_profile_action_set_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TableAction::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 action_profile_member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 action_profile_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_profile_action_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.Action action = 1;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // uint32 action_profile_member_id = 2;
  if (_internal_has_action_profile_member_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_profile_member_id(), target);
  }

  // uint32 action_profile_group_id = 3;
  if (_internal_has_action_profile_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_action_profile_group_id(), target);
  }

  // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
  if (_internal_has_action_profile_action_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action_profile_action_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableAction)
  return target;
}

size_t TableAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .p4.v1.Action action = 1;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.action_);
      break;
    }
    // uint32 action_profile_member_id = 2;
    case kActionProfileMemberId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_profile_member_id());
      break;
    }
    // uint32 action_profile_group_id = 3;
    case kActionProfileGroupId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_profile_group_id());
      break;
    }
    // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
    case kActionProfileActionSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.action_profile_action_set_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableAction::GetClassData() const { return &_class_data_; }

void TableAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableAction *>(to)->MergeFrom(
      static_cast<const TableAction &>(from));
}


void TableAction::MergeFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kAction: {
      _internal_mutable_action()->::p4::v1::Action::MergeFrom(from._internal_action());
      break;
    }
    case kActionProfileMemberId: {
      _internal_set_action_profile_member_id(from._internal_action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      _internal_set_action_profile_group_id(from._internal_action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      _internal_mutable_action_profile_action_set()->::p4::v1::ActionProfileActionSet::MergeFrom(from._internal_action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableAction::CopyFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableAction::IsInitialized() const {
  return true;
}

void TableAction::InternalSwap(TableAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[32]);
}

// ===================================================================

class Action_Param::_Internal {
 public:
};

Action_Param::Action_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Action.Param)
}
Action_Param::Action_Param(const Action_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  param_id_ = from.param_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Action.Param)
}

void Action_Param::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param_id_ = 0u;
}

Action_Param::~Action_Param() {
  // @@protoc_insertion_point(destructor:p4.v1.Action.Param)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_Param::ArenaDtor(void* object) {
  Action_Param* _this = reinterpret_cast< Action_Param* >(object);
  (void)_this;
}
void Action_Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  param_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 param_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          param_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action_Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 param_id = 2;
  if (this->_internal_param_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_param_id(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Action.Param)
  return target;
}

size_t Action_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Action.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 param_id = 2;
  if (this->_internal_param_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_param_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_Param::GetClassData() const { return &_class_data_; }

void Action_Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_Param *>(to)->MergeFrom(
      static_cast<const Action_Param &>(from));
}


void Action_Param::MergeFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_param_id() != 0) {
    _internal_set_param_id(from._internal_param_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_Param::CopyFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Param::IsInitialized() const {
  return true;
}

void Action_Param::InternalSwap(Action_Param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(param_id_, other->param_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_Param::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[33]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Action)
}

void Action::SharedCtor() {
action_id_ = 0u;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:p4.v1.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  action_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.Action.Param params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 action_id = 1;
  if (this->_internal_action_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // repeated .p4.v1.Action.Param params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Action.Param params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 action_id = 1;
  if (this->_internal_action_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from._internal_action_id() != 0) {
    _internal_set_action_id(from._internal_action_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[34]);
}

// ===================================================================

class ActionProfileActionSet::_Internal {
 public:
};

ActionProfileActionSet::ActionProfileActionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  action_profile_actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ActionProfileActionSet)
}
ActionProfileActionSet::ActionProfileActionSet(const ActionProfileActionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      action_profile_actions_(from.action_profile_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileActionSet)
}

void ActionProfileActionSet::SharedCtor() {
}

ActionProfileActionSet::~ActionProfileActionSet() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileActionSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfileActionSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionProfileActionSet::ArenaDtor(void* object) {
  ActionProfileActionSet* _this = reinterpret_cast< ActionProfileActionSet* >(object);
  (void)_this;
}
void ActionProfileActionSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfileActionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfileActionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileActionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_profile_actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfileActionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_profile_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileActionSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileActionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_profile_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_action_profile_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileActionSet)
  return target;
}

size_t ActionProfileActionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileActionSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
  total_size += 1UL * this->_internal_action_profile_actions_size();
  for (const auto& msg : this->action_profile_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfileActionSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfileActionSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfileActionSet::GetClassData() const { return &_class_data_; }

void ActionProfileActionSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfileActionSet *>(to)->MergeFrom(
      static_cast<const ActionProfileActionSet &>(from));
}


void ActionProfileActionSet::MergeFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_profile_actions_.MergeFrom(from.action_profile_actions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfileActionSet::CopyFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileActionSet::IsInitialized() const {
  return true;
}

void ActionProfileActionSet::InternalSwap(ActionProfileActionSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  action_profile_actions_.InternalSwap(&other->action_profile_actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileActionSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[35]);
}

// ===================================================================

class ActionProfileAction::_Internal {
 public:
  static const ::p4::v1::Action& action(const ActionProfileAction* msg);
};

const ::p4::v1::Action&
ActionProfileAction::_Internal::action(const ActionProfileAction* msg) {
  return *msg->action_;
}
ActionProfileAction::ActionProfileAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ActionProfileAction)
}
ActionProfileAction::ActionProfileAction(const ActionProfileAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::p4::v1::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  weight_ = from.weight_;
  clear_has_watch_kind();
  switch (from.watch_kind_case()) {
    case kWatch: {
      _internal_set_watch(from._internal_watch());
      break;
    }
    case kWatchPort: {
      _internal_set_watch_port(from._internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileAction)
}

void ActionProfileAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&action_)) + sizeof(weight_));
clear_has_watch_kind();
}

ActionProfileAction::~ActionProfileAction() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfileAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_;
  if (has_watch_kind()) {
    clear_watch_kind();
  }
}

void ActionProfileAction::ArenaDtor(void* object) {
  ActionProfileAction* _this = reinterpret_cast< ActionProfileAction* >(object);
  (void)_this;
}
void ActionProfileAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfileAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfileAction::clear_watch_kind() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.ActionProfileAction)
  switch (watch_kind_case()) {
    case kWatch: {
      // No need to clear
      break;
    }
    case kWatchPort: {
      watch_kind_.watch_port_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WATCH_KIND_NOT_SET;
}


void ActionProfileAction::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  weight_ = 0;
  clear_watch_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfileAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 watch = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_watch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes watch_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_watch_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.Action action = 1;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weight(), target);
  }

  // int32 watch = 3 [deprecated = true];
  if (_internal_has_watch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_watch(), target);
  }

  // bytes watch_port = 4;
  if (_internal_has_watch_port()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_watch_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileAction)
  return target;
}

size_t ActionProfileAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Action action = 1;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  switch (watch_kind_case()) {
    // int32 watch = 3 [deprecated = true];
    case kWatch: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_watch());
      break;
    }
    // bytes watch_port = 4;
    case kWatchPort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfileAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfileAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfileAction::GetClassData() const { return &_class_data_; }

void ActionProfileAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfileAction *>(to)->MergeFrom(
      static_cast<const ActionProfileAction &>(from));
}


void ActionProfileAction::MergeFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action()) {
    _internal_mutable_action()->::p4::v1::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  switch (from.watch_kind_case()) {
    case kWatch: {
      _internal_set_watch(from._internal_watch());
      break;
    }
    case kWatchPort: {
      _internal_set_watch_port(from._internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfileAction::CopyFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileAction::IsInitialized() const {
  return true;
}

void ActionProfileAction::InternalSwap(ActionProfileAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProfileAction, weight_)
      + sizeof(ActionProfileAction::weight_)
      - PROTOBUF_FIELD_OFFSET(ActionProfileAction, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
  swap(watch_kind_, other->watch_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[36]);
}

// ===================================================================

class ActionProfileMember::_Internal {
 public:
  static const ::p4::v1::Action& action(const ActionProfileMember* msg);
};

const ::p4::v1::Action&
ActionProfileMember::_Internal::action(const ActionProfileMember* msg) {
  return *msg->action_;
}
ActionProfileMember::ActionProfileMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ActionProfileMember)
}
ActionProfileMember::ActionProfileMember(const ActionProfileMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::p4::v1::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&action_profile_id_, &from.action_profile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&action_profile_id_)) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileMember)
}

void ActionProfileMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(member_id_));
}

ActionProfileMember::~ActionProfileMember() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileMember)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfileMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void ActionProfileMember::ArenaDtor(void* object) {
  ActionProfileMember* _this = reinterpret_cast< ActionProfileMember* >(object);
  (void)_this;
}
void ActionProfileMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfileMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfileMember::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&action_profile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&action_profile_id_)) + sizeof(member_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfileMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 action_profile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 action_profile_id = 1;
  if (this->_internal_action_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_profile_id(), target);
  }

  // uint32 member_id = 2;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_member_id(), target);
  }

  // .p4.v1.Action action = 3;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileMember)
  return target;
}

size_t ActionProfileMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Action action = 3;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // uint32 action_profile_id = 1;
  if (this->_internal_action_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_profile_id());
  }

  // uint32 member_id = 2;
  if (this->_internal_member_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_member_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfileMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfileMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfileMember::GetClassData() const { return &_class_data_; }

void ActionProfileMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfileMember *>(to)->MergeFrom(
      static_cast<const ActionProfileMember &>(from));
}


void ActionProfileMember::MergeFrom(const ActionProfileMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileMember)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action()) {
    _internal_mutable_action()->::p4::v1::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_action_profile_id() != 0) {
    _internal_set_action_profile_id(from._internal_action_profile_id());
  }
  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfileMember::CopyFrom(const ActionProfileMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileMember::IsInitialized() const {
  return true;
}

void ActionProfileMember::InternalSwap(ActionProfileMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProfileMember, member_id_)
      + sizeof(ActionProfileMember::member_id_)
      - PROTOBUF_FIELD_OFFSET(ActionProfileMember, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[37]);
}

// ===================================================================

class ActionProfileGroup_Member::_Internal {
 public:
};

ActionProfileGroup_Member::ActionProfileGroup_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ActionProfileGroup.Member)
}
ActionProfileGroup_Member::ActionProfileGroup_Member(const ActionProfileGroup_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(weight_));
  clear_has_watch_kind();
  switch (from.watch_kind_case()) {
    case kWatch: {
      _internal_set_watch(from._internal_watch());
      break;
    }
    case kWatchPort: {
      _internal_set_watch_port(from._internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileGroup.Member)
}

void ActionProfileGroup_Member::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&member_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(weight_));
clear_has_watch_kind();
}

ActionProfileGroup_Member::~ActionProfileGroup_Member() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileGroup.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfileGroup_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_watch_kind()) {
    clear_watch_kind();
  }
}

void ActionProfileGroup_Member::ArenaDtor(void* object) {
  ActionProfileGroup_Member* _this = reinterpret_cast< ActionProfileGroup_Member* >(object);
  (void)_this;
}
void ActionProfileGroup_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfileGroup_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfileGroup_Member::clear_watch_kind() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.ActionProfileGroup.Member)
  switch (watch_kind_case()) {
    case kWatch: {
      // No need to clear
      break;
    }
    case kWatchPort: {
      watch_kind_.watch_port_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WATCH_KIND_NOT_SET;
}


void ActionProfileGroup_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileGroup.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(weight_));
  clear_watch_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfileGroup_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 watch = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_watch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes watch_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_watch_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileGroup_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileGroup.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 member_id = 1;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_member_id(), target);
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weight(), target);
  }

  // int32 watch = 3 [deprecated = true];
  if (_internal_has_watch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_watch(), target);
  }

  // bytes watch_port = 4;
  if (_internal_has_watch_port()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_watch_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileGroup.Member)
  return target;
}

size_t ActionProfileGroup_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileGroup.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 member_id = 1;
  if (this->_internal_member_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_member_id());
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  switch (watch_kind_case()) {
    // int32 watch = 3 [deprecated = true];
    case kWatch: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_watch());
      break;
    }
    // bytes watch_port = 4;
    case kWatchPort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfileGroup_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfileGroup_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfileGroup_Member::GetClassData() const { return &_class_data_; }

void ActionProfileGroup_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfileGroup_Member *>(to)->MergeFrom(
      static_cast<const ActionProfileGroup_Member &>(from));
}


void ActionProfileGroup_Member::MergeFrom(const ActionProfileGroup_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileGroup.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  switch (from.watch_kind_case()) {
    case kWatch: {
      _internal_set_watch(from._internal_watch());
      break;
    }
    case kWatchPort: {
      _internal_set_watch_port(from._internal_watch_port());
      break;
    }
    case WATCH_KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfileGroup_Member::CopyFrom(const ActionProfileGroup_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileGroup.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileGroup_Member::IsInitialized() const {
  return true;
}

void ActionProfileGroup_Member::InternalSwap(ActionProfileGroup_Member* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProfileGroup_Member, weight_)
      + sizeof(ActionProfileGroup_Member::weight_)
      - PROTOBUF_FIELD_OFFSET(ActionProfileGroup_Member, member_id_)>(
          reinterpret_cast<char*>(&member_id_),
          reinterpret_cast<char*>(&other->member_id_));
  swap(watch_kind_, other->watch_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileGroup_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[38]);
}

// ===================================================================

class ActionProfileGroup::_Internal {
 public:
};

ActionProfileGroup::ActionProfileGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ActionProfileGroup)
}
ActionProfileGroup::ActionProfileGroup(const ActionProfileGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_profile_id_, &from.action_profile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&action_profile_id_)) + sizeof(max_size_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileGroup)
}

void ActionProfileGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_profile_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&action_profile_id_)) + sizeof(max_size_));
}

ActionProfileGroup::~ActionProfileGroup() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfileGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionProfileGroup::ArenaDtor(void* object) {
  ActionProfileGroup* _this = reinterpret_cast< ActionProfileGroup* >(object);
  (void)_this;
}
void ActionProfileGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfileGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfileGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  ::memset(&action_profile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&action_profile_id_)) + sizeof(max_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfileGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 action_profile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.ActionProfileGroup.Member members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 action_profile_id = 1;
  if (this->_internal_action_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_profile_id(), target);
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // repeated .p4.v1.ActionProfileGroup.Member members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  // int32 max_size = 4;
  if (this->_internal_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileGroup)
  return target;
}

size_t ActionProfileGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.ActionProfileGroup.Member members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 action_profile_id = 1;
  if (this->_internal_action_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_profile_id());
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  // int32 max_size = 4;
  if (this->_internal_max_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfileGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfileGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfileGroup::GetClassData() const { return &_class_data_; }

void ActionProfileGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfileGroup *>(to)->MergeFrom(
      static_cast<const ActionProfileGroup &>(from));
}


void ActionProfileGroup::MergeFrom(const ActionProfileGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_action_profile_id() != 0) {
    _internal_set_action_profile_id(from._internal_action_profile_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfileGroup::CopyFrom(const ActionProfileGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileGroup::IsInitialized() const {
  return true;
}

void ActionProfileGroup::InternalSwap(ActionProfileGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProfileGroup, max_size_)
      + sizeof(ActionProfileGroup::max_size_)
      - PROTOBUF_FIELD_OFFSET(ActionProfileGroup, action_profile_id_)>(
          reinterpret_cast<char*>(&action_profile_id_),
          reinterpret_cast<char*>(&other->action_profile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[39]);
}

// ===================================================================

class Index::_Internal {
 public:
};

Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Index)
}

void Index::SharedCtor() {
index_ = int64_t{0};
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:p4.v1.Index)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Index::ArenaDtor(void* object) {
  Index* _this = reinterpret_cast< Index* >(object);
  (void)_this;
}
void Index::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Index::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Index)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }

void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Index *>(to)->MergeFrom(
      static_cast<const Index &>(from));
}


void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Index)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[40]);
}

// ===================================================================

class MeterEntry::_Internal {
 public:
  static const ::p4::v1::Index& index(const MeterEntry* msg);
  static const ::p4::v1::MeterConfig& config(const MeterEntry* msg);
};

const ::p4::v1::Index&
MeterEntry::_Internal::index(const MeterEntry* msg) {
  return *msg->index_;
}
const ::p4::v1::MeterConfig&
MeterEntry::_Internal::config(const MeterEntry* msg) {
  return *msg->config_;
}
MeterEntry::MeterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.MeterEntry)
}
MeterEntry::MeterEntry(const MeterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::p4::v1::MeterConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  meter_id_ = from.meter_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MeterEntry)
}

void MeterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&meter_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(meter_id_));
}

MeterEntry::~MeterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.MeterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete index_;
  if (this != internal_default_instance()) delete config_;
}

void MeterEntry::ArenaDtor(void* object) {
  MeterEntry* _this = reinterpret_cast< MeterEntry* >(object);
  (void)_this;
}
void MeterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MeterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  meter_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 meter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          meter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Index index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.MeterConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MeterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 meter_id = 1;
  if (this->_internal_meter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_meter_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::index(this), target, stream);
  }

  // .p4.v1.MeterConfig config = 3;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MeterEntry)
  return target;
}

size_t MeterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MeterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  // .p4.v1.MeterConfig config = 3;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint32 meter_id = 1;
  if (this->_internal_meter_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_meter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeterEntry::GetClassData() const { return &_class_data_; }

void MeterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeterEntry *>(to)->MergeFrom(
      static_cast<const MeterEntry &>(from));
}


void MeterEntry::MergeFrom(const MeterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_mutable_index()->::p4::v1::Index::MergeFrom(from._internal_index());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::p4::v1::MeterConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_meter_id() != 0) {
    _internal_set_meter_id(from._internal_meter_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeterEntry::CopyFrom(const MeterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterEntry::IsInitialized() const {
  return true;
}

void MeterEntry::InternalSwap(MeterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeterEntry, meter_id_)
      + sizeof(MeterEntry::meter_id_)
      - PROTOBUF_FIELD_OFFSET(MeterEntry, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[41]);
}

// ===================================================================

class DirectMeterEntry::_Internal {
 public:
  static const ::p4::v1::TableEntry& table_entry(const DirectMeterEntry* msg);
  static const ::p4::v1::MeterConfig& config(const DirectMeterEntry* msg);
};

const ::p4::v1::TableEntry&
DirectMeterEntry::_Internal::table_entry(const DirectMeterEntry* msg) {
  return *msg->table_entry_;
}
const ::p4::v1::MeterConfig&
DirectMeterEntry::_Internal::config(const DirectMeterEntry* msg) {
  return *msg->config_;
}
DirectMeterEntry::DirectMeterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DirectMeterEntry)
}
DirectMeterEntry::DirectMeterEntry(const DirectMeterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_entry()) {
    table_entry_ = new ::p4::v1::TableEntry(*from.table_entry_);
  } else {
    table_entry_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::p4::v1::MeterConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DirectMeterEntry)
}

void DirectMeterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&table_entry_)) + sizeof(config_));
}

DirectMeterEntry::~DirectMeterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DirectMeterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DirectMeterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_entry_;
  if (this != internal_default_instance()) delete config_;
}

void DirectMeterEntry::ArenaDtor(void* object) {
  DirectMeterEntry* _this = reinterpret_cast< DirectMeterEntry* >(object);
  (void)_this;
}
void DirectMeterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectMeterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectMeterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DirectMeterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && table_entry_ != nullptr) {
    delete table_entry_;
  }
  table_entry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectMeterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.TableEntry table_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.MeterConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectMeterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DirectMeterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->_internal_has_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_entry(this), target, stream);
  }

  // .p4.v1.MeterConfig config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DirectMeterEntry)
  return target;
}

size_t DirectMeterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DirectMeterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->_internal_has_table_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_entry_);
  }

  // .p4.v1.MeterConfig config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectMeterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectMeterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectMeterEntry::GetClassData() const { return &_class_data_; }

void DirectMeterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectMeterEntry *>(to)->MergeFrom(
      static_cast<const DirectMeterEntry &>(from));
}


void DirectMeterEntry::MergeFrom(const DirectMeterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DirectMeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_entry()) {
    _internal_mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from._internal_table_entry());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::p4::v1::MeterConfig::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectMeterEntry::CopyFrom(const DirectMeterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DirectMeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMeterEntry::IsInitialized() const {
  return true;
}

void DirectMeterEntry::InternalSwap(DirectMeterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectMeterEntry, config_)
      + sizeof(DirectMeterEntry::config_)
      - PROTOBUF_FIELD_OFFSET(DirectMeterEntry, table_entry_)>(
          reinterpret_cast<char*>(&table_entry_),
          reinterpret_cast<char*>(&other->table_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectMeterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[42]);
}

// ===================================================================

class MeterConfig::_Internal {
 public:
};

MeterConfig::MeterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.MeterConfig)
}
MeterConfig::MeterConfig(const MeterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cir_, &from.cir_,
    static_cast<size_t>(reinterpret_cast<char*>(&pburst_) -
    reinterpret_cast<char*>(&cir_)) + sizeof(pburst_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.MeterConfig)
}

void MeterConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cir_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pburst_) -
    reinterpret_cast<char*>(&cir_)) + sizeof(pburst_));
}

MeterConfig::~MeterConfig() {
  // @@protoc_insertion_point(destructor:p4.v1.MeterConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeterConfig::ArenaDtor(void* object) {
  MeterConfig* _this = reinterpret_cast< MeterConfig* >(object);
  (void)_this;
}
void MeterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MeterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pburst_) -
      reinterpret_cast<char*>(&cir_)) + sizeof(pburst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cburst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cburst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pburst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pburst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MeterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cir = 1;
  if (this->_internal_cir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cir(), target);
  }

  // int64 cburst = 2;
  if (this->_internal_cburst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cburst(), target);
  }

  // int64 pir = 3;
  if (this->_internal_pir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pir(), target);
  }

  // int64 pburst = 4;
  if (this->_internal_pburst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_pburst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MeterConfig)
  return target;
}

size_t MeterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MeterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 cir = 1;
  if (this->_internal_cir() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_cir());
  }

  // int64 cburst = 2;
  if (this->_internal_cburst() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_cburst());
  }

  // int64 pir = 3;
  if (this->_internal_pir() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pir());
  }

  // int64 pburst = 4;
  if (this->_internal_pburst() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pburst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeterConfig::GetClassData() const { return &_class_data_; }

void MeterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeterConfig *>(to)->MergeFrom(
      static_cast<const MeterConfig &>(from));
}


void MeterConfig::MergeFrom(const MeterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MeterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cir() != 0) {
    _internal_set_cir(from._internal_cir());
  }
  if (from._internal_cburst() != 0) {
    _internal_set_cburst(from._internal_cburst());
  }
  if (from._internal_pir() != 0) {
    _internal_set_pir(from._internal_pir());
  }
  if (from._internal_pburst() != 0) {
    _internal_set_pburst(from._internal_pburst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeterConfig::CopyFrom(const MeterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MeterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterConfig::IsInitialized() const {
  return true;
}

void MeterConfig::InternalSwap(MeterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeterConfig, pburst_)
      + sizeof(MeterConfig::pburst_)
      - PROTOBUF_FIELD_OFFSET(MeterConfig, cir_)>(
          reinterpret_cast<char*>(&cir_),
          reinterpret_cast<char*>(&other->cir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeterConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[43]);
}

// ===================================================================

class CounterEntry::_Internal {
 public:
  static const ::p4::v1::Index& index(const CounterEntry* msg);
  static const ::p4::v1::CounterData& data(const CounterEntry* msg);
};

const ::p4::v1::Index&
CounterEntry::_Internal::index(const CounterEntry* msg) {
  return *msg->index_;
}
const ::p4::v1::CounterData&
CounterEntry::_Internal::data(const CounterEntry* msg) {
  return *msg->data_;
}
CounterEntry::CounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.CounterEntry)
}
CounterEntry::CounterEntry(const CounterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::p4::v1::CounterData(*from.data_);
  } else {
    data_ = nullptr;
  }
  counter_id_ = from.counter_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.CounterEntry)
}

void CounterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&counter_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(counter_id_));
}

CounterEntry::~CounterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.CounterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CounterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete index_;
  if (this != internal_default_instance()) delete data_;
}

void CounterEntry::ArenaDtor(void* object) {
  CounterEntry* _this = reinterpret_cast< CounterEntry* >(object);
  (void)_this;
}
void CounterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CounterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CounterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  counter_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Index index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.CounterData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CounterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CounterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 counter_id = 1;
  if (this->_internal_counter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_counter_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::index(this), target, stream);
  }

  // .p4.v1.CounterData data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CounterEntry)
  return target;
}

size_t CounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CounterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  // .p4.v1.CounterData data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 counter_id = 1;
  if (this->_internal_counter_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_counter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CounterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterEntry::GetClassData() const { return &_class_data_; }

void CounterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CounterEntry *>(to)->MergeFrom(
      static_cast<const CounterEntry &>(from));
}


void CounterEntry::MergeFrom(const CounterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_mutable_index()->::p4::v1::Index::MergeFrom(from._internal_index());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::p4::v1::CounterData::MergeFrom(from._internal_data());
  }
  if (from._internal_counter_id() != 0) {
    _internal_set_counter_id(from._internal_counter_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterEntry::CopyFrom(const CounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterEntry::IsInitialized() const {
  return true;
}

void CounterEntry::InternalSwap(CounterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CounterEntry, counter_id_)
      + sizeof(CounterEntry::counter_id_)
      - PROTOBUF_FIELD_OFFSET(CounterEntry, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[44]);
}

// ===================================================================

class DirectCounterEntry::_Internal {
 public:
  static const ::p4::v1::TableEntry& table_entry(const DirectCounterEntry* msg);
  static const ::p4::v1::CounterData& data(const DirectCounterEntry* msg);
};

const ::p4::v1::TableEntry&
DirectCounterEntry::_Internal::table_entry(const DirectCounterEntry* msg) {
  return *msg->table_entry_;
}
const ::p4::v1::CounterData&
DirectCounterEntry::_Internal::data(const DirectCounterEntry* msg) {
  return *msg->data_;
}
DirectCounterEntry::DirectCounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DirectCounterEntry)
}
DirectCounterEntry::DirectCounterEntry(const DirectCounterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_entry()) {
    table_entry_ = new ::p4::v1::TableEntry(*from.table_entry_);
  } else {
    table_entry_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::p4::v1::CounterData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DirectCounterEntry)
}

void DirectCounterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&table_entry_)) + sizeof(data_));
}

DirectCounterEntry::~DirectCounterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DirectCounterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DirectCounterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_entry_;
  if (this != internal_default_instance()) delete data_;
}

void DirectCounterEntry::ArenaDtor(void* object) {
  DirectCounterEntry* _this = reinterpret_cast< DirectCounterEntry* >(object);
  (void)_this;
}
void DirectCounterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectCounterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectCounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DirectCounterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && table_entry_ != nullptr) {
    delete table_entry_;
  }
  table_entry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectCounterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.TableEntry table_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.CounterData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectCounterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DirectCounterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->_internal_has_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_entry(this), target, stream);
  }

  // .p4.v1.CounterData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DirectCounterEntry)
  return target;
}

size_t DirectCounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DirectCounterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->_internal_has_table_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_entry_);
  }

  // .p4.v1.CounterData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectCounterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectCounterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectCounterEntry::GetClassData() const { return &_class_data_; }

void DirectCounterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectCounterEntry *>(to)->MergeFrom(
      static_cast<const DirectCounterEntry &>(from));
}


void DirectCounterEntry::MergeFrom(const DirectCounterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DirectCounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_entry()) {
    _internal_mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from._internal_table_entry());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::p4::v1::CounterData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectCounterEntry::CopyFrom(const DirectCounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DirectCounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectCounterEntry::IsInitialized() const {
  return true;
}

void DirectCounterEntry::InternalSwap(DirectCounterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectCounterEntry, data_)
      + sizeof(DirectCounterEntry::data_)
      - PROTOBUF_FIELD_OFFSET(DirectCounterEntry, table_entry_)>(
          reinterpret_cast<char*>(&table_entry_),
          reinterpret_cast<char*>(&other->table_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectCounterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[45]);
}

// ===================================================================

class CounterData::_Internal {
 public:
};

CounterData::CounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.CounterData)
}
CounterData::CounterData(const CounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&byte_count_, &from.byte_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&byte_count_)) + sizeof(packet_count_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.CounterData)
}

void CounterData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&byte_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&byte_count_)) + sizeof(packet_count_));
}

CounterData::~CounterData() {
  // @@protoc_insertion_point(destructor:p4.v1.CounterData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CounterData::ArenaDtor(void* object) {
  CounterData* _this = reinterpret_cast< CounterData* >(object);
  (void)_this;
}
void CounterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CounterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&byte_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_count_) -
      reinterpret_cast<char*>(&byte_count_)) + sizeof(packet_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 byte_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          byte_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 packet_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CounterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 byte_count = 1;
  if (this->_internal_byte_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_byte_count(), target);
  }

  // int64 packet_count = 2;
  if (this->_internal_packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_packet_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CounterData)
  return target;
}

size_t CounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CounterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 byte_count = 1;
  if (this->_internal_byte_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_count());
  }

  // int64 packet_count = 2;
  if (this->_internal_packet_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_packet_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CounterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterData::GetClassData() const { return &_class_data_; }

void CounterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CounterData *>(to)->MergeFrom(
      static_cast<const CounterData &>(from));
}


void CounterData::MergeFrom(const CounterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CounterData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_byte_count() != 0) {
    _internal_set_byte_count(from._internal_byte_count());
  }
  if (from._internal_packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterData::CopyFrom(const CounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterData::IsInitialized() const {
  return true;
}

void CounterData::InternalSwap(CounterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CounterData, packet_count_)
      + sizeof(CounterData::packet_count_)
      - PROTOBUF_FIELD_OFFSET(CounterData, byte_count_)>(
          reinterpret_cast<char*>(&byte_count_),
          reinterpret_cast<char*>(&other->byte_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[46]);
}

// ===================================================================

class PacketReplicationEngineEntry::_Internal {
 public:
  static const ::p4::v1::MulticastGroupEntry& multicast_group_entry(const PacketReplicationEngineEntry* msg);
  static const ::p4::v1::CloneSessionEntry& clone_session_entry(const PacketReplicationEngineEntry* msg);
};

const ::p4::v1::MulticastGroupEntry&
PacketReplicationEngineEntry::_Internal::multicast_group_entry(const PacketReplicationEngineEntry* msg) {
  return *msg->type_.multicast_group_entry_;
}
const ::p4::v1::CloneSessionEntry&
PacketReplicationEngineEntry::_Internal::clone_session_entry(const PacketReplicationEngineEntry* msg) {
  return *msg->type_.clone_session_entry_;
}
void PacketReplicationEngineEntry::set_allocated_multicast_group_entry(::p4::v1::MulticastGroupEntry* multicast_group_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (multicast_group_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::MulticastGroupEntry>::GetOwningArena(multicast_group_entry);
    if (message_arena != submessage_arena) {
      multicast_group_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multicast_group_entry, submessage_arena);
    }
    set_has_multicast_group_entry();
    type_.multicast_group_entry_ = multicast_group_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketReplicationEngineEntry.multicast_group_entry)
}
void PacketReplicationEngineEntry::set_allocated_clone_session_entry(::p4::v1::CloneSessionEntry* clone_session_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (clone_session_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::CloneSessionEntry>::GetOwningArena(clone_session_entry);
    if (message_arena != submessage_arena) {
      clone_session_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clone_session_entry, submessage_arena);
    }
    set_has_clone_session_entry();
    type_.clone_session_entry_ = clone_session_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketReplicationEngineEntry.clone_session_entry)
}
PacketReplicationEngineEntry::PacketReplicationEngineEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.PacketReplicationEngineEntry)
}
PacketReplicationEngineEntry::PacketReplicationEngineEntry(const PacketReplicationEngineEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kMulticastGroupEntry: {
      _internal_mutable_multicast_group_entry()->::p4::v1::MulticastGroupEntry::MergeFrom(from._internal_multicast_group_entry());
      break;
    }
    case kCloneSessionEntry: {
      _internal_mutable_clone_session_entry()->::p4::v1::CloneSessionEntry::MergeFrom(from._internal_clone_session_entry());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketReplicationEngineEntry)
}

void PacketReplicationEngineEntry::SharedCtor() {
clear_has_type();
}

PacketReplicationEngineEntry::~PacketReplicationEngineEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketReplicationEngineEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketReplicationEngineEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void PacketReplicationEngineEntry::ArenaDtor(void* object) {
  PacketReplicationEngineEntry* _this = reinterpret_cast< PacketReplicationEngineEntry* >(object);
  (void)_this;
}
void PacketReplicationEngineEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketReplicationEngineEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketReplicationEngineEntry::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.PacketReplicationEngineEntry)
  switch (type_case()) {
    case kMulticastGroupEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.multicast_group_entry_;
      }
      break;
    }
    case kCloneSessionEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.clone_session_entry_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void PacketReplicationEngineEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketReplicationEngineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketReplicationEngineEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multicast_group_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.CloneSessionEntry clone_session_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clone_session_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketReplicationEngineEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketReplicationEngineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
  if (_internal_has_multicast_group_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::multicast_group_entry(this), target, stream);
  }

  // .p4.v1.CloneSessionEntry clone_session_entry = 2;
  if (_internal_has_clone_session_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clone_session_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketReplicationEngineEntry)
  return target;
}

size_t PacketReplicationEngineEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketReplicationEngineEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
    case kMulticastGroupEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.multicast_group_entry_);
      break;
    }
    // .p4.v1.CloneSessionEntry clone_session_entry = 2;
    case kCloneSessionEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.clone_session_entry_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketReplicationEngineEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketReplicationEngineEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketReplicationEngineEntry::GetClassData() const { return &_class_data_; }

void PacketReplicationEngineEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketReplicationEngineEntry *>(to)->MergeFrom(
      static_cast<const PacketReplicationEngineEntry &>(from));
}


void PacketReplicationEngineEntry::MergeFrom(const PacketReplicationEngineEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketReplicationEngineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kMulticastGroupEntry: {
      _internal_mutable_multicast_group_entry()->::p4::v1::MulticastGroupEntry::MergeFrom(from._internal_multicast_group_entry());
      break;
    }
    case kCloneSessionEntry: {
      _internal_mutable_clone_session_entry()->::p4::v1::CloneSessionEntry::MergeFrom(from._internal_clone_session_entry());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketReplicationEngineEntry::CopyFrom(const PacketReplicationEngineEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketReplicationEngineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketReplicationEngineEntry::IsInitialized() const {
  return true;
}

void PacketReplicationEngineEntry::InternalSwap(PacketReplicationEngineEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketReplicationEngineEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[47]);
}

// ===================================================================

class Replica::_Internal {
 public:
};

Replica::Replica(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Replica)
}
Replica::Replica(const Replica& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&egress_port_, &from.egress_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_) -
    reinterpret_cast<char*>(&egress_port_)) + sizeof(instance_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Replica)
}

void Replica::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&egress_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instance_) -
    reinterpret_cast<char*>(&egress_port_)) + sizeof(instance_));
}

Replica::~Replica() {
  // @@protoc_insertion_point(destructor:p4.v1.Replica)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Replica::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Replica::ArenaDtor(void* object) {
  Replica* _this = reinterpret_cast< Replica* >(object);
  (void)_this;
}
void Replica::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Replica::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Replica::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Replica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&egress_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_) -
      reinterpret_cast<char*>(&egress_port_)) + sizeof(instance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Replica::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 egress_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          egress_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 instance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Replica::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Replica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 egress_port = 1;
  if (this->_internal_egress_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_egress_port(), target);
  }

  // uint32 instance = 2;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Replica)
  return target;
}

size_t Replica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Replica)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 egress_port = 1;
  if (this->_internal_egress_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_egress_port());
  }

  // uint32 instance = 2;
  if (this->_internal_instance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Replica::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Replica::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Replica::GetClassData() const { return &_class_data_; }

void Replica::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Replica *>(to)->MergeFrom(
      static_cast<const Replica &>(from));
}


void Replica::MergeFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Replica)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_egress_port() != 0) {
    _internal_set_egress_port(from._internal_egress_port());
  }
  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Replica::CopyFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Replica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replica::IsInitialized() const {
  return true;
}

void Replica::InternalSwap(Replica* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Replica, instance_)
      + sizeof(Replica::instance_)
      - PROTOBUF_FIELD_OFFSET(Replica, egress_port_)>(
          reinterpret_cast<char*>(&egress_port_),
          reinterpret_cast<char*>(&other->egress_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Replica::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[48]);
}

// ===================================================================

class MulticastGroupEntry::_Internal {
 public:
};

MulticastGroupEntry::MulticastGroupEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replicas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.MulticastGroupEntry)
}
MulticastGroupEntry::MulticastGroupEntry(const MulticastGroupEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multicast_group_id_ = from.multicast_group_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MulticastGroupEntry)
}

void MulticastGroupEntry::SharedCtor() {
multicast_group_id_ = 0u;
}

MulticastGroupEntry::~MulticastGroupEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.MulticastGroupEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MulticastGroupEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MulticastGroupEntry::ArenaDtor(void* object) {
  MulticastGroupEntry* _this = reinterpret_cast< MulticastGroupEntry* >(object);
  (void)_this;
}
void MulticastGroupEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MulticastGroupEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MulticastGroupEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MulticastGroupEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  multicast_group_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulticastGroupEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 multicast_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          multicast_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.Replica replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MulticastGroupEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MulticastGroupEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 multicast_group_id = 1;
  if (this->_internal_multicast_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_multicast_group_id(), target);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replicas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replicas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MulticastGroupEntry)
  return target;
}

size_t MulticastGroupEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MulticastGroupEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Replica replicas = 2;
  total_size += 1UL * this->_internal_replicas_size();
  for (const auto& msg : this->replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 multicast_group_id = 1;
  if (this->_internal_multicast_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_multicast_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MulticastGroupEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MulticastGroupEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MulticastGroupEntry::GetClassData() const { return &_class_data_; }

void MulticastGroupEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MulticastGroupEntry *>(to)->MergeFrom(
      static_cast<const MulticastGroupEntry &>(from));
}


void MulticastGroupEntry::MergeFrom(const MulticastGroupEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MulticastGroupEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from._internal_multicast_group_id() != 0) {
    _internal_set_multicast_group_id(from._internal_multicast_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MulticastGroupEntry::CopyFrom(const MulticastGroupEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MulticastGroupEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulticastGroupEntry::IsInitialized() const {
  return true;
}

void MulticastGroupEntry::InternalSwap(MulticastGroupEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replicas_.InternalSwap(&other->replicas_);
  swap(multicast_group_id_, other->multicast_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MulticastGroupEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[49]);
}

// ===================================================================

class CloneSessionEntry::_Internal {
 public:
};

CloneSessionEntry::CloneSessionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replicas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.CloneSessionEntry)
}
CloneSessionEntry::CloneSessionEntry(const CloneSessionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_length_bytes_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(packet_length_bytes_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.CloneSessionEntry)
}

void CloneSessionEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packet_length_bytes_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(packet_length_bytes_));
}

CloneSessionEntry::~CloneSessionEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.CloneSessionEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloneSessionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloneSessionEntry::ArenaDtor(void* object) {
  CloneSessionEntry* _this = reinterpret_cast< CloneSessionEntry* >(object);
  (void)_this;
}
void CloneSessionEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloneSessionEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloneSessionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CloneSessionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_length_bytes_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(packet_length_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloneSessionEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.Replica replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 class_of_service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          class_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 packet_length_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_length_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloneSessionEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CloneSessionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_id(), target);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replicas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replicas(i), target, stream);
  }

  // uint32 class_of_service = 3;
  if (this->_internal_class_of_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_class_of_service(), target);
  }

  // int32 packet_length_bytes = 4;
  if (this->_internal_packet_length_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_packet_length_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CloneSessionEntry)
  return target;
}

size_t CloneSessionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CloneSessionEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.Replica replicas = 2;
  total_size += 1UL * this->_internal_replicas_size();
  for (const auto& msg : this->replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 class_of_service = 3;
  if (this->_internal_class_of_service() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_of_service());
  }

  // int32 packet_length_bytes = 4;
  if (this->_internal_packet_length_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packet_length_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloneSessionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloneSessionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloneSessionEntry::GetClassData() const { return &_class_data_; }

void CloneSessionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloneSessionEntry *>(to)->MergeFrom(
      static_cast<const CloneSessionEntry &>(from));
}


void CloneSessionEntry::MergeFrom(const CloneSessionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CloneSessionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_class_of_service() != 0) {
    _internal_set_class_of_service(from._internal_class_of_service());
  }
  if (from._internal_packet_length_bytes() != 0) {
    _internal_set_packet_length_bytes(from._internal_packet_length_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloneSessionEntry::CopyFrom(const CloneSessionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CloneSessionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneSessionEntry::IsInitialized() const {
  return true;
}

void CloneSessionEntry::InternalSwap(CloneSessionEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replicas_.InternalSwap(&other->replicas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloneSessionEntry, packet_length_bytes_)
      + sizeof(CloneSessionEntry::packet_length_bytes_)
      - PROTOBUF_FIELD_OFFSET(CloneSessionEntry, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloneSessionEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[50]);
}

// ===================================================================

class ValueSetMember::_Internal {
 public:
};

ValueSetMember::ValueSetMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ValueSetMember)
}
ValueSetMember::ValueSetMember(const ValueSetMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_(from.match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ValueSetMember)
}

void ValueSetMember::SharedCtor() {
}

ValueSetMember::~ValueSetMember() {
  // @@protoc_insertion_point(destructor:p4.v1.ValueSetMember)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValueSetMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueSetMember::ArenaDtor(void* object) {
  ValueSetMember* _this = reinterpret_cast< ValueSetMember* >(object);
  (void)_this;
}
void ValueSetMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueSetMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueSetMember::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ValueSetMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueSetMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.FieldMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueSetMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ValueSetMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.FieldMatch match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_match(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ValueSetMember)
  return target;
}

size_t ValueSetMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ValueSetMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.FieldMatch match = 1;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueSetMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValueSetMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueSetMember::GetClassData() const { return &_class_data_; }

void ValueSetMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValueSetMember *>(to)->MergeFrom(
      static_cast<const ValueSetMember &>(from));
}


void ValueSetMember::MergeFrom(const ValueSetMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ValueSetMember)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueSetMember::CopyFrom(const ValueSetMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ValueSetMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSetMember::IsInitialized() const {
  return true;
}

void ValueSetMember::InternalSwap(ValueSetMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueSetMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[51]);
}

// ===================================================================

class ValueSetEntry::_Internal {
 public:
};

ValueSetEntry::ValueSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ValueSetEntry)
}
ValueSetEntry::ValueSetEntry(const ValueSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_set_id_ = from.value_set_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ValueSetEntry)
}

void ValueSetEntry::SharedCtor() {
value_set_id_ = 0u;
}

ValueSetEntry::~ValueSetEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ValueSetEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValueSetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueSetEntry::ArenaDtor(void* object) {
  ValueSetEntry* _this = reinterpret_cast< ValueSetEntry* >(object);
  (void)_this;
}
void ValueSetEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueSetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ValueSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  value_set_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueSetEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_set_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.ValueSetMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueSetEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ValueSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value_set_id = 1;
  if (this->_internal_value_set_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value_set_id(), target);
  }

  // repeated .p4.v1.ValueSetMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ValueSetEntry)
  return target;
}

size_t ValueSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ValueSetEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.ValueSetMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 value_set_id = 1;
  if (this->_internal_value_set_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value_set_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueSetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValueSetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueSetEntry::GetClassData() const { return &_class_data_; }

void ValueSetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValueSetEntry *>(to)->MergeFrom(
      static_cast<const ValueSetEntry &>(from));
}


void ValueSetEntry::MergeFrom(const ValueSetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ValueSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_value_set_id() != 0) {
    _internal_set_value_set_id(from._internal_value_set_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueSetEntry::CopyFrom(const ValueSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ValueSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSetEntry::IsInitialized() const {
  return true;
}

void ValueSetEntry::InternalSwap(ValueSetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(value_set_id_, other->value_set_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueSetEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[52]);
}

// ===================================================================

class RegisterEntry::_Internal {
 public:
  static const ::p4::v1::Index& index(const RegisterEntry* msg);
  static const ::p4::v1::P4Data& data(const RegisterEntry* msg);
};

const ::p4::v1::Index&
RegisterEntry::_Internal::index(const RegisterEntry* msg) {
  return *msg->index_;
}
const ::p4::v1::P4Data&
RegisterEntry::_Internal::data(const RegisterEntry* msg) {
  return *msg->data_;
}
void RegisterEntry::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
RegisterEntry::RegisterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.RegisterEntry)
}
RegisterEntry::RegisterEntry(const RegisterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::p4::v1::P4Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  register_id_ = from.register_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.RegisterEntry)
}

void RegisterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&register_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(register_id_));
}

RegisterEntry::~RegisterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.RegisterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete index_;
  if (this != internal_default_instance()) delete data_;
}

void RegisterEntry::ArenaDtor(void* object) {
  RegisterEntry* _this = reinterpret_cast< RegisterEntry* >(object);
  (void)_this;
}
void RegisterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.RegisterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  register_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 register_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Index index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.P4Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.RegisterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 register_id = 1;
  if (this->_internal_register_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_register_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::index(this), target, stream);
  }

  // .p4.v1.P4Data data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.RegisterEntry)
  return target;
}

size_t RegisterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.RegisterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Index index = 2;
  if (this->_internal_has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  // .p4.v1.P4Data data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 register_id = 1;
  if (this->_internal_register_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterEntry::GetClassData() const { return &_class_data_; }

void RegisterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterEntry *>(to)->MergeFrom(
      static_cast<const RegisterEntry &>(from));
}


void RegisterEntry::MergeFrom(const RegisterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.RegisterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_mutable_index()->::p4::v1::Index::MergeFrom(from._internal_index());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::p4::v1::P4Data::MergeFrom(from._internal_data());
  }
  if (from._internal_register_id() != 0) {
    _internal_set_register_id(from._internal_register_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterEntry::CopyFrom(const RegisterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.RegisterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterEntry::IsInitialized() const {
  return true;
}

void RegisterEntry::InternalSwap(RegisterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterEntry, register_id_)
      + sizeof(RegisterEntry::register_id_)
      - PROTOBUF_FIELD_OFFSET(RegisterEntry, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[53]);
}

// ===================================================================

class DigestEntry_Config::_Internal {
 public:
};

DigestEntry_Config::DigestEntry_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DigestEntry.Config)
}
DigestEntry_Config::DigestEntry_Config(const DigestEntry_Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_timeout_ns_, &from.max_timeout_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_list_size_) -
    reinterpret_cast<char*>(&max_timeout_ns_)) + sizeof(max_list_size_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestEntry.Config)
}

void DigestEntry_Config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_timeout_ns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_list_size_) -
    reinterpret_cast<char*>(&max_timeout_ns_)) + sizeof(max_list_size_));
}

DigestEntry_Config::~DigestEntry_Config() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestEntry.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigestEntry_Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigestEntry_Config::ArenaDtor(void* object) {
  DigestEntry_Config* _this = reinterpret_cast< DigestEntry_Config* >(object);
  (void)_this;
}
void DigestEntry_Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigestEntry_Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigestEntry_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestEntry.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_timeout_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_list_size_) -
      reinterpret_cast<char*>(&max_timeout_ns_)) + sizeof(max_list_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigestEntry_Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_timeout_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_timeout_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_list_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_list_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ack_timeout_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ack_timeout_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigestEntry_Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestEntry.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_timeout_ns = 1;
  if (this->_internal_max_timeout_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_timeout_ns(), target);
  }

  // int32 max_list_size = 2;
  if (this->_internal_max_list_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_list_size(), target);
  }

  // int64 ack_timeout_ns = 3;
  if (this->_internal_ack_timeout_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ack_timeout_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestEntry.Config)
  return target;
}

size_t DigestEntry_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestEntry.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_timeout_ns = 1;
  if (this->_internal_max_timeout_ns() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_timeout_ns());
  }

  // int64 ack_timeout_ns = 3;
  if (this->_internal_ack_timeout_ns() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ack_timeout_ns());
  }

  // int32 max_list_size = 2;
  if (this->_internal_max_list_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_list_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigestEntry_Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigestEntry_Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigestEntry_Config::GetClassData() const { return &_class_data_; }

void DigestEntry_Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigestEntry_Config *>(to)->MergeFrom(
      static_cast<const DigestEntry_Config &>(from));
}


void DigestEntry_Config::MergeFrom(const DigestEntry_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestEntry.Config)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_timeout_ns() != 0) {
    _internal_set_max_timeout_ns(from._internal_max_timeout_ns());
  }
  if (from._internal_ack_timeout_ns() != 0) {
    _internal_set_ack_timeout_ns(from._internal_ack_timeout_ns());
  }
  if (from._internal_max_list_size() != 0) {
    _internal_set_max_list_size(from._internal_max_list_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigestEntry_Config::CopyFrom(const DigestEntry_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestEntry.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestEntry_Config::IsInitialized() const {
  return true;
}

void DigestEntry_Config::InternalSwap(DigestEntry_Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigestEntry_Config, max_list_size_)
      + sizeof(DigestEntry_Config::max_list_size_)
      - PROTOBUF_FIELD_OFFSET(DigestEntry_Config, max_timeout_ns_)>(
          reinterpret_cast<char*>(&max_timeout_ns_),
          reinterpret_cast<char*>(&other->max_timeout_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigestEntry_Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[54]);
}

// ===================================================================

class DigestEntry::_Internal {
 public:
  static const ::p4::v1::DigestEntry_Config& config(const DigestEntry* msg);
};

const ::p4::v1::DigestEntry_Config&
DigestEntry::_Internal::config(const DigestEntry* msg) {
  return *msg->config_;
}
DigestEntry::DigestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DigestEntry)
}
DigestEntry::DigestEntry(const DigestEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::p4::v1::DigestEntry_Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  digest_id_ = from.digest_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestEntry)
}

void DigestEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&config_)) + sizeof(digest_id_));
}

DigestEntry::~DigestEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigestEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void DigestEntry::ArenaDtor(void* object) {
  DigestEntry* _this = reinterpret_cast< DigestEntry* >(object);
  (void)_this;
}
void DigestEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigestEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigestEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  digest_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigestEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 digest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          digest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DigestEntry.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigestEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_digest_id(), target);
  }

  // .p4.v1.DigestEntry.Config config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestEntry)
  return target;
}

size_t DigestEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.DigestEntry.Config config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_digest_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigestEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigestEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigestEntry::GetClassData() const { return &_class_data_; }

void DigestEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigestEntry *>(to)->MergeFrom(
      static_cast<const DigestEntry &>(from));
}


void DigestEntry::MergeFrom(const DigestEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::p4::v1::DigestEntry_Config::MergeFrom(from._internal_config());
  }
  if (from._internal_digest_id() != 0) {
    _internal_set_digest_id(from._internal_digest_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigestEntry::CopyFrom(const DigestEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestEntry::IsInitialized() const {
  return true;
}

void DigestEntry::InternalSwap(DigestEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigestEntry, digest_id_)
      + sizeof(DigestEntry::digest_id_)
      - PROTOBUF_FIELD_OFFSET(DigestEntry, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigestEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[55]);
}

// ===================================================================

class StreamMessageRequest::_Internal {
 public:
  static const ::p4::v1::MasterArbitrationUpdate& arbitration(const StreamMessageRequest* msg);
  static const ::p4::v1::PacketOut& packet(const StreamMessageRequest* msg);
  static const ::p4::v1::DigestListAck& digest_ack(const StreamMessageRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& other(const StreamMessageRequest* msg);
};

const ::p4::v1::MasterArbitrationUpdate&
StreamMessageRequest::_Internal::arbitration(const StreamMessageRequest* msg) {
  return *msg->update_.arbitration_;
}
const ::p4::v1::PacketOut&
StreamMessageRequest::_Internal::packet(const StreamMessageRequest* msg) {
  return *msg->update_.packet_;
}
const ::p4::v1::DigestListAck&
StreamMessageRequest::_Internal::digest_ack(const StreamMessageRequest* msg) {
  return *msg->update_.digest_ack_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
StreamMessageRequest::_Internal::other(const StreamMessageRequest* msg) {
  return *msg->update_.other_;
}
void StreamMessageRequest::set_allocated_arbitration(::p4::v1::MasterArbitrationUpdate* arbitration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (arbitration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::MasterArbitrationUpdate>::GetOwningArena(arbitration);
    if (message_arena != submessage_arena) {
      arbitration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arbitration, submessage_arena);
    }
    set_has_arbitration();
    update_.arbitration_ = arbitration;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.arbitration)
}
void StreamMessageRequest::set_allocated_packet(::p4::v1::PacketOut* packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::PacketOut>::GetOwningArena(packet);
    if (message_arena != submessage_arena) {
      packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
    update_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.packet)
}
void StreamMessageRequest::set_allocated_digest_ack(::p4::v1::DigestListAck* digest_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (digest_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DigestListAck>::GetOwningArena(digest_ack);
    if (message_arena != submessage_arena) {
      digest_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest_ack, submessage_arena);
    }
    set_has_digest_ack();
    update_.digest_ack_ = digest_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.digest_ack)
}
void StreamMessageRequest::set_allocated_other(::PROTOBUF_NAMESPACE_ID::Any* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    update_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.other)
}
void StreamMessageRequest::clear_other() {
  if (_internal_has_other()) {
    if (GetArenaForAllocation() == nullptr) {
      delete update_.other_;
    }
    clear_has_update();
  }
}
StreamMessageRequest::StreamMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.StreamMessageRequest)
}
StreamMessageRequest::StreamMessageRequest(const StreamMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kArbitration: {
      _internal_mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from._internal_arbitration());
      break;
    }
    case kPacket: {
      _internal_mutable_packet()->::p4::v1::PacketOut::MergeFrom(from._internal_packet());
      break;
    }
    case kDigestAck: {
      _internal_mutable_digest_ack()->::p4::v1::DigestListAck::MergeFrom(from._internal_digest_ack());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamMessageRequest)
}

void StreamMessageRequest::SharedCtor() {
clear_has_update();
}

StreamMessageRequest::~StreamMessageRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamMessageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_update()) {
    clear_update();
  }
}

void StreamMessageRequest::ArenaDtor(void* object) {
  StreamMessageRequest* _this = reinterpret_cast< StreamMessageRequest* >(object);
  (void)_this;
}
void StreamMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessageRequest::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamMessageRequest)
  switch (update_case()) {
    case kArbitration: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.arbitration_;
      }
      break;
    }
    case kPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.packet_;
      }
      break;
    }
    case kDigestAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.digest_ack_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.other_;
      }
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void StreamMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.MasterArbitrationUpdate arbitration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arbitration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.PacketOut packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DigestListAck digest_ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any other = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (_internal_has_arbitration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::arbitration(this), target, stream);
  }

  // .p4.v1.PacketOut packet = 2;
  if (_internal_has_packet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::packet(this), target, stream);
  }

  // .p4.v1.DigestListAck digest_ack = 3;
  if (_internal_has_digest_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::digest_ack(this), target, stream);
  }

  // .google.protobuf.Any other = 4;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamMessageRequest)
  return target;
}

size_t StreamMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .p4.v1.MasterArbitrationUpdate arbitration = 1;
    case kArbitration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.arbitration_);
      break;
    }
    // .p4.v1.PacketOut packet = 2;
    case kPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.packet_);
      break;
    }
    // .p4.v1.DigestListAck digest_ack = 3;
    case kDigestAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.digest_ack_);
      break;
    }
    // .google.protobuf.Any other = 4;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.other_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessageRequest::GetClassData() const { return &_class_data_; }

void StreamMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessageRequest *>(to)->MergeFrom(
      static_cast<const StreamMessageRequest &>(from));
}


void StreamMessageRequest::MergeFrom(const StreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kArbitration: {
      _internal_mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from._internal_arbitration());
      break;
    }
    case kPacket: {
      _internal_mutable_packet()->::p4::v1::PacketOut::MergeFrom(from._internal_packet());
      break;
    }
    case kDigestAck: {
      _internal_mutable_digest_ack()->::p4::v1::DigestListAck::MergeFrom(from._internal_digest_ack());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessageRequest::CopyFrom(const StreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageRequest::IsInitialized() const {
  return true;
}

void StreamMessageRequest::InternalSwap(StreamMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[56]);
}

// ===================================================================

class PacketOut::_Internal {
 public:
};

PacketOut::PacketOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.PacketOut)
}
PacketOut::PacketOut(const PacketOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketOut)
}

void PacketOut::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PacketOut::~PacketOut() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketOut::ArenaDtor(void* object) {
  PacketOut* _this = reinterpret_cast< PacketOut* >(object);
  (void)_this;
}
void PacketOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketOut::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.PacketMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketOut)
  return target;
}

size_t PacketOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.PacketMetadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketOut::GetClassData() const { return &_class_data_; }

void PacketOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketOut *>(to)->MergeFrom(
      static_cast<const PacketOut &>(from));
}


void PacketOut::MergeFrom(const PacketOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketOut)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketOut::CopyFrom(const PacketOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketOut::IsInitialized() const {
  return true;
}

void PacketOut::InternalSwap(PacketOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[57]);
}

// ===================================================================

class DigestListAck::_Internal {
 public:
};

DigestListAck::DigestListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DigestListAck)
}
DigestListAck::DigestListAck(const DigestListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&list_id_, &from.list_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestListAck)
}

void DigestListAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&list_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
}

DigestListAck::~DigestListAck() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestListAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigestListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigestListAck::ArenaDtor(void* object) {
  DigestListAck* _this = reinterpret_cast< DigestListAck* >(object);
  (void)_this;
}
void DigestListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigestListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigestListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&list_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digest_id_) -
      reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigestListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 digest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          digest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 list_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          list_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigestListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_digest_id(), target);
  }

  // uint64 list_id = 2;
  if (this->_internal_list_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_list_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestListAck)
  return target;
}

size_t DigestListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 list_id = 2;
  if (this->_internal_list_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_list_id());
  }

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_digest_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigestListAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigestListAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigestListAck::GetClassData() const { return &_class_data_; }

void DigestListAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigestListAck *>(to)->MergeFrom(
      static_cast<const DigestListAck &>(from));
}


void DigestListAck::MergeFrom(const DigestListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestListAck)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_list_id() != 0) {
    _internal_set_list_id(from._internal_list_id());
  }
  if (from._internal_digest_id() != 0) {
    _internal_set_digest_id(from._internal_digest_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigestListAck::CopyFrom(const DigestListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestListAck::IsInitialized() const {
  return true;
}

void DigestListAck::InternalSwap(DigestListAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigestListAck, digest_id_)
      + sizeof(DigestListAck::digest_id_)
      - PROTOBUF_FIELD_OFFSET(DigestListAck, list_id_)>(
          reinterpret_cast<char*>(&list_id_),
          reinterpret_cast<char*>(&other->list_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigestListAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[58]);
}

// ===================================================================

class StreamMessageResponse::_Internal {
 public:
  static const ::p4::v1::MasterArbitrationUpdate& arbitration(const StreamMessageResponse* msg);
  static const ::p4::v1::PacketIn& packet(const StreamMessageResponse* msg);
  static const ::p4::v1::DigestList& digest(const StreamMessageResponse* msg);
  static const ::p4::v1::IdleTimeoutNotification& idle_timeout_notification(const StreamMessageResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& other(const StreamMessageResponse* msg);
  static const ::p4::v1::StreamError& error(const StreamMessageResponse* msg);
};

const ::p4::v1::MasterArbitrationUpdate&
StreamMessageResponse::_Internal::arbitration(const StreamMessageResponse* msg) {
  return *msg->update_.arbitration_;
}
const ::p4::v1::PacketIn&
StreamMessageResponse::_Internal::packet(const StreamMessageResponse* msg) {
  return *msg->update_.packet_;
}
const ::p4::v1::DigestList&
StreamMessageResponse::_Internal::digest(const StreamMessageResponse* msg) {
  return *msg->update_.digest_;
}
const ::p4::v1::IdleTimeoutNotification&
StreamMessageResponse::_Internal::idle_timeout_notification(const StreamMessageResponse* msg) {
  return *msg->update_.idle_timeout_notification_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
StreamMessageResponse::_Internal::other(const StreamMessageResponse* msg) {
  return *msg->update_.other_;
}
const ::p4::v1::StreamError&
StreamMessageResponse::_Internal::error(const StreamMessageResponse* msg) {
  return *msg->update_.error_;
}
void StreamMessageResponse::set_allocated_arbitration(::p4::v1::MasterArbitrationUpdate* arbitration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (arbitration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::MasterArbitrationUpdate>::GetOwningArena(arbitration);
    if (message_arena != submessage_arena) {
      arbitration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arbitration, submessage_arena);
    }
    set_has_arbitration();
    update_.arbitration_ = arbitration;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.arbitration)
}
void StreamMessageResponse::set_allocated_packet(::p4::v1::PacketIn* packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::PacketIn>::GetOwningArena(packet);
    if (message_arena != submessage_arena) {
      packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
    update_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.packet)
}
void StreamMessageResponse::set_allocated_digest(::p4::v1::DigestList* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DigestList>::GetOwningArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    set_has_digest();
    update_.digest_ = digest;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.digest)
}
void StreamMessageResponse::set_allocated_idle_timeout_notification(::p4::v1::IdleTimeoutNotification* idle_timeout_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (idle_timeout_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::IdleTimeoutNotification>::GetOwningArena(idle_timeout_notification);
    if (message_arena != submessage_arena) {
      idle_timeout_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idle_timeout_notification, submessage_arena);
    }
    set_has_idle_timeout_notification();
    update_.idle_timeout_notification_ = idle_timeout_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.idle_timeout_notification)
}
void StreamMessageResponse::set_allocated_other(::PROTOBUF_NAMESPACE_ID::Any* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    update_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.other)
}
void StreamMessageResponse::clear_other() {
  if (_internal_has_other()) {
    if (GetArenaForAllocation() == nullptr) {
      delete update_.other_;
    }
    clear_has_update();
  }
}
void StreamMessageResponse::set_allocated_error(::p4::v1::StreamError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::StreamError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    update_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.error)
}
StreamMessageResponse::StreamMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.StreamMessageResponse)
}
StreamMessageResponse::StreamMessageResponse(const StreamMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kArbitration: {
      _internal_mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from._internal_arbitration());
      break;
    }
    case kPacket: {
      _internal_mutable_packet()->::p4::v1::PacketIn::MergeFrom(from._internal_packet());
      break;
    }
    case kDigest: {
      _internal_mutable_digest()->::p4::v1::DigestList::MergeFrom(from._internal_digest());
      break;
    }
    case kIdleTimeoutNotification: {
      _internal_mutable_idle_timeout_notification()->::p4::v1::IdleTimeoutNotification::MergeFrom(from._internal_idle_timeout_notification());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case kError: {
      _internal_mutable_error()->::p4::v1::StreamError::MergeFrom(from._internal_error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamMessageResponse)
}

void StreamMessageResponse::SharedCtor() {
clear_has_update();
}

StreamMessageResponse::~StreamMessageResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamMessageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_update()) {
    clear_update();
  }
}

void StreamMessageResponse::ArenaDtor(void* object) {
  StreamMessageResponse* _this = reinterpret_cast< StreamMessageResponse* >(object);
  (void)_this;
}
void StreamMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessageResponse::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamMessageResponse)
  switch (update_case()) {
    case kArbitration: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.arbitration_;
      }
      break;
    }
    case kPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.packet_;
      }
      break;
    }
    case kDigest: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.digest_;
      }
      break;
    }
    case kIdleTimeoutNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.idle_timeout_notification_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.other_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete update_.error_;
      }
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void StreamMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.MasterArbitrationUpdate arbitration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arbitration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.PacketIn packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DigestList digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_idle_timeout_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any other = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.StreamError error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (_internal_has_arbitration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::arbitration(this), target, stream);
  }

  // .p4.v1.PacketIn packet = 2;
  if (_internal_has_packet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::packet(this), target, stream);
  }

  // .p4.v1.DigestList digest = 3;
  if (_internal_has_digest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::digest(this), target, stream);
  }

  // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
  if (_internal_has_idle_timeout_notification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::idle_timeout_notification(this), target, stream);
  }

  // .google.protobuf.Any other = 5;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::other(this), target, stream);
  }

  // .p4.v1.StreamError error = 6;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamMessageResponse)
  return target;
}

size_t StreamMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .p4.v1.MasterArbitrationUpdate arbitration = 1;
    case kArbitration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.arbitration_);
      break;
    }
    // .p4.v1.PacketIn packet = 2;
    case kPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.packet_);
      break;
    }
    // .p4.v1.DigestList digest = 3;
    case kDigest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.digest_);
      break;
    }
    // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
    case kIdleTimeoutNotification: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.idle_timeout_notification_);
      break;
    }
    // .google.protobuf.Any other = 5;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.other_);
      break;
    }
    // .p4.v1.StreamError error = 6;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.error_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessageResponse::GetClassData() const { return &_class_data_; }

void StreamMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessageResponse *>(to)->MergeFrom(
      static_cast<const StreamMessageResponse &>(from));
}


void StreamMessageResponse::MergeFrom(const StreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kArbitration: {
      _internal_mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from._internal_arbitration());
      break;
    }
    case kPacket: {
      _internal_mutable_packet()->::p4::v1::PacketIn::MergeFrom(from._internal_packet());
      break;
    }
    case kDigest: {
      _internal_mutable_digest()->::p4::v1::DigestList::MergeFrom(from._internal_digest());
      break;
    }
    case kIdleTimeoutNotification: {
      _internal_mutable_idle_timeout_notification()->::p4::v1::IdleTimeoutNotification::MergeFrom(from._internal_idle_timeout_notification());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case kError: {
      _internal_mutable_error()->::p4::v1::StreamError::MergeFrom(from._internal_error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessageResponse::CopyFrom(const StreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageResponse::IsInitialized() const {
  return true;
}

void StreamMessageResponse::InternalSwap(StreamMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[59]);
}

// ===================================================================

class PacketIn::_Internal {
 public:
};

PacketIn::PacketIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.PacketIn)
}
PacketIn::PacketIn(const PacketIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketIn)
}

void PacketIn::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PacketIn::~PacketIn() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketIn::ArenaDtor(void* object) {
  PacketIn* _this = reinterpret_cast< PacketIn* >(object);
  (void)_this;
}
void PacketIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketIn::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.PacketMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketIn)
  return target;
}

size_t PacketIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.PacketMetadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketIn::GetClassData() const { return &_class_data_; }

void PacketIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketIn *>(to)->MergeFrom(
      static_cast<const PacketIn &>(from));
}


void PacketIn::MergeFrom(const PacketIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketIn::CopyFrom(const PacketIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketIn::IsInitialized() const {
  return true;
}

void PacketIn::InternalSwap(PacketIn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[60]);
}

// ===================================================================

class DigestList::_Internal {
 public:
};

void DigestList::clear_data() {
  data_.Clear();
}
DigestList::DigestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DigestList)
}
DigestList::DigestList(const DigestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&list_id_, &from.list_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestList)
}

void DigestList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&list_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
}

DigestList::~DigestList() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigestList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigestList::ArenaDtor(void* object) {
  DigestList* _this = reinterpret_cast< DigestList* >(object);
  (void)_this;
}
void DigestList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigestList::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&list_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digest_id_) -
      reinterpret_cast<char*>(&list_id_)) + sizeof(digest_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigestList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 digest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          digest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 list_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          list_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.v1.P4Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigestList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_digest_id(), target);
  }

  // uint64 list_id = 2;
  if (this->_internal_list_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_list_id(), target);
  }

  // repeated .p4.v1.P4Data data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestList)
  return target;
}

size_t DigestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.P4Data data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 list_id = 2;
  if (this->_internal_list_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_list_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 digest_id = 1;
  if (this->_internal_digest_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_digest_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigestList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigestList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigestList::GetClassData() const { return &_class_data_; }

void DigestList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigestList *>(to)->MergeFrom(
      static_cast<const DigestList &>(from));
}


void DigestList::MergeFrom(const DigestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_list_id() != 0) {
    _internal_set_list_id(from._internal_list_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_digest_id() != 0) {
    _internal_set_digest_id(from._internal_digest_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigestList::CopyFrom(const DigestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestList::IsInitialized() const {
  return true;
}

void DigestList::InternalSwap(DigestList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigestList, digest_id_)
      + sizeof(DigestList::digest_id_)
      - PROTOBUF_FIELD_OFFSET(DigestList, list_id_)>(
          reinterpret_cast<char*>(&list_id_),
          reinterpret_cast<char*>(&other->list_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigestList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[61]);
}

// ===================================================================

class PacketMetadata::_Internal {
 public:
};

PacketMetadata::PacketMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.PacketMetadata)
}
PacketMetadata::PacketMetadata(const PacketMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  metadata_id_ = from.metadata_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketMetadata)
}

void PacketMetadata::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_id_ = 0u;
}

PacketMetadata::~PacketMetadata() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketMetadata::ArenaDtor(void* object) {
  PacketMetadata* _this = reinterpret_cast< PacketMetadata* >(object);
  (void)_this;
}
void PacketMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  metadata_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 metadata_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          metadata_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metadata_id(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketMetadata)
  return target;
}

size_t PacketMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metadata_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketMetadata::GetClassData() const { return &_class_data_; }

void PacketMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketMetadata *>(to)->MergeFrom(
      static_cast<const PacketMetadata &>(from));
}


void PacketMetadata::MergeFrom(const PacketMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_metadata_id() != 0) {
    _internal_set_metadata_id(from._internal_metadata_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketMetadata::CopyFrom(const PacketMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMetadata::IsInitialized() const {
  return true;
}

void PacketMetadata::InternalSwap(PacketMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(metadata_id_, other->metadata_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[62]);
}

// ===================================================================

class MasterArbitrationUpdate::_Internal {
 public:
  static const ::p4::v1::Role& role(const MasterArbitrationUpdate* msg);
  static const ::p4::v1::Uint128& election_id(const MasterArbitrationUpdate* msg);
  static const ::google::rpc::Status& status(const MasterArbitrationUpdate* msg);
};

const ::p4::v1::Role&
MasterArbitrationUpdate::_Internal::role(const MasterArbitrationUpdate* msg) {
  return *msg->role_;
}
const ::p4::v1::Uint128&
MasterArbitrationUpdate::_Internal::election_id(const MasterArbitrationUpdate* msg) {
  return *msg->election_id_;
}
const ::google::rpc::Status&
MasterArbitrationUpdate::_Internal::status(const MasterArbitrationUpdate* msg) {
  return *msg->status_;
}
void MasterArbitrationUpdate::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MasterArbitrationUpdate::MasterArbitrationUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.MasterArbitrationUpdate)
}
MasterArbitrationUpdate::MasterArbitrationUpdate(const MasterArbitrationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::p4::v1::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MasterArbitrationUpdate)
}

void MasterArbitrationUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&role_)) + sizeof(device_id_));
}

MasterArbitrationUpdate::~MasterArbitrationUpdate() {
  // @@protoc_insertion_point(destructor:p4.v1.MasterArbitrationUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MasterArbitrationUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete election_id_;
  if (this != internal_default_instance()) delete status_;
}

void MasterArbitrationUpdate::ArenaDtor(void* object) {
  MasterArbitrationUpdate* _this = reinterpret_cast< MasterArbitrationUpdate* >(object);
  (void)_this;
}
void MasterArbitrationUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MasterArbitrationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MasterArbitrationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MasterArbitrationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  device_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterArbitrationUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Role role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Uint128 election_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_election_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterArbitrationUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MasterArbitrationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // .p4.v1.Role role = 2;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role(this), target, stream);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::election_id(this), target, stream);
  }

  // .google.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MasterArbitrationUpdate)
  return target;
}

size_t MasterArbitrationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MasterArbitrationUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Role role = 2;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *election_id_);
  }

  // .google.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MasterArbitrationUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MasterArbitrationUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MasterArbitrationUpdate::GetClassData() const { return &_class_data_; }

void MasterArbitrationUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MasterArbitrationUpdate *>(to)->MergeFrom(
      static_cast<const MasterArbitrationUpdate &>(from));
}


void MasterArbitrationUpdate::MergeFrom(const MasterArbitrationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MasterArbitrationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::p4::v1::Role::MergeFrom(from._internal_role());
  }
  if (from._internal_has_election_id()) {
    _internal_mutable_election_id()->::p4::v1::Uint128::MergeFrom(from._internal_election_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::google::rpc::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MasterArbitrationUpdate::CopyFrom(const MasterArbitrationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MasterArbitrationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterArbitrationUpdate::IsInitialized() const {
  return true;
}

void MasterArbitrationUpdate::InternalSwap(MasterArbitrationUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterArbitrationUpdate, device_id_)
      + sizeof(MasterArbitrationUpdate::device_id_)
      - PROTOBUF_FIELD_OFFSET(MasterArbitrationUpdate, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterArbitrationUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[63]);
}

// ===================================================================

class Role::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& config(const Role* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Role::_Internal::config(const Role* msg) {
  return *msg->config_;
}
void Role::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
Role::Role(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.config_);
  } else {
    config_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Role)
}

void Role::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&config_)) + sizeof(id_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:p4.v1.Role)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Role::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void Role::ArenaDtor(void* object) {
  Role* _this = reinterpret_cast< Role* >(object);
  (void)_this;
}
void Role::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Role::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Any config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Role)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Role::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Role::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Role::GetClassData() const { return &_class_data_; }

void Role::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Role *>(to)->MergeFrom(
      static_cast<const Role &>(from));
}


void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_config());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Role, id_)
      + sizeof(Role::id_)
      - PROTOBUF_FIELD_OFFSET(Role, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[64]);
}

// ===================================================================

class IdleTimeoutNotification::_Internal {
 public:
};

IdleTimeoutNotification::IdleTimeoutNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.IdleTimeoutNotification)
}
IdleTimeoutNotification::IdleTimeoutNotification(const IdleTimeoutNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_entry_(from.table_entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.IdleTimeoutNotification)
}

void IdleTimeoutNotification::SharedCtor() {
timestamp_ = int64_t{0};
}

IdleTimeoutNotification::~IdleTimeoutNotification() {
  // @@protoc_insertion_point(destructor:p4.v1.IdleTimeoutNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdleTimeoutNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdleTimeoutNotification::ArenaDtor(void* object) {
  IdleTimeoutNotification* _this = reinterpret_cast< IdleTimeoutNotification* >(object);
  (void)_this;
}
void IdleTimeoutNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdleTimeoutNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdleTimeoutNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.IdleTimeoutNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_entry_.Clear();
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdleTimeoutNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.v1.TableEntry table_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdleTimeoutNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.IdleTimeoutNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.v1.TableEntry table_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_table_entry(i), target, stream);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.IdleTimeoutNotification)
  return target;
}

size_t IdleTimeoutNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.IdleTimeoutNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.v1.TableEntry table_entry = 1;
  total_size += 1UL * this->_internal_table_entry_size();
  for (const auto& msg : this->table_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdleTimeoutNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdleTimeoutNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdleTimeoutNotification::GetClassData() const { return &_class_data_; }

void IdleTimeoutNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IdleTimeoutNotification *>(to)->MergeFrom(
      static_cast<const IdleTimeoutNotification &>(from));
}


void IdleTimeoutNotification::MergeFrom(const IdleTimeoutNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.IdleTimeoutNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_entry_.MergeFrom(from.table_entry_);
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdleTimeoutNotification::CopyFrom(const IdleTimeoutNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.IdleTimeoutNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdleTimeoutNotification::IsInitialized() const {
  return true;
}

void IdleTimeoutNotification::InternalSwap(IdleTimeoutNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_entry_.InternalSwap(&other->table_entry_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdleTimeoutNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[65]);
}

// ===================================================================

class StreamError::_Internal {
 public:
  static const ::p4::v1::PacketOutError& packet_out(const StreamError* msg);
  static const ::p4::v1::DigestListAckError& digest_list_ack(const StreamError* msg);
  static const ::p4::v1::StreamOtherError& other(const StreamError* msg);
};

const ::p4::v1::PacketOutError&
StreamError::_Internal::packet_out(const StreamError* msg) {
  return *msg->details_.packet_out_;
}
const ::p4::v1::DigestListAckError&
StreamError::_Internal::digest_list_ack(const StreamError* msg) {
  return *msg->details_.digest_list_ack_;
}
const ::p4::v1::StreamOtherError&
StreamError::_Internal::other(const StreamError* msg) {
  return *msg->details_.other_;
}
void StreamError::set_allocated_packet_out(::p4::v1::PacketOutError* packet_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_details();
  if (packet_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::PacketOutError>::GetOwningArena(packet_out);
    if (message_arena != submessage_arena) {
      packet_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_out, submessage_arena);
    }
    set_has_packet_out();
    details_.packet_out_ = packet_out;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.packet_out)
}
void StreamError::set_allocated_digest_list_ack(::p4::v1::DigestListAckError* digest_list_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_details();
  if (digest_list_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::DigestListAckError>::GetOwningArena(digest_list_ack);
    if (message_arena != submessage_arena) {
      digest_list_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest_list_ack, submessage_arena);
    }
    set_has_digest_list_ack();
    details_.digest_list_ack_ = digest_list_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.digest_list_ack)
}
void StreamError::set_allocated_other(::p4::v1::StreamOtherError* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_details();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::v1::StreamOtherError>::GetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    details_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.other)
}
StreamError::StreamError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.StreamError)
}
StreamError::StreamError(const StreamError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArenaForAllocation());
  }
  ::memcpy(&canonical_code_, &from.canonical_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_)) + sizeof(code_));
  clear_has_details();
  switch (from.details_case()) {
    case kPacketOut: {
      _internal_mutable_packet_out()->::p4::v1::PacketOutError::MergeFrom(from._internal_packet_out());
      break;
    }
    case kDigestListAck: {
      _internal_mutable_digest_list_ack()->::p4::v1::DigestListAckError::MergeFrom(from._internal_digest_list_ack());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::p4::v1::StreamOtherError::MergeFrom(from._internal_other());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamError)
}

void StreamError::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&canonical_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_)) + sizeof(code_));
clear_has_details();
}

StreamError::~StreamError() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_details()) {
    clear_details();
  }
}

void StreamError::ArenaDtor(void* object) {
  StreamError* _this = reinterpret_cast< StreamError* >(object);
  (void)_this;
}
void StreamError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamError::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamError)
  switch (details_case()) {
    case kPacketOut: {
      if (GetArenaForAllocation() == nullptr) {
        delete details_.packet_out_;
      }
      break;
    }
    case kDigestListAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete details_.digest_list_ack_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete details_.other_;
      }
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAILS_NOT_SET;
}


void StreamError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  space_.ClearToEmpty();
  ::memset(&canonical_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&canonical_code_)) + sizeof(code_));
  clear_details();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 canonical_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          canonical_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.StreamError.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.StreamError.space"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.PacketOutError packet_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_out(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.DigestListAckError digest_list_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest_list_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.StreamOtherError other = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 canonical_code = 1;
  if (this->_internal_canonical_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_canonical_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string space = 3;
  if (!this->_internal_space().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_space().data(), static_cast<int>(this->_internal_space().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.space");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_space(), target);
  }

  // int32 code = 4;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // .p4.v1.PacketOutError packet_out = 5;
  if (_internal_has_packet_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::packet_out(this), target, stream);
  }

  // .p4.v1.DigestListAckError digest_list_ack = 6;
  if (_internal_has_digest_list_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::digest_list_ack(this), target, stream);
  }

  // .p4.v1.StreamOtherError other = 7;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamError)
  return target;
}

size_t StreamError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string space = 3;
  if (!this->_internal_space().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_space());
  }

  // int32 canonical_code = 1;
  if (this->_internal_canonical_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_canonical_code());
  }

  // int32 code = 4;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  switch (details_case()) {
    // .p4.v1.PacketOutError packet_out = 5;
    case kPacketOut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.packet_out_);
      break;
    }
    // .p4.v1.DigestListAckError digest_list_ack = 6;
    case kDigestListAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.digest_list_ack_);
      break;
    }
    // .p4.v1.StreamOtherError other = 7;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.other_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamError::GetClassData() const { return &_class_data_; }

void StreamError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamError *>(to)->MergeFrom(
      static_cast<const StreamError &>(from));
}


void StreamError::MergeFrom(const StreamError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_space().empty()) {
    _internal_set_space(from._internal_space());
  }
  if (from._internal_canonical_code() != 0) {
    _internal_set_canonical_code(from._internal_canonical_code());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  switch (from.details_case()) {
    case kPacketOut: {
      _internal_mutable_packet_out()->::p4::v1::PacketOutError::MergeFrom(from._internal_packet_out());
      break;
    }
    case kDigestListAck: {
      _internal_mutable_digest_list_ack()->::p4::v1::DigestListAckError::MergeFrom(from._internal_digest_list_ack());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::p4::v1::StreamOtherError::MergeFrom(from._internal_other());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamError::CopyFrom(const StreamError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamError::IsInitialized() const {
  return true;
}

void StreamError::InternalSwap(StreamError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &space_, lhs_arena,
      &other->space_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamError, code_)
      + sizeof(StreamError::code_)
      - PROTOBUF_FIELD_OFFSET(StreamError, canonical_code_)>(
          reinterpret_cast<char*>(&canonical_code_),
          reinterpret_cast<char*>(&other->canonical_code_));
  swap(details_, other->details_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[66]);
}

// ===================================================================

class PacketOutError::_Internal {
 public:
  static const ::p4::v1::PacketOut& packet_out(const PacketOutError* msg);
};

const ::p4::v1::PacketOut&
PacketOutError::_Internal::packet_out(const PacketOutError* msg) {
  return *msg->packet_out_;
}
PacketOutError::PacketOutError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.PacketOutError)
}
PacketOutError::PacketOutError(const PacketOutError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_out()) {
    packet_out_ = new ::p4::v1::PacketOut(*from.packet_out_);
  } else {
    packet_out_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketOutError)
}

void PacketOutError::SharedCtor() {
packet_out_ = nullptr;
}

PacketOutError::~PacketOutError() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketOutError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketOutError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete packet_out_;
}

void PacketOutError::ArenaDtor(void* object) {
  PacketOutError* _this = reinterpret_cast< PacketOutError* >(object);
  (void)_this;
}
void PacketOutError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketOutError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketOutError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketOutError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && packet_out_ != nullptr) {
    delete packet_out_;
  }
  packet_out_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketOutError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.PacketOut packet_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_out(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketOutError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketOutError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.PacketOut packet_out = 1;
  if (this->_internal_has_packet_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::packet_out(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketOutError)
  return target;
}

size_t PacketOutError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketOutError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.PacketOut packet_out = 1;
  if (this->_internal_has_packet_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_out_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketOutError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketOutError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketOutError::GetClassData() const { return &_class_data_; }

void PacketOutError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PacketOutError *>(to)->MergeFrom(
      static_cast<const PacketOutError &>(from));
}


void PacketOutError::MergeFrom(const PacketOutError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketOutError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packet_out()) {
    _internal_mutable_packet_out()->::p4::v1::PacketOut::MergeFrom(from._internal_packet_out());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketOutError::CopyFrom(const PacketOutError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketOutError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketOutError::IsInitialized() const {
  return true;
}

void PacketOutError::InternalSwap(PacketOutError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(packet_out_, other->packet_out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketOutError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[67]);
}

// ===================================================================

class DigestListAckError::_Internal {
 public:
  static const ::p4::v1::DigestListAck& digest_list_ack(const DigestListAckError* msg);
};

const ::p4::v1::DigestListAck&
DigestListAckError::_Internal::digest_list_ack(const DigestListAckError* msg) {
  return *msg->digest_list_ack_;
}
DigestListAckError::DigestListAckError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.DigestListAckError)
}
DigestListAckError::DigestListAckError(const DigestListAckError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_digest_list_ack()) {
    digest_list_ack_ = new ::p4::v1::DigestListAck(*from.digest_list_ack_);
  } else {
    digest_list_ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestListAckError)
}

void DigestListAckError::SharedCtor() {
digest_list_ack_ = nullptr;
}

DigestListAckError::~DigestListAckError() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestListAckError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigestListAckError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete digest_list_ack_;
}

void DigestListAckError::ArenaDtor(void* object) {
  DigestListAckError* _this = reinterpret_cast< DigestListAckError* >(object);
  (void)_this;
}
void DigestListAckError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigestListAckError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigestListAckError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestListAckError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && digest_list_ack_ != nullptr) {
    delete digest_list_ack_;
  }
  digest_list_ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigestListAckError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.DigestListAck digest_list_ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest_list_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigestListAckError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestListAckError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.DigestListAck digest_list_ack = 1;
  if (this->_internal_has_digest_list_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::digest_list_ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestListAckError)
  return target;
}

size_t DigestListAckError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestListAckError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.DigestListAck digest_list_ack = 1;
  if (this->_internal_has_digest_list_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *digest_list_ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigestListAckError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigestListAckError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigestListAckError::GetClassData() const { return &_class_data_; }

void DigestListAckError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigestListAckError *>(to)->MergeFrom(
      static_cast<const DigestListAckError &>(from));
}


void DigestListAckError::MergeFrom(const DigestListAckError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestListAckError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_digest_list_ack()) {
    _internal_mutable_digest_list_ack()->::p4::v1::DigestListAck::MergeFrom(from._internal_digest_list_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigestListAckError::CopyFrom(const DigestListAckError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestListAckError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestListAckError::IsInitialized() const {
  return true;
}

void DigestListAckError::InternalSwap(DigestListAckError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(digest_list_ack_, other->digest_list_ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigestListAckError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[68]);
}

// ===================================================================

class StreamOtherError::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& other(const StreamOtherError* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
StreamOtherError::_Internal::other(const StreamOtherError* msg) {
  return *msg->other_;
}
void StreamOtherError::clear_other() {
  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
}
StreamOtherError::StreamOtherError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.StreamOtherError)
}
StreamOtherError::StreamOtherError(const StreamOtherError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_other()) {
    other_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.other_);
  } else {
    other_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamOtherError)
}

void StreamOtherError::SharedCtor() {
other_ = nullptr;
}

StreamOtherError::~StreamOtherError() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamOtherError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamOtherError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete other_;
}

void StreamOtherError::ArenaDtor(void* object) {
  StreamOtherError* _this = reinterpret_cast< StreamOtherError* >(object);
  (void)_this;
}
void StreamOtherError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamOtherError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamOtherError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamOtherError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOtherError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any other = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamOtherError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamOtherError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any other = 1;
  if (this->_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamOtherError)
  return target;
}

size_t StreamOtherError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamOtherError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any other = 1;
  if (this->_internal_has_other()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOtherError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamOtherError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOtherError::GetClassData() const { return &_class_data_; }

void StreamOtherError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamOtherError *>(to)->MergeFrom(
      static_cast<const StreamOtherError &>(from));
}


void StreamOtherError::MergeFrom(const StreamOtherError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamOtherError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other()) {
    _internal_mutable_other()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOtherError::CopyFrom(const StreamOtherError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamOtherError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOtherError::IsInitialized() const {
  return true;
}

void StreamOtherError::InternalSwap(StreamOtherError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(other_, other->other_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOtherError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[69]);
}

// ===================================================================

class Uint128::_Internal {
 public:
};

Uint128::Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Uint128)
}

void Uint128::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:p4.v1.Uint128)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Uint128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint128::ArenaDtor(void* object) {
  Uint128* _this = reinterpret_cast< Uint128* >(object);
  (void)_this;
}
void Uint128::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Uint128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_high());
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_low());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uint128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint128::GetClassData() const { return &_class_data_; }

void Uint128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uint128 *>(to)->MergeFrom(
      static_cast<const Uint128 &>(from));
}


void Uint128::MergeFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from._internal_low() != 0) {
    _internal_set_low(from._internal_low());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::InternalSwap(Uint128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uint128, low_)
      + sizeof(Uint128::low_)
      - PROTOBUF_FIELD_OFFSET(Uint128, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint128::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[70]);
}

// ===================================================================

class SetForwardingPipelineConfigRequest::_Internal {
 public:
  static const ::p4::v1::Uint128& election_id(const SetForwardingPipelineConfigRequest* msg);
  static const ::p4::v1::ForwardingPipelineConfig& config(const SetForwardingPipelineConfigRequest* msg);
};

const ::p4::v1::Uint128&
SetForwardingPipelineConfigRequest::_Internal::election_id(const SetForwardingPipelineConfigRequest* msg) {
  return *msg->election_id_;
}
const ::p4::v1::ForwardingPipelineConfig&
SetForwardingPipelineConfigRequest::_Internal::config(const SetForwardingPipelineConfigRequest* msg) {
  return *msg->config_;
}
SetForwardingPipelineConfigRequest::SetForwardingPipelineConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.SetForwardingPipelineConfigRequest)
}
SetForwardingPipelineConfigRequest::SetForwardingPipelineConfigRequest(const SetForwardingPipelineConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::p4::v1::ForwardingPipelineConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.SetForwardingPipelineConfigRequest)
}

void SetForwardingPipelineConfigRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&election_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&election_id_)) + sizeof(action_));
}

SetForwardingPipelineConfigRequest::~SetForwardingPipelineConfigRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.SetForwardingPipelineConfigRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetForwardingPipelineConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete election_id_;
  if (this != internal_default_instance()) delete config_;
}

void SetForwardingPipelineConfigRequest::ArenaDtor(void* object) {
  SetForwardingPipelineConfigRequest* _this = reinterpret_cast< SetForwardingPipelineConfigRequest* >(object);
  (void)_this;
}
void SetForwardingPipelineConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetForwardingPipelineConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetForwardingPipelineConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.SetForwardingPipelineConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetForwardingPipelineConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.Uint128 election_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_election_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::p4::v1::SetForwardingPipelineConfigRequest_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ForwardingPipelineConfig config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetForwardingPipelineConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.SetForwardingPipelineConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::election_id(this), target, stream);
  }

  // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_action(), target);
  }

  // .p4.v1.ForwardingPipelineConfig config = 5;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.SetForwardingPipelineConfigRequest)
  return target;
}

size_t SetForwardingPipelineConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.SetForwardingPipelineConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.Uint128 election_id = 3;
  if (this->_internal_has_election_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *election_id_);
  }

  // .p4.v1.ForwardingPipelineConfig config = 5;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_device_id());
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetForwardingPipelineConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetForwardingPipelineConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetForwardingPipelineConfigRequest::GetClassData() const { return &_class_data_; }

void SetForwardingPipelineConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetForwardingPipelineConfigRequest *>(to)->MergeFrom(
      static_cast<const SetForwardingPipelineConfigRequest &>(from));
}


void SetForwardingPipelineConfigRequest::MergeFrom(const SetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_election_id()) {
    _internal_mutable_election_id()->::p4::v1::Uint128::MergeFrom(from._internal_election_id());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::p4::v1::ForwardingPipelineConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetForwardingPipelineConfigRequest::CopyFrom(const SetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetForwardingPipelineConfigRequest::IsInitialized() const {
  return true;
}

void SetForwardingPipelineConfigRequest::InternalSwap(SetForwardingPipelineConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetForwardingPipelineConfigRequest, action_)
      + sizeof(SetForwardingPipelineConfigRequest::action_)
      - PROTOBUF_FIELD_OFFSET(SetForwardingPipelineConfigRequest, election_id_)>(
          reinterpret_cast<char*>(&election_id_),
          reinterpret_cast<char*>(&other->election_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetForwardingPipelineConfigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[71]);
}

// ===================================================================

class SetForwardingPipelineConfigResponse::_Internal {
 public:
};

SetForwardingPipelineConfigResponse::SetForwardingPipelineConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.v1.SetForwardingPipelineConfigResponse)
}
SetForwardingPipelineConfigResponse::SetForwardingPipelineConfigResponse(const SetForwardingPipelineConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.SetForwardingPipelineConfigResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetForwardingPipelineConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetForwardingPipelineConfigResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetForwardingPipelineConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[72]);
}

// ===================================================================

class ForwardingPipelineConfig_Cookie::_Internal {
 public:
};

ForwardingPipelineConfig_Cookie::ForwardingPipelineConfig_Cookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ForwardingPipelineConfig.Cookie)
}
ForwardingPipelineConfig_Cookie::ForwardingPipelineConfig_Cookie(const ForwardingPipelineConfig_Cookie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cookie_ = from.cookie_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ForwardingPipelineConfig.Cookie)
}

void ForwardingPipelineConfig_Cookie::SharedCtor() {
cookie_ = uint64_t{0u};
}

ForwardingPipelineConfig_Cookie::~ForwardingPipelineConfig_Cookie() {
  // @@protoc_insertion_point(destructor:p4.v1.ForwardingPipelineConfig.Cookie)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ForwardingPipelineConfig_Cookie::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForwardingPipelineConfig_Cookie::ArenaDtor(void* object) {
  ForwardingPipelineConfig_Cookie* _this = reinterpret_cast< ForwardingPipelineConfig_Cookie* >(object);
  (void)_this;
}
void ForwardingPipelineConfig_Cookie::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForwardingPipelineConfig_Cookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardingPipelineConfig_Cookie::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ForwardingPipelineConfig.Cookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookie_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardingPipelineConfig_Cookie::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardingPipelineConfig_Cookie::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ForwardingPipelineConfig.Cookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cookie = 1;
  if (this->_internal_cookie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ForwardingPipelineConfig.Cookie)
  return target;
}

size_t ForwardingPipelineConfig_Cookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ForwardingPipelineConfig.Cookie)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cookie = 1;
  if (this->_internal_cookie() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cookie());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardingPipelineConfig_Cookie::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardingPipelineConfig_Cookie::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardingPipelineConfig_Cookie::GetClassData() const { return &_class_data_; }

void ForwardingPipelineConfig_Cookie::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardingPipelineConfig_Cookie *>(to)->MergeFrom(
      static_cast<const ForwardingPipelineConfig_Cookie &>(from));
}


void ForwardingPipelineConfig_Cookie::MergeFrom(const ForwardingPipelineConfig_Cookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cookie() != 0) {
    _internal_set_cookie(from._internal_cookie());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardingPipelineConfig_Cookie::CopyFrom(const ForwardingPipelineConfig_Cookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingPipelineConfig_Cookie::IsInitialized() const {
  return true;
}

void ForwardingPipelineConfig_Cookie::InternalSwap(ForwardingPipelineConfig_Cookie* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cookie_, other->cookie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardingPipelineConfig_Cookie::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[73]);
}

// ===================================================================

class ForwardingPipelineConfig::_Internal {
 public:
  static const ::p4::config::v1::P4Info& p4info(const ForwardingPipelineConfig* msg);
  static const ::p4::v1::ForwardingPipelineConfig_Cookie& cookie(const ForwardingPipelineConfig* msg);
};

const ::p4::config::v1::P4Info&
ForwardingPipelineConfig::_Internal::p4info(const ForwardingPipelineConfig* msg) {
  return *msg->p4info_;
}
const ::p4::v1::ForwardingPipelineConfig_Cookie&
ForwardingPipelineConfig::_Internal::cookie(const ForwardingPipelineConfig* msg) {
  return *msg->cookie_;
}
void ForwardingPipelineConfig::clear_p4info() {
  if (GetArenaForAllocation() == nullptr && p4info_ != nullptr) {
    delete p4info_;
  }
  p4info_ = nullptr;
}
ForwardingPipelineConfig::ForwardingPipelineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.ForwardingPipelineConfig)
}
ForwardingPipelineConfig::ForwardingPipelineConfig(const ForwardingPipelineConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p4_device_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_p4_device_config().empty()) {
    p4_device_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_p4_device_config(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_p4info()) {
    p4info_ = new ::p4::config::v1::P4Info(*from.p4info_);
  } else {
    p4info_ = nullptr;
  }
  if (from._internal_has_cookie()) {
    cookie_ = new ::p4::v1::ForwardingPipelineConfig_Cookie(*from.cookie_);
  } else {
    cookie_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ForwardingPipelineConfig)
}

void ForwardingPipelineConfig::SharedCtor() {
p4_device_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p4info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cookie_) -
    reinterpret_cast<char*>(&p4info_)) + sizeof(cookie_));
}

ForwardingPipelineConfig::~ForwardingPipelineConfig() {
  // @@protoc_insertion_point(destructor:p4.v1.ForwardingPipelineConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ForwardingPipelineConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  p4_device_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete p4info_;
  if (this != internal_default_instance()) delete cookie_;
}

void ForwardingPipelineConfig::ArenaDtor(void* object) {
  ForwardingPipelineConfig* _this = reinterpret_cast< ForwardingPipelineConfig* >(object);
  (void)_this;
}
void ForwardingPipelineConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForwardingPipelineConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardingPipelineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ForwardingPipelineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p4_device_config_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && p4info_ != nullptr) {
    delete p4info_;
  }
  p4info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardingPipelineConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4Info p4info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p4info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes p4_device_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_p4_device_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cookie(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardingPipelineConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ForwardingPipelineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4Info p4info = 1;
  if (this->_internal_has_p4info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::p4info(this), target, stream);
  }

  // bytes p4_device_config = 2;
  if (!this->_internal_p4_device_config().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_p4_device_config(), target);
  }

  // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
  if (this->_internal_has_cookie()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cookie(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ForwardingPipelineConfig)
  return target;
}

size_t ForwardingPipelineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ForwardingPipelineConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes p4_device_config = 2;
  if (!this->_internal_p4_device_config().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p4_device_config());
  }

  // .p4.config.v1.P4Info p4info = 1;
  if (this->_internal_has_p4info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p4info_);
  }

  // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
  if (this->_internal_has_cookie()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cookie_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardingPipelineConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardingPipelineConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardingPipelineConfig::GetClassData() const { return &_class_data_; }

void ForwardingPipelineConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardingPipelineConfig *>(to)->MergeFrom(
      static_cast<const ForwardingPipelineConfig &>(from));
}


void ForwardingPipelineConfig::MergeFrom(const ForwardingPipelineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ForwardingPipelineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p4_device_config().empty()) {
    _internal_set_p4_device_config(from._internal_p4_device_config());
  }
  if (from._internal_has_p4info()) {
    _internal_mutable_p4info()->::p4::config::v1::P4Info::MergeFrom(from._internal_p4info());
  }
  if (from._internal_has_cookie()) {
    _internal_mutable_cookie()->::p4::v1::ForwardingPipelineConfig_Cookie::MergeFrom(from._internal_cookie());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardingPipelineConfig::CopyFrom(const ForwardingPipelineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ForwardingPipelineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingPipelineConfig::IsInitialized() const {
  return true;
}

void ForwardingPipelineConfig::InternalSwap(ForwardingPipelineConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &p4_device_config_, lhs_arena,
      &other->p4_device_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForwardingPipelineConfig, cookie_)
      + sizeof(ForwardingPipelineConfig::cookie_)
      - PROTOBUF_FIELD_OFFSET(ForwardingPipelineConfig, p4info_)>(
          reinterpret_cast<char*>(&p4info_),
          reinterpret_cast<char*>(&other->p4info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardingPipelineConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[74]);
}

// ===================================================================

class GetForwardingPipelineConfigRequest::_Internal {
 public:
};

GetForwardingPipelineConfigRequest::GetForwardingPipelineConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.GetForwardingPipelineConfigRequest)
}
GetForwardingPipelineConfigRequest::GetForwardingPipelineConfigRequest(const GetForwardingPipelineConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.GetForwardingPipelineConfigRequest)
}

void GetForwardingPipelineConfigRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(response_type_));
}

GetForwardingPipelineConfigRequest::~GetForwardingPipelineConfigRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.GetForwardingPipelineConfigRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetForwardingPipelineConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetForwardingPipelineConfigRequest::ArenaDtor(void* object) {
  GetForwardingPipelineConfigRequest* _this = reinterpret_cast< GetForwardingPipelineConfigRequest* >(object);
  (void)_this;
}
void GetForwardingPipelineConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetForwardingPipelineConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetForwardingPipelineConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.GetForwardingPipelineConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_type_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(response_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForwardingPipelineConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response_type(static_cast<::p4::v1::GetForwardingPipelineConfigRequest_ResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetForwardingPipelineConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.GetForwardingPipelineConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
  if (this->_internal_response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.GetForwardingPipelineConfigRequest)
  return target;
}

size_t GetForwardingPipelineConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.GetForwardingPipelineConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_device_id());
  }

  // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
  if (this->_internal_response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForwardingPipelineConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetForwardingPipelineConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForwardingPipelineConfigRequest::GetClassData() const { return &_class_data_; }

void GetForwardingPipelineConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetForwardingPipelineConfigRequest *>(to)->MergeFrom(
      static_cast<const GetForwardingPipelineConfigRequest &>(from));
}


void GetForwardingPipelineConfigRequest::MergeFrom(const GetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_response_type() != 0) {
    _internal_set_response_type(from._internal_response_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForwardingPipelineConfigRequest::CopyFrom(const GetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardingPipelineConfigRequest::IsInitialized() const {
  return true;
}

void GetForwardingPipelineConfigRequest::InternalSwap(GetForwardingPipelineConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForwardingPipelineConfigRequest, response_type_)
      + sizeof(GetForwardingPipelineConfigRequest::response_type_)
      - PROTOBUF_FIELD_OFFSET(GetForwardingPipelineConfigRequest, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForwardingPipelineConfigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[75]);
}

// ===================================================================

class GetForwardingPipelineConfigResponse::_Internal {
 public:
  static const ::p4::v1::ForwardingPipelineConfig& config(const GetForwardingPipelineConfigResponse* msg);
};

const ::p4::v1::ForwardingPipelineConfig&
GetForwardingPipelineConfigResponse::_Internal::config(const GetForwardingPipelineConfigResponse* msg) {
  return *msg->config_;
}
GetForwardingPipelineConfigResponse::GetForwardingPipelineConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.GetForwardingPipelineConfigResponse)
}
GetForwardingPipelineConfigResponse::GetForwardingPipelineConfigResponse(const GetForwardingPipelineConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::p4::v1::ForwardingPipelineConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.GetForwardingPipelineConfigResponse)
}

void GetForwardingPipelineConfigResponse::SharedCtor() {
config_ = nullptr;
}

GetForwardingPipelineConfigResponse::~GetForwardingPipelineConfigResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.GetForwardingPipelineConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetForwardingPipelineConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void GetForwardingPipelineConfigResponse::ArenaDtor(void* object) {
  GetForwardingPipelineConfigResponse* _this = reinterpret_cast< GetForwardingPipelineConfigResponse* >(object);
  (void)_this;
}
void GetForwardingPipelineConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetForwardingPipelineConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetForwardingPipelineConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.GetForwardingPipelineConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetForwardingPipelineConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.v1.ForwardingPipelineConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetForwardingPipelineConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.GetForwardingPipelineConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.v1.ForwardingPipelineConfig config = 1;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.GetForwardingPipelineConfigResponse)
  return target;
}

size_t GetForwardingPipelineConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.GetForwardingPipelineConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.v1.ForwardingPipelineConfig config = 1;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetForwardingPipelineConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetForwardingPipelineConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetForwardingPipelineConfigResponse::GetClassData() const { return &_class_data_; }

void GetForwardingPipelineConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetForwardingPipelineConfigResponse *>(to)->MergeFrom(
      static_cast<const GetForwardingPipelineConfigResponse &>(from));
}


void GetForwardingPipelineConfigResponse::MergeFrom(const GetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::p4::v1::ForwardingPipelineConfig::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetForwardingPipelineConfigResponse::CopyFrom(const GetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardingPipelineConfigResponse::IsInitialized() const {
  return true;
}

void GetForwardingPipelineConfigResponse::InternalSwap(GetForwardingPipelineConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetForwardingPipelineConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[76]);
}

// ===================================================================

class Error::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& details(const Error* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Error::_Internal::details(const Error* msg) {
  return *msg->details_;
}
void Error::clear_details() {
  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_details()) {
    details_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.details_);
  } else {
    details_ = nullptr;
  }
  ::memcpy(&canonical_code_, &from.canonical_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Error)
}

void Error::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&details_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:p4.v1.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete details_;
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  space_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  ::memset(&canonical_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&canonical_code_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 canonical_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          canonical_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.Error.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.Error.space"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 canonical_code = 1;
  if (this->_internal_canonical_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_canonical_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string space = 3;
  if (!this->_internal_space().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_space().data(), static_cast<int>(this->_internal_space().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.space");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_space(), target);
  }

  // int32 code = 4;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // .google.protobuf.Any details = 5;
  if (this->_internal_has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string space = 3;
  if (!this->_internal_space().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_space());
  }

  // .google.protobuf.Any details = 5;
  if (this->_internal_has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // int32 canonical_code = 1;
  if (this->_internal_canonical_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_canonical_code());
  }

  // int32 code = 4;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Error)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_space().empty()) {
    _internal_set_space(from._internal_space());
  }
  if (from._internal_has_details()) {
    _internal_mutable_details()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_details());
  }
  if (from._internal_canonical_code() != 0) {
    _internal_set_canonical_code(from._internal_canonical_code());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &space_, lhs_arena,
      &other->space_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, code_)
      + sizeof(Error::code_)
      - PROTOBUF_FIELD_OFFSET(Error, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[77]);
}

// ===================================================================

class CapabilitiesRequest::_Internal {
 public:
};

CapabilitiesRequest::CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.v1.CapabilitiesRequest)
}
CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.CapabilitiesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilitiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilitiesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CapabilitiesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[78]);
}

// ===================================================================

class CapabilitiesResponse::_Internal {
 public:
};

CapabilitiesResponse::CapabilitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.v1.CapabilitiesResponse)
}
CapabilitiesResponse::CapabilitiesResponse(const CapabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p4runtime_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_p4runtime_api_version().empty()) {
    p4runtime_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_p4runtime_api_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.CapabilitiesResponse)
}

void CapabilitiesResponse::SharedCtor() {
p4runtime_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CapabilitiesResponse::~CapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.CapabilitiesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CapabilitiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  p4runtime_api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CapabilitiesResponse::ArenaDtor(void* object) {
  CapabilitiesResponse* _this = reinterpret_cast< CapabilitiesResponse* >(object);
  (void)_this;
}
void CapabilitiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p4runtime_api_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string p4runtime_api_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_p4runtime_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.v1.CapabilitiesResponse.p4runtime_api_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string p4runtime_api_version = 1;
  if (!this->_internal_p4runtime_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p4runtime_api_version().data(), static_cast<int>(this->_internal_p4runtime_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.v1.CapabilitiesResponse.p4runtime_api_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_p4runtime_api_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CapabilitiesResponse)
  return target;
}

size_t CapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CapabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string p4runtime_api_version = 1;
  if (!this->_internal_p4runtime_api_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p4runtime_api_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilitiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CapabilitiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilitiesResponse::GetClassData() const { return &_class_data_; }

void CapabilitiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CapabilitiesResponse *>(to)->MergeFrom(
      static_cast<const CapabilitiesResponse &>(from));
}


void CapabilitiesResponse::MergeFrom(const CapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p4runtime_api_version().empty()) {
    _internal_set_p4runtime_api_version(from._internal_p4runtime_api_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapabilitiesResponse::CopyFrom(const CapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesResponse::IsInitialized() const {
  return true;
}

void CapabilitiesResponse::InternalSwap(CapabilitiesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &p4runtime_api_version_, lhs_arena,
      &other->p4runtime_api_version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilitiesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fv1_2fp4runtime_2eproto_getter, &descriptor_table_p4_2fv1_2fp4runtime_2eproto_once,
      file_level_metadata_p4_2fv1_2fp4runtime_2eproto[79]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p4::v1::WriteRequest* Arena::CreateMaybeMessage< ::p4::v1::WriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::WriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::WriteResponse* Arena::CreateMaybeMessage< ::p4::v1::WriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::WriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ReadRequest* Arena::CreateMaybeMessage< ::p4::v1::ReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ReadResponse* Arena::CreateMaybeMessage< ::p4::v1::ReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Update* Arena::CreateMaybeMessage< ::p4::v1::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Entity* Arena::CreateMaybeMessage< ::p4::v1::Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::RuntimeReconfigEntry* Arena::CreateMaybeMessage< ::p4::v1::RuntimeReconfigEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::RuntimeReconfigEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::RuntimeReconfigContent* Arena::CreateMaybeMessage< ::p4::v1::RuntimeReconfigContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::RuntimeReconfigContent >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::InitP4ObjectsNewEntry* Arena::CreateMaybeMessage< ::p4::v1::InitP4ObjectsNewEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::InitP4ObjectsNewEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::InsertTableEntry* Arena::CreateMaybeMessage< ::p4::v1::InsertTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::InsertTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ChangeTableEntry* Arena::CreateMaybeMessage< ::p4::v1::ChangeTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ChangeTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DeleteTableEntry* Arena::CreateMaybeMessage< ::p4::v1::DeleteTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DeleteTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::InsertConditionalEntry* Arena::CreateMaybeMessage< ::p4::v1::InsertConditionalEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::InsertConditionalEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ChangeConditionalEntry* Arena::CreateMaybeMessage< ::p4::v1::ChangeConditionalEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ChangeConditionalEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DeleteConditionalEntry* Arena::CreateMaybeMessage< ::p4::v1::DeleteConditionalEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DeleteConditionalEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::InsertFlexEntry* Arena::CreateMaybeMessage< ::p4::v1::InsertFlexEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::InsertFlexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ChangeFlexEntry* Arena::CreateMaybeMessage< ::p4::v1::ChangeFlexEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ChangeFlexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DeleteFlexEntry* Arena::CreateMaybeMessage< ::p4::v1::DeleteFlexEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DeleteFlexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::InsertRegisterArrayEntry* Arena::CreateMaybeMessage< ::p4::v1::InsertRegisterArrayEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::InsertRegisterArrayEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ChangeRegisterArrayEntry* Arena::CreateMaybeMessage< ::p4::v1::ChangeRegisterArrayEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ChangeRegisterArrayEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DeleteRegisterArrayEntry* Arena::CreateMaybeMessage< ::p4::v1::DeleteRegisterArrayEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DeleteRegisterArrayEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::TriggerEntry* Arena::CreateMaybeMessage< ::p4::v1::TriggerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::TriggerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ChangeInitEntry* Arena::CreateMaybeMessage< ::p4::v1::ChangeInitEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ChangeInitEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ExternEntry* Arena::CreateMaybeMessage< ::p4::v1::ExternEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ExternEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::TableEntry_IdleTimeout* Arena::CreateMaybeMessage< ::p4::v1::TableEntry_IdleTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::TableEntry_IdleTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::TableEntry* Arena::CreateMaybeMessage< ::p4::v1::TableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::TableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch_Exact* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch_Exact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch_Exact >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch_Ternary* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch_Ternary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch_Ternary >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch_LPM* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch_LPM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch_LPM >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch_Range* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch_Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch_Optional* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch_Optional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch_Optional >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::FieldMatch* Arena::CreateMaybeMessage< ::p4::v1::FieldMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::FieldMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::TableAction* Arena::CreateMaybeMessage< ::p4::v1::TableAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::TableAction >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Action_Param* Arena::CreateMaybeMessage< ::p4::v1::Action_Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Action_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Action* Arena::CreateMaybeMessage< ::p4::v1::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ActionProfileActionSet* Arena::CreateMaybeMessage< ::p4::v1::ActionProfileActionSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ActionProfileActionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ActionProfileAction* Arena::CreateMaybeMessage< ::p4::v1::ActionProfileAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ActionProfileAction >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ActionProfileMember* Arena::CreateMaybeMessage< ::p4::v1::ActionProfileMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ActionProfileMember >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ActionProfileGroup_Member* Arena::CreateMaybeMessage< ::p4::v1::ActionProfileGroup_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ActionProfileGroup_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ActionProfileGroup* Arena::CreateMaybeMessage< ::p4::v1::ActionProfileGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ActionProfileGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Index* Arena::CreateMaybeMessage< ::p4::v1::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Index >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::MeterEntry* Arena::CreateMaybeMessage< ::p4::v1::MeterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::MeterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DirectMeterEntry* Arena::CreateMaybeMessage< ::p4::v1::DirectMeterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DirectMeterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::MeterConfig* Arena::CreateMaybeMessage< ::p4::v1::MeterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::MeterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::CounterEntry* Arena::CreateMaybeMessage< ::p4::v1::CounterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::CounterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DirectCounterEntry* Arena::CreateMaybeMessage< ::p4::v1::DirectCounterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DirectCounterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::CounterData* Arena::CreateMaybeMessage< ::p4::v1::CounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::CounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::PacketReplicationEngineEntry* Arena::CreateMaybeMessage< ::p4::v1::PacketReplicationEngineEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::PacketReplicationEngineEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Replica* Arena::CreateMaybeMessage< ::p4::v1::Replica >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Replica >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::MulticastGroupEntry* Arena::CreateMaybeMessage< ::p4::v1::MulticastGroupEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::MulticastGroupEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::CloneSessionEntry* Arena::CreateMaybeMessage< ::p4::v1::CloneSessionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::CloneSessionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ValueSetMember* Arena::CreateMaybeMessage< ::p4::v1::ValueSetMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ValueSetMember >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ValueSetEntry* Arena::CreateMaybeMessage< ::p4::v1::ValueSetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ValueSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::RegisterEntry* Arena::CreateMaybeMessage< ::p4::v1::RegisterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::RegisterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DigestEntry_Config* Arena::CreateMaybeMessage< ::p4::v1::DigestEntry_Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DigestEntry_Config >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DigestEntry* Arena::CreateMaybeMessage< ::p4::v1::DigestEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DigestEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::StreamMessageRequest* Arena::CreateMaybeMessage< ::p4::v1::StreamMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::StreamMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::PacketOut* Arena::CreateMaybeMessage< ::p4::v1::PacketOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::PacketOut >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DigestListAck* Arena::CreateMaybeMessage< ::p4::v1::DigestListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DigestListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::StreamMessageResponse* Arena::CreateMaybeMessage< ::p4::v1::StreamMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::StreamMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::PacketIn* Arena::CreateMaybeMessage< ::p4::v1::PacketIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::PacketIn >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DigestList* Arena::CreateMaybeMessage< ::p4::v1::DigestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DigestList >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::PacketMetadata* Arena::CreateMaybeMessage< ::p4::v1::PacketMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::PacketMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::MasterArbitrationUpdate* Arena::CreateMaybeMessage< ::p4::v1::MasterArbitrationUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::MasterArbitrationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Role* Arena::CreateMaybeMessage< ::p4::v1::Role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Role >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::IdleTimeoutNotification* Arena::CreateMaybeMessage< ::p4::v1::IdleTimeoutNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::IdleTimeoutNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::StreamError* Arena::CreateMaybeMessage< ::p4::v1::StreamError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::StreamError >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::PacketOutError* Arena::CreateMaybeMessage< ::p4::v1::PacketOutError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::PacketOutError >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::DigestListAckError* Arena::CreateMaybeMessage< ::p4::v1::DigestListAckError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::DigestListAckError >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::StreamOtherError* Arena::CreateMaybeMessage< ::p4::v1::StreamOtherError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::StreamOtherError >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Uint128* Arena::CreateMaybeMessage< ::p4::v1::Uint128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Uint128 >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::SetForwardingPipelineConfigRequest* Arena::CreateMaybeMessage< ::p4::v1::SetForwardingPipelineConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::SetForwardingPipelineConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::SetForwardingPipelineConfigResponse* Arena::CreateMaybeMessage< ::p4::v1::SetForwardingPipelineConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::SetForwardingPipelineConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ForwardingPipelineConfig_Cookie* Arena::CreateMaybeMessage< ::p4::v1::ForwardingPipelineConfig_Cookie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ForwardingPipelineConfig_Cookie >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::ForwardingPipelineConfig* Arena::CreateMaybeMessage< ::p4::v1::ForwardingPipelineConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::ForwardingPipelineConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::GetForwardingPipelineConfigRequest* Arena::CreateMaybeMessage< ::p4::v1::GetForwardingPipelineConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::GetForwardingPipelineConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::GetForwardingPipelineConfigResponse* Arena::CreateMaybeMessage< ::p4::v1::GetForwardingPipelineConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::GetForwardingPipelineConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::Error* Arena::CreateMaybeMessage< ::p4::v1::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::CapabilitiesRequest* Arena::CreateMaybeMessage< ::p4::v1::CapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::CapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::v1::CapabilitiesResponse* Arena::CreateMaybeMessage< ::p4::v1::CapabilitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::v1::CapabilitiesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
