// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/config/v1/p4info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4info_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4info_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "p4/config/v1/p4types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p4_2fconfig_2fv1_2fp4info_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto;
namespace p4 {
namespace config {
namespace v1 {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionProfile;
struct ActionProfileDefaultTypeInternal;
extern ActionProfileDefaultTypeInternal _ActionProfile_default_instance_;
class ActionRef;
struct ActionRefDefaultTypeInternal;
extern ActionRefDefaultTypeInternal _ActionRef_default_instance_;
class Action_Param;
struct Action_ParamDefaultTypeInternal;
extern Action_ParamDefaultTypeInternal _Action_Param_default_instance_;
class ControllerPacketMetadata;
struct ControllerPacketMetadataDefaultTypeInternal;
extern ControllerPacketMetadataDefaultTypeInternal _ControllerPacketMetadata_default_instance_;
class ControllerPacketMetadata_Metadata;
struct ControllerPacketMetadata_MetadataDefaultTypeInternal;
extern ControllerPacketMetadata_MetadataDefaultTypeInternal _ControllerPacketMetadata_Metadata_default_instance_;
class Counter;
struct CounterDefaultTypeInternal;
extern CounterDefaultTypeInternal _Counter_default_instance_;
class CounterSpec;
struct CounterSpecDefaultTypeInternal;
extern CounterSpecDefaultTypeInternal _CounterSpec_default_instance_;
class Digest;
struct DigestDefaultTypeInternal;
extern DigestDefaultTypeInternal _Digest_default_instance_;
class DirectCounter;
struct DirectCounterDefaultTypeInternal;
extern DirectCounterDefaultTypeInternal _DirectCounter_default_instance_;
class DirectMeter;
struct DirectMeterDefaultTypeInternal;
extern DirectMeterDefaultTypeInternal _DirectMeter_default_instance_;
class Documentation;
struct DocumentationDefaultTypeInternal;
extern DocumentationDefaultTypeInternal _Documentation_default_instance_;
class Extern;
struct ExternDefaultTypeInternal;
extern ExternDefaultTypeInternal _Extern_default_instance_;
class ExternInstance;
struct ExternInstanceDefaultTypeInternal;
extern ExternInstanceDefaultTypeInternal _ExternInstance_default_instance_;
class MatchField;
struct MatchFieldDefaultTypeInternal;
extern MatchFieldDefaultTypeInternal _MatchField_default_instance_;
class Meter;
struct MeterDefaultTypeInternal;
extern MeterDefaultTypeInternal _Meter_default_instance_;
class MeterSpec;
struct MeterSpecDefaultTypeInternal;
extern MeterSpecDefaultTypeInternal _MeterSpec_default_instance_;
class P4Ids;
struct P4IdsDefaultTypeInternal;
extern P4IdsDefaultTypeInternal _P4Ids_default_instance_;
class P4Info;
struct P4InfoDefaultTypeInternal;
extern P4InfoDefaultTypeInternal _P4Info_default_instance_;
class PkgInfo;
struct PkgInfoDefaultTypeInternal;
extern PkgInfoDefaultTypeInternal _PkgInfo_default_instance_;
class Preamble;
struct PreambleDefaultTypeInternal;
extern PreambleDefaultTypeInternal _Preamble_default_instance_;
class Register;
struct RegisterDefaultTypeInternal;
extern RegisterDefaultTypeInternal _Register_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class ValueSet;
struct ValueSetDefaultTypeInternal;
extern ValueSetDefaultTypeInternal _ValueSet_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> ::p4::config::v1::Action* Arena::CreateMaybeMessage<::p4::config::v1::Action>(Arena*);
template<> ::p4::config::v1::ActionProfile* Arena::CreateMaybeMessage<::p4::config::v1::ActionProfile>(Arena*);
template<> ::p4::config::v1::ActionRef* Arena::CreateMaybeMessage<::p4::config::v1::ActionRef>(Arena*);
template<> ::p4::config::v1::Action_Param* Arena::CreateMaybeMessage<::p4::config::v1::Action_Param>(Arena*);
template<> ::p4::config::v1::ControllerPacketMetadata* Arena::CreateMaybeMessage<::p4::config::v1::ControllerPacketMetadata>(Arena*);
template<> ::p4::config::v1::ControllerPacketMetadata_Metadata* Arena::CreateMaybeMessage<::p4::config::v1::ControllerPacketMetadata_Metadata>(Arena*);
template<> ::p4::config::v1::Counter* Arena::CreateMaybeMessage<::p4::config::v1::Counter>(Arena*);
template<> ::p4::config::v1::CounterSpec* Arena::CreateMaybeMessage<::p4::config::v1::CounterSpec>(Arena*);
template<> ::p4::config::v1::Digest* Arena::CreateMaybeMessage<::p4::config::v1::Digest>(Arena*);
template<> ::p4::config::v1::DirectCounter* Arena::CreateMaybeMessage<::p4::config::v1::DirectCounter>(Arena*);
template<> ::p4::config::v1::DirectMeter* Arena::CreateMaybeMessage<::p4::config::v1::DirectMeter>(Arena*);
template<> ::p4::config::v1::Documentation* Arena::CreateMaybeMessage<::p4::config::v1::Documentation>(Arena*);
template<> ::p4::config::v1::Extern* Arena::CreateMaybeMessage<::p4::config::v1::Extern>(Arena*);
template<> ::p4::config::v1::ExternInstance* Arena::CreateMaybeMessage<::p4::config::v1::ExternInstance>(Arena*);
template<> ::p4::config::v1::MatchField* Arena::CreateMaybeMessage<::p4::config::v1::MatchField>(Arena*);
template<> ::p4::config::v1::Meter* Arena::CreateMaybeMessage<::p4::config::v1::Meter>(Arena*);
template<> ::p4::config::v1::MeterSpec* Arena::CreateMaybeMessage<::p4::config::v1::MeterSpec>(Arena*);
template<> ::p4::config::v1::P4Ids* Arena::CreateMaybeMessage<::p4::config::v1::P4Ids>(Arena*);
template<> ::p4::config::v1::P4Info* Arena::CreateMaybeMessage<::p4::config::v1::P4Info>(Arena*);
template<> ::p4::config::v1::PkgInfo* Arena::CreateMaybeMessage<::p4::config::v1::PkgInfo>(Arena*);
template<> ::p4::config::v1::Preamble* Arena::CreateMaybeMessage<::p4::config::v1::Preamble>(Arena*);
template<> ::p4::config::v1::Register* Arena::CreateMaybeMessage<::p4::config::v1::Register>(Arena*);
template<> ::p4::config::v1::Table* Arena::CreateMaybeMessage<::p4::config::v1::Table>(Arena*);
template<> ::p4::config::v1::ValueSet* Arena::CreateMaybeMessage<::p4::config::v1::ValueSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p4 {
namespace config {
namespace v1 {

enum P4Ids_Prefix : int {
  P4Ids_Prefix_UNSPECIFIED = 0,
  P4Ids_Prefix_ACTION = 1,
  P4Ids_Prefix_TABLE = 2,
  P4Ids_Prefix_VALUE_SET = 3,
  P4Ids_Prefix_CONTROLLER_HEADER = 4,
  P4Ids_Prefix_PSA_EXTERNS_START = 16,
  P4Ids_Prefix_ACTION_PROFILE = 17,
  P4Ids_Prefix_COUNTER = 18,
  P4Ids_Prefix_DIRECT_COUNTER = 19,
  P4Ids_Prefix_METER = 20,
  P4Ids_Prefix_DIRECT_METER = 21,
  P4Ids_Prefix_REGISTER = 22,
  P4Ids_Prefix_DIGEST = 23,
  P4Ids_Prefix_OTHER_EXTERNS_START = 128,
  P4Ids_Prefix_MAX = 255,
  P4Ids_Prefix_P4Ids_Prefix_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  P4Ids_Prefix_P4Ids_Prefix_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool P4Ids_Prefix_IsValid(int value);
constexpr P4Ids_Prefix P4Ids_Prefix_Prefix_MIN = P4Ids_Prefix_UNSPECIFIED;
constexpr P4Ids_Prefix P4Ids_Prefix_Prefix_MAX = P4Ids_Prefix_MAX;
constexpr int P4Ids_Prefix_Prefix_ARRAYSIZE = P4Ids_Prefix_Prefix_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P4Ids_Prefix_descriptor();
template<typename T>
inline const std::string& P4Ids_Prefix_Name(T enum_t_value) {
  static_assert(::std::is_same<T, P4Ids_Prefix>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function P4Ids_Prefix_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    P4Ids_Prefix_descriptor(), enum_t_value);
}
inline bool P4Ids_Prefix_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, P4Ids_Prefix* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<P4Ids_Prefix>(
    P4Ids_Prefix_descriptor(), name, value);
}
enum MatchField_MatchType : int {
  MatchField_MatchType_UNSPECIFIED = 0,
  MatchField_MatchType_EXACT = 2,
  MatchField_MatchType_LPM = 3,
  MatchField_MatchType_TERNARY = 4,
  MatchField_MatchType_RANGE = 5,
  MatchField_MatchType_OPTIONAL = 6,
  MatchField_MatchType_MatchField_MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MatchField_MatchType_MatchField_MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchField_MatchType_IsValid(int value);
constexpr MatchField_MatchType MatchField_MatchType_MatchType_MIN = MatchField_MatchType_UNSPECIFIED;
constexpr MatchField_MatchType MatchField_MatchType_MatchType_MAX = MatchField_MatchType_OPTIONAL;
constexpr int MatchField_MatchType_MatchType_ARRAYSIZE = MatchField_MatchType_MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchField_MatchType_descriptor();
template<typename T>
inline const std::string& MatchField_MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchField_MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchField_MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchField_MatchType_descriptor(), enum_t_value);
}
inline bool MatchField_MatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchField_MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchField_MatchType>(
    MatchField_MatchType_descriptor(), name, value);
}
enum Table_IdleTimeoutBehavior : int {
  Table_IdleTimeoutBehavior_NO_TIMEOUT = 0,
  Table_IdleTimeoutBehavior_NOTIFY_CONTROL = 1,
  Table_IdleTimeoutBehavior_Table_IdleTimeoutBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Table_IdleTimeoutBehavior_Table_IdleTimeoutBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Table_IdleTimeoutBehavior_IsValid(int value);
constexpr Table_IdleTimeoutBehavior Table_IdleTimeoutBehavior_IdleTimeoutBehavior_MIN = Table_IdleTimeoutBehavior_NO_TIMEOUT;
constexpr Table_IdleTimeoutBehavior Table_IdleTimeoutBehavior_IdleTimeoutBehavior_MAX = Table_IdleTimeoutBehavior_NOTIFY_CONTROL;
constexpr int Table_IdleTimeoutBehavior_IdleTimeoutBehavior_ARRAYSIZE = Table_IdleTimeoutBehavior_IdleTimeoutBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Table_IdleTimeoutBehavior_descriptor();
template<typename T>
inline const std::string& Table_IdleTimeoutBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Table_IdleTimeoutBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Table_IdleTimeoutBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Table_IdleTimeoutBehavior_descriptor(), enum_t_value);
}
inline bool Table_IdleTimeoutBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Table_IdleTimeoutBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Table_IdleTimeoutBehavior>(
    Table_IdleTimeoutBehavior_descriptor(), name, value);
}
enum ActionRef_Scope : int {
  ActionRef_Scope_TABLE_AND_DEFAULT = 0,
  ActionRef_Scope_TABLE_ONLY = 1,
  ActionRef_Scope_DEFAULT_ONLY = 2,
  ActionRef_Scope_ActionRef_Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionRef_Scope_ActionRef_Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionRef_Scope_IsValid(int value);
constexpr ActionRef_Scope ActionRef_Scope_Scope_MIN = ActionRef_Scope_TABLE_AND_DEFAULT;
constexpr ActionRef_Scope ActionRef_Scope_Scope_MAX = ActionRef_Scope_DEFAULT_ONLY;
constexpr int ActionRef_Scope_Scope_ARRAYSIZE = ActionRef_Scope_Scope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionRef_Scope_descriptor();
template<typename T>
inline const std::string& ActionRef_Scope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionRef_Scope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionRef_Scope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionRef_Scope_descriptor(), enum_t_value);
}
inline bool ActionRef_Scope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionRef_Scope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionRef_Scope>(
    ActionRef_Scope_descriptor(), name, value);
}
enum CounterSpec_Unit : int {
  CounterSpec_Unit_UNSPECIFIED = 0,
  CounterSpec_Unit_BYTES = 1,
  CounterSpec_Unit_PACKETS = 2,
  CounterSpec_Unit_BOTH = 3,
  CounterSpec_Unit_CounterSpec_Unit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CounterSpec_Unit_CounterSpec_Unit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CounterSpec_Unit_IsValid(int value);
constexpr CounterSpec_Unit CounterSpec_Unit_Unit_MIN = CounterSpec_Unit_UNSPECIFIED;
constexpr CounterSpec_Unit CounterSpec_Unit_Unit_MAX = CounterSpec_Unit_BOTH;
constexpr int CounterSpec_Unit_Unit_ARRAYSIZE = CounterSpec_Unit_Unit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterSpec_Unit_descriptor();
template<typename T>
inline const std::string& CounterSpec_Unit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CounterSpec_Unit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CounterSpec_Unit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CounterSpec_Unit_descriptor(), enum_t_value);
}
inline bool CounterSpec_Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterSpec_Unit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CounterSpec_Unit>(
    CounterSpec_Unit_descriptor(), name, value);
}
enum MeterSpec_Unit : int {
  MeterSpec_Unit_UNSPECIFIED = 0,
  MeterSpec_Unit_BYTES = 1,
  MeterSpec_Unit_PACKETS = 2,
  MeterSpec_Unit_MeterSpec_Unit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MeterSpec_Unit_MeterSpec_Unit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MeterSpec_Unit_IsValid(int value);
constexpr MeterSpec_Unit MeterSpec_Unit_Unit_MIN = MeterSpec_Unit_UNSPECIFIED;
constexpr MeterSpec_Unit MeterSpec_Unit_Unit_MAX = MeterSpec_Unit_PACKETS;
constexpr int MeterSpec_Unit_Unit_ARRAYSIZE = MeterSpec_Unit_Unit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeterSpec_Unit_descriptor();
template<typename T>
inline const std::string& MeterSpec_Unit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MeterSpec_Unit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MeterSpec_Unit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MeterSpec_Unit_descriptor(), enum_t_value);
}
inline bool MeterSpec_Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MeterSpec_Unit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MeterSpec_Unit>(
    MeterSpec_Unit_descriptor(), name, value);
}
// ===================================================================

class P4Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4Info) */ {
 public:
  inline P4Info() : P4Info(nullptr) {}
  ~P4Info() override;
  explicit constexpr P4Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4Info(const P4Info& from);
  P4Info(P4Info&& from) noexcept
    : P4Info() {
    *this = ::std::move(from);
  }

  inline P4Info& operator=(const P4Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4Info& operator=(P4Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4Info* internal_default_instance() {
    return reinterpret_cast<const P4Info*>(
               &_P4Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P4Info& a, P4Info& b) {
    a.Swap(&b);
  }
  inline void Swap(P4Info* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4Info* New() const final {
    return new P4Info();
  }

  P4Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4Info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4Info";
  }
  protected:
  explicit P4Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 2,
    kActionsFieldNumber = 3,
    kActionProfilesFieldNumber = 4,
    kCountersFieldNumber = 5,
    kDirectCountersFieldNumber = 6,
    kMetersFieldNumber = 7,
    kDirectMetersFieldNumber = 8,
    kControllerPacketMetadataFieldNumber = 9,
    kValueSetsFieldNumber = 10,
    kRegistersFieldNumber = 11,
    kDigestsFieldNumber = 12,
    kExternsFieldNumber = 100,
    kPkgInfoFieldNumber = 1,
    kTypeInfoFieldNumber = 200,
  };
  // repeated .p4.config.v1.Table tables = 2;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::p4::config::v1::Table* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Table >*
      mutable_tables();
  private:
  const ::p4::config::v1::Table& _internal_tables(int index) const;
  ::p4::config::v1::Table* _internal_add_tables();
  public:
  const ::p4::config::v1::Table& tables(int index) const;
  ::p4::config::v1::Table* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Table >&
      tables() const;

  // repeated .p4.config.v1.Action actions = 3;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::p4::config::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action >*
      mutable_actions();
  private:
  const ::p4::config::v1::Action& _internal_actions(int index) const;
  ::p4::config::v1::Action* _internal_add_actions();
  public:
  const ::p4::config::v1::Action& actions(int index) const;
  ::p4::config::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action >&
      actions() const;

  // repeated .p4.config.v1.ActionProfile action_profiles = 4;
  int action_profiles_size() const;
  private:
  int _internal_action_profiles_size() const;
  public:
  void clear_action_profiles();
  ::p4::config::v1::ActionProfile* mutable_action_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionProfile >*
      mutable_action_profiles();
  private:
  const ::p4::config::v1::ActionProfile& _internal_action_profiles(int index) const;
  ::p4::config::v1::ActionProfile* _internal_add_action_profiles();
  public:
  const ::p4::config::v1::ActionProfile& action_profiles(int index) const;
  ::p4::config::v1::ActionProfile* add_action_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionProfile >&
      action_profiles() const;

  // repeated .p4.config.v1.Counter counters = 5;
  int counters_size() const;
  private:
  int _internal_counters_size() const;
  public:
  void clear_counters();
  ::p4::config::v1::Counter* mutable_counters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Counter >*
      mutable_counters();
  private:
  const ::p4::config::v1::Counter& _internal_counters(int index) const;
  ::p4::config::v1::Counter* _internal_add_counters();
  public:
  const ::p4::config::v1::Counter& counters(int index) const;
  ::p4::config::v1::Counter* add_counters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Counter >&
      counters() const;

  // repeated .p4.config.v1.DirectCounter direct_counters = 6;
  int direct_counters_size() const;
  private:
  int _internal_direct_counters_size() const;
  public:
  void clear_direct_counters();
  ::p4::config::v1::DirectCounter* mutable_direct_counters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectCounter >*
      mutable_direct_counters();
  private:
  const ::p4::config::v1::DirectCounter& _internal_direct_counters(int index) const;
  ::p4::config::v1::DirectCounter* _internal_add_direct_counters();
  public:
  const ::p4::config::v1::DirectCounter& direct_counters(int index) const;
  ::p4::config::v1::DirectCounter* add_direct_counters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectCounter >&
      direct_counters() const;

  // repeated .p4.config.v1.Meter meters = 7;
  int meters_size() const;
  private:
  int _internal_meters_size() const;
  public:
  void clear_meters();
  ::p4::config::v1::Meter* mutable_meters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Meter >*
      mutable_meters();
  private:
  const ::p4::config::v1::Meter& _internal_meters(int index) const;
  ::p4::config::v1::Meter* _internal_add_meters();
  public:
  const ::p4::config::v1::Meter& meters(int index) const;
  ::p4::config::v1::Meter* add_meters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Meter >&
      meters() const;

  // repeated .p4.config.v1.DirectMeter direct_meters = 8;
  int direct_meters_size() const;
  private:
  int _internal_direct_meters_size() const;
  public:
  void clear_direct_meters();
  ::p4::config::v1::DirectMeter* mutable_direct_meters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectMeter >*
      mutable_direct_meters();
  private:
  const ::p4::config::v1::DirectMeter& _internal_direct_meters(int index) const;
  ::p4::config::v1::DirectMeter* _internal_add_direct_meters();
  public:
  const ::p4::config::v1::DirectMeter& direct_meters(int index) const;
  ::p4::config::v1::DirectMeter* add_direct_meters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectMeter >&
      direct_meters() const;

  // repeated .p4.config.v1.ControllerPacketMetadata controller_packet_metadata = 9;
  int controller_packet_metadata_size() const;
  private:
  int _internal_controller_packet_metadata_size() const;
  public:
  void clear_controller_packet_metadata();
  ::p4::config::v1::ControllerPacketMetadata* mutable_controller_packet_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata >*
      mutable_controller_packet_metadata();
  private:
  const ::p4::config::v1::ControllerPacketMetadata& _internal_controller_packet_metadata(int index) const;
  ::p4::config::v1::ControllerPacketMetadata* _internal_add_controller_packet_metadata();
  public:
  const ::p4::config::v1::ControllerPacketMetadata& controller_packet_metadata(int index) const;
  ::p4::config::v1::ControllerPacketMetadata* add_controller_packet_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata >&
      controller_packet_metadata() const;

  // repeated .p4.config.v1.ValueSet value_sets = 10;
  int value_sets_size() const;
  private:
  int _internal_value_sets_size() const;
  public:
  void clear_value_sets();
  ::p4::config::v1::ValueSet* mutable_value_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ValueSet >*
      mutable_value_sets();
  private:
  const ::p4::config::v1::ValueSet& _internal_value_sets(int index) const;
  ::p4::config::v1::ValueSet* _internal_add_value_sets();
  public:
  const ::p4::config::v1::ValueSet& value_sets(int index) const;
  ::p4::config::v1::ValueSet* add_value_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ValueSet >&
      value_sets() const;

  // repeated .p4.config.v1.Register registers = 11;
  int registers_size() const;
  private:
  int _internal_registers_size() const;
  public:
  void clear_registers();
  ::p4::config::v1::Register* mutable_registers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Register >*
      mutable_registers();
  private:
  const ::p4::config::v1::Register& _internal_registers(int index) const;
  ::p4::config::v1::Register* _internal_add_registers();
  public:
  const ::p4::config::v1::Register& registers(int index) const;
  ::p4::config::v1::Register* add_registers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Register >&
      registers() const;

  // repeated .p4.config.v1.Digest digests = 12;
  int digests_size() const;
  private:
  int _internal_digests_size() const;
  public:
  void clear_digests();
  ::p4::config::v1::Digest* mutable_digests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Digest >*
      mutable_digests();
  private:
  const ::p4::config::v1::Digest& _internal_digests(int index) const;
  ::p4::config::v1::Digest* _internal_add_digests();
  public:
  const ::p4::config::v1::Digest& digests(int index) const;
  ::p4::config::v1::Digest* add_digests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Digest >&
      digests() const;

  // repeated .p4.config.v1.Extern externs = 100;
  int externs_size() const;
  private:
  int _internal_externs_size() const;
  public:
  void clear_externs();
  ::p4::config::v1::Extern* mutable_externs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Extern >*
      mutable_externs();
  private:
  const ::p4::config::v1::Extern& _internal_externs(int index) const;
  ::p4::config::v1::Extern* _internal_add_externs();
  public:
  const ::p4::config::v1::Extern& externs(int index) const;
  ::p4::config::v1::Extern* add_externs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Extern >&
      externs() const;

  // .p4.config.v1.PkgInfo pkg_info = 1;
  bool has_pkg_info() const;
  private:
  bool _internal_has_pkg_info() const;
  public:
  void clear_pkg_info();
  const ::p4::config::v1::PkgInfo& pkg_info() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::PkgInfo* release_pkg_info();
  ::p4::config::v1::PkgInfo* mutable_pkg_info();
  void set_allocated_pkg_info(::p4::config::v1::PkgInfo* pkg_info);
  private:
  const ::p4::config::v1::PkgInfo& _internal_pkg_info() const;
  ::p4::config::v1::PkgInfo* _internal_mutable_pkg_info();
  public:
  void unsafe_arena_set_allocated_pkg_info(
      ::p4::config::v1::PkgInfo* pkg_info);
  ::p4::config::v1::PkgInfo* unsafe_arena_release_pkg_info();

  // .p4.config.v1.P4TypeInfo type_info = 200;
  bool has_type_info() const;
  private:
  bool _internal_has_type_info() const;
  public:
  void clear_type_info();
  const ::p4::config::v1::P4TypeInfo& type_info() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4TypeInfo* release_type_info();
  ::p4::config::v1::P4TypeInfo* mutable_type_info();
  void set_allocated_type_info(::p4::config::v1::P4TypeInfo* type_info);
  private:
  const ::p4::config::v1::P4TypeInfo& _internal_type_info() const;
  ::p4::config::v1::P4TypeInfo* _internal_mutable_type_info();
  public:
  void unsafe_arena_set_allocated_type_info(
      ::p4::config::v1::P4TypeInfo* type_info);
  ::p4::config::v1::P4TypeInfo* unsafe_arena_release_type_info();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Table > tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionProfile > action_profiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Counter > counters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectCounter > direct_counters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Meter > meters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectMeter > direct_meters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata > controller_packet_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ValueSet > value_sets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Register > registers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Digest > digests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Extern > externs_;
  ::p4::config::v1::PkgInfo* pkg_info_;
  ::p4::config::v1::P4TypeInfo* type_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Documentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Documentation) */ {
 public:
  inline Documentation() : Documentation(nullptr) {}
  ~Documentation() override;
  explicit constexpr Documentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Documentation(const Documentation& from);
  Documentation(Documentation&& from) noexcept
    : Documentation() {
    *this = ::std::move(from);
  }

  inline Documentation& operator=(const Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Documentation& operator=(Documentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Documentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Documentation* internal_default_instance() {
    return reinterpret_cast<const Documentation*>(
               &_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Documentation& a, Documentation& b) {
    a.Swap(&b);
  }
  inline void Swap(Documentation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Documentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Documentation* New() const final {
    return new Documentation();
  }

  Documentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Documentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Documentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Documentation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Documentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Documentation";
  }
  protected:
  explicit Documentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string brief = 1;
  void clear_brief();
  const std::string& brief() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brief(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brief();
  PROTOBUF_MUST_USE_RESULT std::string* release_brief();
  void set_allocated_brief(std::string* brief);
  private:
  const std::string& _internal_brief() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brief(const std::string& value);
  std::string* _internal_mutable_brief();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Documentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brief_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class PkgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.PkgInfo) */ {
 public:
  inline PkgInfo() : PkgInfo(nullptr) {}
  ~PkgInfo() override;
  explicit constexpr PkgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PkgInfo(const PkgInfo& from);
  PkgInfo(PkgInfo&& from) noexcept
    : PkgInfo() {
    *this = ::std::move(from);
  }

  inline PkgInfo& operator=(const PkgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PkgInfo& operator=(PkgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PkgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PkgInfo* internal_default_instance() {
    return reinterpret_cast<const PkgInfo*>(
               &_PkgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PkgInfo& a, PkgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PkgInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PkgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PkgInfo* New() const final {
    return new PkgInfo();
  }

  PkgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PkgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PkgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PkgInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PkgInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.PkgInfo";
  }
  protected:
  explicit PkgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 4,
    kStructuredAnnotationsFieldNumber = 9,
    kAnnotationLocationsFieldNumber = 10,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kArchFieldNumber = 5,
    kOrganizationFieldNumber = 6,
    kContactFieldNumber = 7,
    kUrlFieldNumber = 8,
    kDocFieldNumber = 3,
  };
  // repeated string annotations = 4;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string arch = 5;
  void clear_arch();
  const std::string& arch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arch();
  PROTOBUF_MUST_USE_RESULT std::string* release_arch();
  void set_allocated_arch(std::string* arch);
  private:
  const std::string& _internal_arch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arch(const std::string& value);
  std::string* _internal_mutable_arch();
  public:

  // string organization = 6;
  void clear_organization();
  const std::string& organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // string contact = 7;
  void clear_contact();
  const std::string& contact() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contact(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contact();
  PROTOBUF_MUST_USE_RESULT std::string* release_contact();
  void set_allocated_contact(std::string* contact);
  private:
  const std::string& _internal_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contact(const std::string& value);
  std::string* _internal_mutable_contact();
  public:

  // string url = 8;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .p4.config.v1.Documentation doc = 3;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::p4::config::v1::Documentation& doc() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Documentation* release_doc();
  ::p4::config::v1::Documentation* mutable_doc();
  void set_allocated_doc(::p4::config::v1::Documentation* doc);
  private:
  const ::p4::config::v1::Documentation& _internal_doc() const;
  ::p4::config::v1::Documentation* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::p4::config::v1::Documentation* doc);
  ::p4::config::v1::Documentation* unsafe_arena_release_doc();

  // @@protoc_insertion_point(class_scope:p4.config.v1.PkgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::p4::config::v1::Documentation* doc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class P4Ids final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:p4.config.v1.P4Ids) */ {
 public:
  inline P4Ids() : P4Ids(nullptr) {}
  explicit constexpr P4Ids(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4Ids(const P4Ids& from);
  P4Ids(P4Ids&& from) noexcept
    : P4Ids() {
    *this = ::std::move(from);
  }

  inline P4Ids& operator=(const P4Ids& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4Ids& operator=(P4Ids&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4Ids& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4Ids* internal_default_instance() {
    return reinterpret_cast<const P4Ids*>(
               &_P4Ids_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(P4Ids& a, P4Ids& b) {
    a.Swap(&b);
  }
  inline void Swap(P4Ids* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4Ids* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4Ids* New() const final {
    return new P4Ids();
  }

  P4Ids* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4Ids>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const P4Ids& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const P4Ids& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4Ids";
  }
  protected:
  explicit P4Ids(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4Ids_Prefix Prefix;
  static constexpr Prefix UNSPECIFIED =
    P4Ids_Prefix_UNSPECIFIED;
  static constexpr Prefix ACTION =
    P4Ids_Prefix_ACTION;
  static constexpr Prefix TABLE =
    P4Ids_Prefix_TABLE;
  static constexpr Prefix VALUE_SET =
    P4Ids_Prefix_VALUE_SET;
  static constexpr Prefix CONTROLLER_HEADER =
    P4Ids_Prefix_CONTROLLER_HEADER;
  static constexpr Prefix PSA_EXTERNS_START =
    P4Ids_Prefix_PSA_EXTERNS_START;
  static constexpr Prefix ACTION_PROFILE =
    P4Ids_Prefix_ACTION_PROFILE;
  static constexpr Prefix COUNTER =
    P4Ids_Prefix_COUNTER;
  static constexpr Prefix DIRECT_COUNTER =
    P4Ids_Prefix_DIRECT_COUNTER;
  static constexpr Prefix METER =
    P4Ids_Prefix_METER;
  static constexpr Prefix DIRECT_METER =
    P4Ids_Prefix_DIRECT_METER;
  static constexpr Prefix REGISTER =
    P4Ids_Prefix_REGISTER;
  static constexpr Prefix DIGEST =
    P4Ids_Prefix_DIGEST;
  static constexpr Prefix OTHER_EXTERNS_START =
    P4Ids_Prefix_OTHER_EXTERNS_START;
  static constexpr Prefix MAX =
    P4Ids_Prefix_MAX;
  static inline bool Prefix_IsValid(int value) {
    return P4Ids_Prefix_IsValid(value);
  }
  static constexpr Prefix Prefix_MIN =
    P4Ids_Prefix_Prefix_MIN;
  static constexpr Prefix Prefix_MAX =
    P4Ids_Prefix_Prefix_MAX;
  static constexpr int Prefix_ARRAYSIZE =
    P4Ids_Prefix_Prefix_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Prefix_descriptor() {
    return P4Ids_Prefix_descriptor();
  }
  template<typename T>
  static inline const std::string& Prefix_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Prefix>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Prefix_Name.");
    return P4Ids_Prefix_Name(enum_t_value);
  }
  static inline bool Prefix_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Prefix* value) {
    return P4Ids_Prefix_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4Ids)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Preamble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Preamble) */ {
 public:
  inline Preamble() : Preamble(nullptr) {}
  ~Preamble() override;
  explicit constexpr Preamble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Preamble(const Preamble& from);
  Preamble(Preamble&& from) noexcept
    : Preamble() {
    *this = ::std::move(from);
  }

  inline Preamble& operator=(const Preamble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Preamble& operator=(Preamble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Preamble& default_instance() {
    return *internal_default_instance();
  }
  static inline const Preamble* internal_default_instance() {
    return reinterpret_cast<const Preamble*>(
               &_Preamble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Preamble& a, Preamble& b) {
    a.Swap(&b);
  }
  inline void Swap(Preamble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Preamble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Preamble* New() const final {
    return new Preamble();
  }

  Preamble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Preamble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Preamble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Preamble& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preamble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Preamble";
  }
  protected:
  explicit Preamble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 4,
    kStructuredAnnotationsFieldNumber = 6,
    kAnnotationLocationsFieldNumber = 7,
    kNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kDocFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated string annotations = 4;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_MUST_USE_RESULT std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .p4.config.v1.Documentation doc = 5;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::p4::config::v1::Documentation& doc() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Documentation* release_doc();
  ::p4::config::v1::Documentation* mutable_doc();
  void set_allocated_doc(::p4::config::v1::Documentation* doc);
  private:
  const ::p4::config::v1::Documentation& _internal_doc() const;
  ::p4::config::v1::Documentation* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::p4::config::v1::Documentation* doc);
  ::p4::config::v1::Documentation* unsafe_arena_release_doc();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Preamble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::p4::config::v1::Documentation* doc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Extern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Extern) */ {
 public:
  inline Extern() : Extern(nullptr) {}
  ~Extern() override;
  explicit constexpr Extern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extern(const Extern& from);
  Extern(Extern&& from) noexcept
    : Extern() {
    *this = ::std::move(from);
  }

  inline Extern& operator=(const Extern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extern& operator=(Extern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extern* internal_default_instance() {
    return reinterpret_cast<const Extern*>(
               &_Extern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Extern& a, Extern& b) {
    a.Swap(&b);
  }
  inline void Swap(Extern* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extern* New() const final {
    return new Extern();
  }

  Extern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Extern& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Extern";
  }
  protected:
  explicit Extern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancesFieldNumber = 3,
    kExternTypeNameFieldNumber = 2,
    kExternTypeIdFieldNumber = 1,
  };
  // repeated .p4.config.v1.ExternInstance instances = 3;
  int instances_size() const;
  private:
  int _internal_instances_size() const;
  public:
  void clear_instances();
  ::p4::config::v1::ExternInstance* mutable_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ExternInstance >*
      mutable_instances();
  private:
  const ::p4::config::v1::ExternInstance& _internal_instances(int index) const;
  ::p4::config::v1::ExternInstance* _internal_add_instances();
  public:
  const ::p4::config::v1::ExternInstance& instances(int index) const;
  ::p4::config::v1::ExternInstance* add_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ExternInstance >&
      instances() const;

  // string extern_type_name = 2;
  void clear_extern_type_name();
  const std::string& extern_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extern_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extern_type_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_extern_type_name();
  void set_allocated_extern_type_name(std::string* extern_type_name);
  private:
  const std::string& _internal_extern_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extern_type_name(const std::string& value);
  std::string* _internal_mutable_extern_type_name();
  public:

  // uint32 extern_type_id = 1;
  void clear_extern_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_type_id() const;
  void set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extern_type_id() const;
  void _internal_set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Extern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ExternInstance > instances_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extern_type_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_type_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ExternInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ExternInstance) */ {
 public:
  inline ExternInstance() : ExternInstance(nullptr) {}
  ~ExternInstance() override;
  explicit constexpr ExternInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternInstance(const ExternInstance& from);
  ExternInstance(ExternInstance&& from) noexcept
    : ExternInstance() {
    *this = ::std::move(from);
  }

  inline ExternInstance& operator=(const ExternInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternInstance& operator=(ExternInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternInstance* internal_default_instance() {
    return reinterpret_cast<const ExternInstance*>(
               &_ExternInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExternInstance& a, ExternInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternInstance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternInstance* New() const final {
    return new ExternInstance();
  }

  ExternInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExternInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ExternInstance";
  }
  protected:
  explicit ExternInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .google.protobuf.Any info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::PROTOBUF_NAMESPACE_ID::Any& info() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Any* release_info();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_info();
  void set_allocated_info(::PROTOBUF_NAMESPACE_ID::Any* info);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::PROTOBUF_NAMESPACE_ID::Any* info);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:p4.config.v1.ExternInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::PROTOBUF_NAMESPACE_ID::Any* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class MatchField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.MatchField) */ {
 public:
  inline MatchField() : MatchField(nullptr) {}
  ~MatchField() override;
  explicit constexpr MatchField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchField(const MatchField& from);
  MatchField(MatchField&& from) noexcept
    : MatchField() {
    *this = ::std::move(from);
  }

  inline MatchField& operator=(const MatchField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchField& operator=(MatchField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchField& default_instance() {
    return *internal_default_instance();
  }
  enum MatchCase {
    kMatchType = 5,
    kOtherMatchType = 7,
    MATCH_NOT_SET = 0,
  };

  static inline const MatchField* internal_default_instance() {
    return reinterpret_cast<const MatchField*>(
               &_MatchField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MatchField& a, MatchField& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchField* New() const final {
    return new MatchField();
  }

  MatchField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.MatchField";
  }
  protected:
  explicit MatchField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchField_MatchType MatchType;
  static constexpr MatchType UNSPECIFIED =
    MatchField_MatchType_UNSPECIFIED;
  static constexpr MatchType EXACT =
    MatchField_MatchType_EXACT;
  static constexpr MatchType LPM =
    MatchField_MatchType_LPM;
  static constexpr MatchType TERNARY =
    MatchField_MatchType_TERNARY;
  static constexpr MatchType RANGE =
    MatchField_MatchType_RANGE;
  static constexpr MatchType OPTIONAL =
    MatchField_MatchType_OPTIONAL;
  static inline bool MatchType_IsValid(int value) {
    return MatchField_MatchType_IsValid(value);
  }
  static constexpr MatchType MatchType_MIN =
    MatchField_MatchType_MatchType_MIN;
  static constexpr MatchType MatchType_MAX =
    MatchField_MatchType_MatchType_MAX;
  static constexpr int MatchType_ARRAYSIZE =
    MatchField_MatchType_MatchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatchType_descriptor() {
    return MatchField_MatchType_descriptor();
  }
  template<typename T>
  static inline const std::string& MatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatchType_Name.");
    return MatchField_MatchType_Name(enum_t_value);
  }
  static inline bool MatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatchType* value) {
    return MatchField_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 9,
    kAnnotationLocationsFieldNumber = 10,
    kNameFieldNumber = 2,
    kDocFieldNumber = 6,
    kTypeNameFieldNumber = 8,
    kIdFieldNumber = 1,
    kBitwidthFieldNumber = 4,
    kMatchTypeFieldNumber = 5,
    kOtherMatchTypeFieldNumber = 7,
  };
  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.Documentation doc = 6;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::p4::config::v1::Documentation& doc() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Documentation* release_doc();
  ::p4::config::v1::Documentation* mutable_doc();
  void set_allocated_doc(::p4::config::v1::Documentation* doc);
  private:
  const ::p4::config::v1::Documentation& _internal_doc() const;
  ::p4::config::v1::Documentation* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::p4::config::v1::Documentation* doc);
  ::p4::config::v1::Documentation* unsafe_arena_release_doc();

  // .p4.config.v1.P4NamedType type_name = 8;
  bool has_type_name() const;
  private:
  bool _internal_has_type_name() const;
  public:
  void clear_type_name();
  const ::p4::config::v1::P4NamedType& type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_type_name();
  ::p4::config::v1::P4NamedType* mutable_type_name();
  void set_allocated_type_name(::p4::config::v1::P4NamedType* type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_type_name();
  public:
  void unsafe_arena_set_allocated_type_name(
      ::p4::config::v1::P4NamedType* type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_type_name();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 bitwidth = 4;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .p4.config.v1.MatchField.MatchType match_type = 5;
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::p4::config::v1::MatchField_MatchType match_type() const;
  void set_match_type(::p4::config::v1::MatchField_MatchType value);
  private:
  ::p4::config::v1::MatchField_MatchType _internal_match_type() const;
  void _internal_set_match_type(::p4::config::v1::MatchField_MatchType value);
  public:

  // string other_match_type = 7;
  bool has_other_match_type() const;
  private:
  bool _internal_has_other_match_type() const;
  public:
  void clear_other_match_type();
  const std::string& other_match_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_other_match_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_other_match_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_other_match_type();
  void set_allocated_other_match_type(std::string* other_match_type);
  private:
  const std::string& _internal_other_match_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_match_type(const std::string& value);
  std::string* _internal_mutable_other_match_type();
  public:

  void clear_match();
  MatchCase match_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.MatchField)
 private:
  class _Internal;
  void set_has_match_type();
  void set_has_other_match_type();

  inline bool has_match() const;
  inline void clear_has_match();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::Documentation* doc_;
  ::p4::config::v1::P4NamedType* type_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  union MatchUnion {
    constexpr MatchUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int match_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_match_type_;
  } match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit constexpr Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return new Table();
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Table& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Table_IdleTimeoutBehavior IdleTimeoutBehavior;
  static constexpr IdleTimeoutBehavior NO_TIMEOUT =
    Table_IdleTimeoutBehavior_NO_TIMEOUT;
  static constexpr IdleTimeoutBehavior NOTIFY_CONTROL =
    Table_IdleTimeoutBehavior_NOTIFY_CONTROL;
  static inline bool IdleTimeoutBehavior_IsValid(int value) {
    return Table_IdleTimeoutBehavior_IsValid(value);
  }
  static constexpr IdleTimeoutBehavior IdleTimeoutBehavior_MIN =
    Table_IdleTimeoutBehavior_IdleTimeoutBehavior_MIN;
  static constexpr IdleTimeoutBehavior IdleTimeoutBehavior_MAX =
    Table_IdleTimeoutBehavior_IdleTimeoutBehavior_MAX;
  static constexpr int IdleTimeoutBehavior_ARRAYSIZE =
    Table_IdleTimeoutBehavior_IdleTimeoutBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IdleTimeoutBehavior_descriptor() {
    return Table_IdleTimeoutBehavior_descriptor();
  }
  template<typename T>
  static inline const std::string& IdleTimeoutBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IdleTimeoutBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IdleTimeoutBehavior_Name.");
    return Table_IdleTimeoutBehavior_Name(enum_t_value);
  }
  static inline bool IdleTimeoutBehavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IdleTimeoutBehavior* value) {
    return Table_IdleTimeoutBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldsFieldNumber = 2,
    kActionRefsFieldNumber = 3,
    kDirectResourceIdsFieldNumber = 7,
    kPreambleFieldNumber = 1,
    kOtherPropertiesFieldNumber = 100,
    kConstDefaultActionIdFieldNumber = 4,
    kImplementationIdFieldNumber = 6,
    kSizeFieldNumber = 8,
    kIdleTimeoutBehaviorFieldNumber = 9,
    kIsConstTableFieldNumber = 10,
  };
  // repeated .p4.config.v1.MatchField match_fields = 2;
  int match_fields_size() const;
  private:
  int _internal_match_fields_size() const;
  public:
  void clear_match_fields();
  ::p4::config::v1::MatchField* mutable_match_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >*
      mutable_match_fields();
  private:
  const ::p4::config::v1::MatchField& _internal_match_fields(int index) const;
  ::p4::config::v1::MatchField* _internal_add_match_fields();
  public:
  const ::p4::config::v1::MatchField& match_fields(int index) const;
  ::p4::config::v1::MatchField* add_match_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >&
      match_fields() const;

  // repeated .p4.config.v1.ActionRef action_refs = 3;
  int action_refs_size() const;
  private:
  int _internal_action_refs_size() const;
  public:
  void clear_action_refs();
  ::p4::config::v1::ActionRef* mutable_action_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionRef >*
      mutable_action_refs();
  private:
  const ::p4::config::v1::ActionRef& _internal_action_refs(int index) const;
  ::p4::config::v1::ActionRef* _internal_add_action_refs();
  public:
  const ::p4::config::v1::ActionRef& action_refs(int index) const;
  ::p4::config::v1::ActionRef* add_action_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionRef >&
      action_refs() const;

  // repeated uint32 direct_resource_ids = 7;
  int direct_resource_ids_size() const;
  private:
  int _internal_direct_resource_ids_size() const;
  public:
  void clear_direct_resource_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direct_resource_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_direct_resource_ids() const;
  void _internal_add_direct_resource_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_direct_resource_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_resource_ids(int index) const;
  void set_direct_resource_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_direct_resource_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      direct_resource_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_direct_resource_ids();

  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .google.protobuf.Any other_properties = 100;
  bool has_other_properties() const;
  private:
  bool _internal_has_other_properties() const;
  public:
  void clear_other_properties();
  const ::PROTOBUF_NAMESPACE_ID::Any& other_properties() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Any* release_other_properties();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_other_properties();
  void set_allocated_other_properties(::PROTOBUF_NAMESPACE_ID::Any* other_properties);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_other_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_other_properties();
  public:
  void unsafe_arena_set_allocated_other_properties(
      ::PROTOBUF_NAMESPACE_ID::Any* other_properties);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_other_properties();

  // uint32 const_default_action_id = 4;
  void clear_const_default_action_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 const_default_action_id() const;
  void set_const_default_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_const_default_action_id() const;
  void _internal_set_const_default_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 implementation_id = 6;
  void clear_implementation_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 implementation_id() const;
  void set_implementation_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_implementation_id() const;
  void _internal_set_implementation_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .p4.config.v1.Table.IdleTimeoutBehavior idle_timeout_behavior = 9;
  void clear_idle_timeout_behavior();
  ::p4::config::v1::Table_IdleTimeoutBehavior idle_timeout_behavior() const;
  void set_idle_timeout_behavior(::p4::config::v1::Table_IdleTimeoutBehavior value);
  private:
  ::p4::config::v1::Table_IdleTimeoutBehavior _internal_idle_timeout_behavior() const;
  void _internal_set_idle_timeout_behavior(::p4::config::v1::Table_IdleTimeoutBehavior value);
  public:

  // bool is_const_table = 10;
  void clear_is_const_table();
  bool is_const_table() const;
  void set_is_const_table(bool value);
  private:
  bool _internal_is_const_table() const;
  void _internal_set_is_const_table(bool value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField > match_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionRef > action_refs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > direct_resource_ids_;
  mutable std::atomic<int> _direct_resource_ids_cached_byte_size_;
  ::p4::config::v1::Preamble* preamble_;
  ::PROTOBUF_NAMESPACE_ID::Any* other_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 const_default_action_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 implementation_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  int idle_timeout_behavior_;
  bool is_const_table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ActionRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ActionRef) */ {
 public:
  inline ActionRef() : ActionRef(nullptr) {}
  ~ActionRef() override;
  explicit constexpr ActionRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionRef(const ActionRef& from);
  ActionRef(ActionRef&& from) noexcept
    : ActionRef() {
    *this = ::std::move(from);
  }

  inline ActionRef& operator=(const ActionRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionRef& operator=(ActionRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionRef* internal_default_instance() {
    return reinterpret_cast<const ActionRef*>(
               &_ActionRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ActionRef& a, ActionRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionRef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionRef* New() const final {
    return new ActionRef();
  }

  ActionRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ActionRef";
  }
  protected:
  explicit ActionRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActionRef_Scope Scope;
  static constexpr Scope TABLE_AND_DEFAULT =
    ActionRef_Scope_TABLE_AND_DEFAULT;
  static constexpr Scope TABLE_ONLY =
    ActionRef_Scope_TABLE_ONLY;
  static constexpr Scope DEFAULT_ONLY =
    ActionRef_Scope_DEFAULT_ONLY;
  static inline bool Scope_IsValid(int value) {
    return ActionRef_Scope_IsValid(value);
  }
  static constexpr Scope Scope_MIN =
    ActionRef_Scope_Scope_MIN;
  static constexpr Scope Scope_MAX =
    ActionRef_Scope_Scope_MAX;
  static constexpr int Scope_ARRAYSIZE =
    ActionRef_Scope_Scope_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scope_descriptor() {
    return ActionRef_Scope_descriptor();
  }
  template<typename T>
  static inline const std::string& Scope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scope_Name.");
    return ActionRef_Scope_Name(enum_t_value);
  }
  static inline bool Scope_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scope* value) {
    return ActionRef_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kStructuredAnnotationsFieldNumber = 4,
    kAnnotationLocationsFieldNumber = 5,
    kIdFieldNumber = 1,
    kScopeFieldNumber = 3,
  };
  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .p4.config.v1.ActionRef.Scope scope = 3;
  void clear_scope();
  ::p4::config::v1::ActionRef_Scope scope() const;
  void set_scope(::p4::config::v1::ActionRef_Scope value);
  private:
  ::p4::config::v1::ActionRef_Scope _internal_scope() const;
  void _internal_set_scope(::p4::config::v1::ActionRef_Scope value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.ActionRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Action_Param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Action.Param) */ {
 public:
  inline Action_Param() : Action_Param(nullptr) {}
  ~Action_Param() override;
  explicit constexpr Action_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action_Param(const Action_Param& from);
  Action_Param(Action_Param&& from) noexcept
    : Action_Param() {
    *this = ::std::move(from);
  }

  inline Action_Param& operator=(const Action_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_Param& operator=(Action_Param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action_Param* internal_default_instance() {
    return reinterpret_cast<const Action_Param*>(
               &_Action_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Action_Param& a, Action_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_Param* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_Param* New() const final {
    return new Action_Param();
  }

  Action_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_Param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action_Param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action_Param& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Action.Param";
  }
  protected:
  explicit Action_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 7,
    kAnnotationLocationsFieldNumber = 8,
    kNameFieldNumber = 2,
    kDocFieldNumber = 5,
    kTypeNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kBitwidthFieldNumber = 4,
  };
  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 7;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 8;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.Documentation doc = 5;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::p4::config::v1::Documentation& doc() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Documentation* release_doc();
  ::p4::config::v1::Documentation* mutable_doc();
  void set_allocated_doc(::p4::config::v1::Documentation* doc);
  private:
  const ::p4::config::v1::Documentation& _internal_doc() const;
  ::p4::config::v1::Documentation* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::p4::config::v1::Documentation* doc);
  ::p4::config::v1::Documentation* unsafe_arena_release_doc();

  // .p4.config.v1.P4NamedType type_name = 6;
  bool has_type_name() const;
  private:
  bool _internal_has_type_name() const;
  public:
  void clear_type_name();
  const ::p4::config::v1::P4NamedType& type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_type_name();
  ::p4::config::v1::P4NamedType* mutable_type_name();
  void set_allocated_type_name(::p4::config::v1::P4NamedType* type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_type_name();
  public:
  void unsafe_arena_set_allocated_type_name(
      ::p4::config::v1::P4NamedType* type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_type_name();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 bitwidth = 4;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Action.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::Documentation* doc_;
  ::p4::config::v1::P4NamedType* type_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return new Action();
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kPreambleFieldNumber = 1,
  };
  // repeated .p4.config.v1.Action.Param params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::p4::config::v1::Action_Param* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action_Param >*
      mutable_params();
  private:
  const ::p4::config::v1::Action_Param& _internal_params(int index) const;
  ::p4::config::v1::Action_Param* _internal_add_params();
  public:
  const ::p4::config::v1::Action_Param& params(int index) const;
  ::p4::config::v1::Action_Param* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action_Param >&
      params() const;

  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // @@protoc_insertion_point(class_scope:p4.config.v1.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action_Param > params_;
  ::p4::config::v1::Preamble* preamble_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ActionProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ActionProfile) */ {
 public:
  inline ActionProfile() : ActionProfile(nullptr) {}
  ~ActionProfile() override;
  explicit constexpr ActionProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionProfile(const ActionProfile& from);
  ActionProfile(ActionProfile&& from) noexcept
    : ActionProfile() {
    *this = ::std::move(from);
  }

  inline ActionProfile& operator=(const ActionProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionProfile& operator=(ActionProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionProfile* internal_default_instance() {
    return reinterpret_cast<const ActionProfile*>(
               &_ActionProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ActionProfile& a, ActionProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionProfile* New() const final {
    return new ActionProfile();
  }

  ActionProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ActionProfile";
  }
  protected:
  explicit ActionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdsFieldNumber = 2,
    kPreambleFieldNumber = 1,
    kSizeFieldNumber = 4,
    kWithSelectorFieldNumber = 3,
    kMaxGroupSizeFieldNumber = 5,
  };
  // repeated uint32 table_ids = 2;
  int table_ids_size() const;
  private:
  int _internal_table_ids_size() const;
  public:
  void clear_table_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_table_ids() const;
  void _internal_add_table_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_table_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 table_ids(int index) const;
  void set_table_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_table_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      table_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_table_ids();

  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // int64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool with_selector = 3;
  void clear_with_selector();
  bool with_selector() const;
  void set_with_selector(bool value);
  private:
  bool _internal_with_selector() const;
  void _internal_set_with_selector(bool value);
  public:

  // int32 max_group_size = 5;
  void clear_max_group_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_group_size() const;
  void set_max_group_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_group_size() const;
  void _internal_set_max_group_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.ActionProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > table_ids_;
  mutable std::atomic<int> _table_ids_cached_byte_size_;
  ::p4::config::v1::Preamble* preamble_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  bool with_selector_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_group_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class CounterSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.CounterSpec) */ {
 public:
  inline CounterSpec() : CounterSpec(nullptr) {}
  ~CounterSpec() override;
  explicit constexpr CounterSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CounterSpec(const CounterSpec& from);
  CounterSpec(CounterSpec&& from) noexcept
    : CounterSpec() {
    *this = ::std::move(from);
  }

  inline CounterSpec& operator=(const CounterSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CounterSpec& operator=(CounterSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CounterSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const CounterSpec* internal_default_instance() {
    return reinterpret_cast<const CounterSpec*>(
               &_CounterSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CounterSpec& a, CounterSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CounterSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CounterSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CounterSpec* New() const final {
    return new CounterSpec();
  }

  CounterSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CounterSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CounterSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CounterSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CounterSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.CounterSpec";
  }
  protected:
  explicit CounterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CounterSpec_Unit Unit;
  static constexpr Unit UNSPECIFIED =
    CounterSpec_Unit_UNSPECIFIED;
  static constexpr Unit BYTES =
    CounterSpec_Unit_BYTES;
  static constexpr Unit PACKETS =
    CounterSpec_Unit_PACKETS;
  static constexpr Unit BOTH =
    CounterSpec_Unit_BOTH;
  static inline bool Unit_IsValid(int value) {
    return CounterSpec_Unit_IsValid(value);
  }
  static constexpr Unit Unit_MIN =
    CounterSpec_Unit_Unit_MIN;
  static constexpr Unit Unit_MAX =
    CounterSpec_Unit_Unit_MAX;
  static constexpr int Unit_ARRAYSIZE =
    CounterSpec_Unit_Unit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Unit_descriptor() {
    return CounterSpec_Unit_descriptor();
  }
  template<typename T>
  static inline const std::string& Unit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unit_Name.");
    return CounterSpec_Unit_Name(enum_t_value);
  }
  static inline bool Unit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unit* value) {
    return CounterSpec_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
  };
  // .p4.config.v1.CounterSpec.Unit unit = 1;
  void clear_unit();
  ::p4::config::v1::CounterSpec_Unit unit() const;
  void set_unit(::p4::config::v1::CounterSpec_Unit value);
  private:
  ::p4::config::v1::CounterSpec_Unit _internal_unit() const;
  void _internal_set_unit(::p4::config::v1::CounterSpec_Unit value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.CounterSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Counter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Counter) */ {
 public:
  inline Counter() : Counter(nullptr) {}
  ~Counter() override;
  explicit constexpr Counter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Counter(const Counter& from);
  Counter(Counter&& from) noexcept
    : Counter() {
    *this = ::std::move(from);
  }

  inline Counter& operator=(const Counter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counter& operator=(Counter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Counter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Counter* internal_default_instance() {
    return reinterpret_cast<const Counter*>(
               &_Counter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Counter& a, Counter& b) {
    a.Swap(&b);
  }
  inline void Swap(Counter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Counter* New() const final {
    return new Counter();
  }

  Counter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Counter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Counter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Counter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Counter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Counter";
  }
  protected:
  explicit Counter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kSpecFieldNumber = 2,
    kIndexTypeNameFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.CounterSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::p4::config::v1::CounterSpec& spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::CounterSpec* release_spec();
  ::p4::config::v1::CounterSpec* mutable_spec();
  void set_allocated_spec(::p4::config::v1::CounterSpec* spec);
  private:
  const ::p4::config::v1::CounterSpec& _internal_spec() const;
  ::p4::config::v1::CounterSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::p4::config::v1::CounterSpec* spec);
  ::p4::config::v1::CounterSpec* unsafe_arena_release_spec();

  // .p4.config.v1.P4NamedType index_type_name = 4;
  bool has_index_type_name() const;
  private:
  bool _internal_has_index_type_name() const;
  public:
  void clear_index_type_name();
  const ::p4::config::v1::P4NamedType& index_type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_index_type_name();
  ::p4::config::v1::P4NamedType* mutable_index_type_name();
  void set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_index_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_index_type_name();
  public:
  void unsafe_arena_set_allocated_index_type_name(
      ::p4::config::v1::P4NamedType* index_type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_index_type_name();

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Counter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::CounterSpec* spec_;
  ::p4::config::v1::P4NamedType* index_type_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class DirectCounter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.DirectCounter) */ {
 public:
  inline DirectCounter() : DirectCounter(nullptr) {}
  ~DirectCounter() override;
  explicit constexpr DirectCounter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectCounter(const DirectCounter& from);
  DirectCounter(DirectCounter&& from) noexcept
    : DirectCounter() {
    *this = ::std::move(from);
  }

  inline DirectCounter& operator=(const DirectCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectCounter& operator=(DirectCounter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectCounter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectCounter* internal_default_instance() {
    return reinterpret_cast<const DirectCounter*>(
               &_DirectCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DirectCounter& a, DirectCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectCounter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectCounter* New() const final {
    return new DirectCounter();
  }

  DirectCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectCounter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectCounter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectCounter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.DirectCounter";
  }
  protected:
  explicit DirectCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kSpecFieldNumber = 2,
    kDirectTableIdFieldNumber = 3,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.CounterSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::p4::config::v1::CounterSpec& spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::CounterSpec* release_spec();
  ::p4::config::v1::CounterSpec* mutable_spec();
  void set_allocated_spec(::p4::config::v1::CounterSpec* spec);
  private:
  const ::p4::config::v1::CounterSpec& _internal_spec() const;
  ::p4::config::v1::CounterSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::p4::config::v1::CounterSpec* spec);
  ::p4::config::v1::CounterSpec* unsafe_arena_release_spec();

  // uint32 direct_table_id = 3;
  void clear_direct_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_table_id() const;
  void set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direct_table_id() const;
  void _internal_set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.DirectCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::CounterSpec* spec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class MeterSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.MeterSpec) */ {
 public:
  inline MeterSpec() : MeterSpec(nullptr) {}
  ~MeterSpec() override;
  explicit constexpr MeterSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeterSpec(const MeterSpec& from);
  MeterSpec(MeterSpec&& from) noexcept
    : MeterSpec() {
    *this = ::std::move(from);
  }

  inline MeterSpec& operator=(const MeterSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeterSpec& operator=(MeterSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeterSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeterSpec* internal_default_instance() {
    return reinterpret_cast<const MeterSpec*>(
               &_MeterSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MeterSpec& a, MeterSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(MeterSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeterSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeterSpec* New() const final {
    return new MeterSpec();
  }

  MeterSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeterSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeterSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeterSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.MeterSpec";
  }
  protected:
  explicit MeterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MeterSpec_Unit Unit;
  static constexpr Unit UNSPECIFIED =
    MeterSpec_Unit_UNSPECIFIED;
  static constexpr Unit BYTES =
    MeterSpec_Unit_BYTES;
  static constexpr Unit PACKETS =
    MeterSpec_Unit_PACKETS;
  static inline bool Unit_IsValid(int value) {
    return MeterSpec_Unit_IsValid(value);
  }
  static constexpr Unit Unit_MIN =
    MeterSpec_Unit_Unit_MIN;
  static constexpr Unit Unit_MAX =
    MeterSpec_Unit_Unit_MAX;
  static constexpr int Unit_ARRAYSIZE =
    MeterSpec_Unit_Unit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Unit_descriptor() {
    return MeterSpec_Unit_descriptor();
  }
  template<typename T>
  static inline const std::string& Unit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unit_Name.");
    return MeterSpec_Unit_Name(enum_t_value);
  }
  static inline bool Unit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unit* value) {
    return MeterSpec_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
  };
  // .p4.config.v1.MeterSpec.Unit unit = 1;
  void clear_unit();
  ::p4::config::v1::MeterSpec_Unit unit() const;
  void set_unit(::p4::config::v1::MeterSpec_Unit value);
  private:
  ::p4::config::v1::MeterSpec_Unit _internal_unit() const;
  void _internal_set_unit(::p4::config::v1::MeterSpec_Unit value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.MeterSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Meter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Meter) */ {
 public:
  inline Meter() : Meter(nullptr) {}
  ~Meter() override;
  explicit constexpr Meter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Meter(const Meter& from);
  Meter(Meter&& from) noexcept
    : Meter() {
    *this = ::std::move(from);
  }

  inline Meter& operator=(const Meter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meter& operator=(Meter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Meter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Meter* internal_default_instance() {
    return reinterpret_cast<const Meter*>(
               &_Meter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Meter& a, Meter& b) {
    a.Swap(&b);
  }
  inline void Swap(Meter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meter* New() const final {
    return new Meter();
  }

  Meter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Meter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Meter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Meter";
  }
  protected:
  explicit Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kSpecFieldNumber = 2,
    kIndexTypeNameFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.MeterSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::p4::config::v1::MeterSpec& spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::MeterSpec* release_spec();
  ::p4::config::v1::MeterSpec* mutable_spec();
  void set_allocated_spec(::p4::config::v1::MeterSpec* spec);
  private:
  const ::p4::config::v1::MeterSpec& _internal_spec() const;
  ::p4::config::v1::MeterSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::p4::config::v1::MeterSpec* spec);
  ::p4::config::v1::MeterSpec* unsafe_arena_release_spec();

  // .p4.config.v1.P4NamedType index_type_name = 4;
  bool has_index_type_name() const;
  private:
  bool _internal_has_index_type_name() const;
  public:
  void clear_index_type_name();
  const ::p4::config::v1::P4NamedType& index_type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_index_type_name();
  ::p4::config::v1::P4NamedType* mutable_index_type_name();
  void set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_index_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_index_type_name();
  public:
  void unsafe_arena_set_allocated_index_type_name(
      ::p4::config::v1::P4NamedType* index_type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_index_type_name();

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Meter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::MeterSpec* spec_;
  ::p4::config::v1::P4NamedType* index_type_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class DirectMeter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.DirectMeter) */ {
 public:
  inline DirectMeter() : DirectMeter(nullptr) {}
  ~DirectMeter() override;
  explicit constexpr DirectMeter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectMeter(const DirectMeter& from);
  DirectMeter(DirectMeter&& from) noexcept
    : DirectMeter() {
    *this = ::std::move(from);
  }

  inline DirectMeter& operator=(const DirectMeter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectMeter& operator=(DirectMeter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectMeter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectMeter* internal_default_instance() {
    return reinterpret_cast<const DirectMeter*>(
               &_DirectMeter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DirectMeter& a, DirectMeter& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectMeter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectMeter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectMeter* New() const final {
    return new DirectMeter();
  }

  DirectMeter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectMeter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectMeter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectMeter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectMeter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.DirectMeter";
  }
  protected:
  explicit DirectMeter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kSpecFieldNumber = 2,
    kDirectTableIdFieldNumber = 3,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.MeterSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::p4::config::v1::MeterSpec& spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::MeterSpec* release_spec();
  ::p4::config::v1::MeterSpec* mutable_spec();
  void set_allocated_spec(::p4::config::v1::MeterSpec* spec);
  private:
  const ::p4::config::v1::MeterSpec& _internal_spec() const;
  ::p4::config::v1::MeterSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::p4::config::v1::MeterSpec* spec);
  ::p4::config::v1::MeterSpec* unsafe_arena_release_spec();

  // uint32 direct_table_id = 3;
  void clear_direct_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_table_id() const;
  void set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direct_table_id() const;
  void _internal_set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.DirectMeter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::MeterSpec* spec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ControllerPacketMetadata_Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ControllerPacketMetadata.Metadata) */ {
 public:
  inline ControllerPacketMetadata_Metadata() : ControllerPacketMetadata_Metadata(nullptr) {}
  ~ControllerPacketMetadata_Metadata() override;
  explicit constexpr ControllerPacketMetadata_Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPacketMetadata_Metadata(const ControllerPacketMetadata_Metadata& from);
  ControllerPacketMetadata_Metadata(ControllerPacketMetadata_Metadata&& from) noexcept
    : ControllerPacketMetadata_Metadata() {
    *this = ::std::move(from);
  }

  inline ControllerPacketMetadata_Metadata& operator=(const ControllerPacketMetadata_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPacketMetadata_Metadata& operator=(ControllerPacketMetadata_Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPacketMetadata_Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPacketMetadata_Metadata* internal_default_instance() {
    return reinterpret_cast<const ControllerPacketMetadata_Metadata*>(
               &_ControllerPacketMetadata_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ControllerPacketMetadata_Metadata& a, ControllerPacketMetadata_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPacketMetadata_Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPacketMetadata_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerPacketMetadata_Metadata* New() const final {
    return new ControllerPacketMetadata_Metadata();
  }

  ControllerPacketMetadata_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerPacketMetadata_Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPacketMetadata_Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControllerPacketMetadata_Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPacketMetadata_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ControllerPacketMetadata.Metadata";
  }
  protected:
  explicit ControllerPacketMetadata_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 6,
    kAnnotationLocationsFieldNumber = 7,
    kNameFieldNumber = 2,
    kTypeNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kBitwidthFieldNumber = 4,
  };
  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.P4NamedType type_name = 5;
  bool has_type_name() const;
  private:
  bool _internal_has_type_name() const;
  public:
  void clear_type_name();
  const ::p4::config::v1::P4NamedType& type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_type_name();
  ::p4::config::v1::P4NamedType* mutable_type_name();
  void set_allocated_type_name(::p4::config::v1::P4NamedType* type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_type_name();
  public:
  void unsafe_arena_set_allocated_type_name(
      ::p4::config::v1::P4NamedType* type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_type_name();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 bitwidth = 4;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.ControllerPacketMetadata.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::P4NamedType* type_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ControllerPacketMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ControllerPacketMetadata) */ {
 public:
  inline ControllerPacketMetadata() : ControllerPacketMetadata(nullptr) {}
  ~ControllerPacketMetadata() override;
  explicit constexpr ControllerPacketMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPacketMetadata(const ControllerPacketMetadata& from);
  ControllerPacketMetadata(ControllerPacketMetadata&& from) noexcept
    : ControllerPacketMetadata() {
    *this = ::std::move(from);
  }

  inline ControllerPacketMetadata& operator=(const ControllerPacketMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPacketMetadata& operator=(ControllerPacketMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPacketMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPacketMetadata* internal_default_instance() {
    return reinterpret_cast<const ControllerPacketMetadata*>(
               &_ControllerPacketMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ControllerPacketMetadata& a, ControllerPacketMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPacketMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPacketMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerPacketMetadata* New() const final {
    return new ControllerPacketMetadata();
  }

  ControllerPacketMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerPacketMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPacketMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControllerPacketMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPacketMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ControllerPacketMetadata";
  }
  protected:
  explicit ControllerPacketMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControllerPacketMetadata_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kPreambleFieldNumber = 1,
  };
  // repeated .p4.config.v1.ControllerPacketMetadata.Metadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::p4::config::v1::ControllerPacketMetadata_Metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata_Metadata >*
      mutable_metadata();
  private:
  const ::p4::config::v1::ControllerPacketMetadata_Metadata& _internal_metadata(int index) const;
  ::p4::config::v1::ControllerPacketMetadata_Metadata* _internal_add_metadata();
  public:
  const ::p4::config::v1::ControllerPacketMetadata_Metadata& metadata(int index) const;
  ::p4::config::v1::ControllerPacketMetadata_Metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata_Metadata >&
      metadata() const;

  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // @@protoc_insertion_point(class_scope:p4.config.v1.ControllerPacketMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata_Metadata > metadata_;
  ::p4::config::v1::Preamble* preamble_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class ValueSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ValueSet) */ {
 public:
  inline ValueSet() : ValueSet(nullptr) {}
  ~ValueSet() override;
  explicit constexpr ValueSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueSet(const ValueSet& from);
  ValueSet(ValueSet&& from) noexcept
    : ValueSet() {
    *this = ::std::move(from);
  }

  inline ValueSet& operator=(const ValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueSet& operator=(ValueSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueSet* internal_default_instance() {
    return reinterpret_cast<const ValueSet*>(
               &_ValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ValueSet& a, ValueSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueSet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueSet* New() const final {
    return new ValueSet();
  }

  ValueSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValueSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ValueSet";
  }
  protected:
  explicit ValueSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 2,
    kPreambleFieldNumber = 1,
    kSizeFieldNumber = 3,
  };
  // repeated .p4.config.v1.MatchField match = 2;
  int match_size() const;
  private:
  int _internal_match_size() const;
  public:
  void clear_match();
  ::p4::config::v1::MatchField* mutable_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >*
      mutable_match();
  private:
  const ::p4::config::v1::MatchField& _internal_match(int index) const;
  ::p4::config::v1::MatchField* _internal_add_match();
  public:
  const ::p4::config::v1::MatchField& match(int index) const;
  ::p4::config::v1::MatchField* add_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >&
      match() const;

  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // int32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.ValueSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField > match_;
  ::p4::config::v1::Preamble* preamble_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Register) */ {
 public:
  inline Register() : Register(nullptr) {}
  ~Register() override;
  explicit constexpr Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Register(const Register& from);
  Register(Register&& from) noexcept
    : Register() {
    *this = ::std::move(from);
  }

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline Register& operator=(Register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const Register* internal_default_instance() {
    return reinterpret_cast<const Register*>(
               &_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Register& a, Register& b) {
    a.Swap(&b);
  }
  inline void Swap(Register* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Register* New() const final {
    return new Register();
  }

  Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Register& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Register* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Register";
  }
  protected:
  explicit Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kTypeSpecFieldNumber = 2,
    kIndexTypeNameFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  bool has_type_spec() const;
  private:
  bool _internal_has_type_spec() const;
  public:
  void clear_type_spec();
  const ::p4::config::v1::P4DataTypeSpec& type_spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4DataTypeSpec* release_type_spec();
  ::p4::config::v1::P4DataTypeSpec* mutable_type_spec();
  void set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec);
  private:
  const ::p4::config::v1::P4DataTypeSpec& _internal_type_spec() const;
  ::p4::config::v1::P4DataTypeSpec* _internal_mutable_type_spec();
  public:
  void unsafe_arena_set_allocated_type_spec(
      ::p4::config::v1::P4DataTypeSpec* type_spec);
  ::p4::config::v1::P4DataTypeSpec* unsafe_arena_release_type_spec();

  // .p4.config.v1.P4NamedType index_type_name = 4;
  bool has_index_type_name() const;
  private:
  bool _internal_has_index_type_name() const;
  public:
  void clear_index_type_name();
  const ::p4::config::v1::P4NamedType& index_type_name() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_index_type_name();
  ::p4::config::v1::P4NamedType* mutable_index_type_name();
  void set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name);
  private:
  const ::p4::config::v1::P4NamedType& _internal_index_type_name() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_index_type_name();
  public:
  void unsafe_arena_set_allocated_index_type_name(
      ::p4::config::v1::P4NamedType* index_type_name);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_index_type_name();

  // int32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::P4DataTypeSpec* type_spec_;
  ::p4::config::v1::P4NamedType* index_type_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// -------------------------------------------------------------------

class Digest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Digest) */ {
 public:
  inline Digest() : Digest(nullptr) {}
  ~Digest() override;
  explicit constexpr Digest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Digest(const Digest& from);
  Digest(Digest&& from) noexcept
    : Digest() {
    *this = ::std::move(from);
  }

  inline Digest& operator=(const Digest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Digest& operator=(Digest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Digest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Digest* internal_default_instance() {
    return reinterpret_cast<const Digest*>(
               &_Digest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Digest& a, Digest& b) {
    a.Swap(&b);
  }
  inline void Swap(Digest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Digest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Digest* New() const final {
    return new Digest();
  }

  Digest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Digest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Digest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Digest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Digest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Digest";
  }
  protected:
  explicit Digest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreambleFieldNumber = 1,
    kTypeSpecFieldNumber = 2,
  };
  // .p4.config.v1.Preamble preamble = 1;
  bool has_preamble() const;
  private:
  bool _internal_has_preamble() const;
  public:
  void clear_preamble();
  const ::p4::config::v1::Preamble& preamble() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Preamble* release_preamble();
  ::p4::config::v1::Preamble* mutable_preamble();
  void set_allocated_preamble(::p4::config::v1::Preamble* preamble);
  private:
  const ::p4::config::v1::Preamble& _internal_preamble() const;
  ::p4::config::v1::Preamble* _internal_mutable_preamble();
  public:
  void unsafe_arena_set_allocated_preamble(
      ::p4::config::v1::Preamble* preamble);
  ::p4::config::v1::Preamble* unsafe_arena_release_preamble();

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  bool has_type_spec() const;
  private:
  bool _internal_has_type_spec() const;
  public:
  void clear_type_spec();
  const ::p4::config::v1::P4DataTypeSpec& type_spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4DataTypeSpec* release_type_spec();
  ::p4::config::v1::P4DataTypeSpec* mutable_type_spec();
  void set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec);
  private:
  const ::p4::config::v1::P4DataTypeSpec& _internal_type_spec() const;
  ::p4::config::v1::P4DataTypeSpec* _internal_mutable_type_spec();
  public:
  void unsafe_arena_set_allocated_type_spec(
      ::p4::config::v1::P4DataTypeSpec* type_spec);
  ::p4::config::v1::P4DataTypeSpec* unsafe_arena_release_type_spec();

  // @@protoc_insertion_point(class_scope:p4.config.v1.Digest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::Preamble* preamble_;
  ::p4::config::v1::P4DataTypeSpec* type_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P4Info

// .p4.config.v1.PkgInfo pkg_info = 1;
inline bool P4Info::_internal_has_pkg_info() const {
  return this != internal_default_instance() && pkg_info_ != nullptr;
}
inline bool P4Info::has_pkg_info() const {
  return _internal_has_pkg_info();
}
inline void P4Info::clear_pkg_info() {
  if (GetArenaForAllocation() == nullptr && pkg_info_ != nullptr) {
    delete pkg_info_;
  }
  pkg_info_ = nullptr;
}
inline const ::p4::config::v1::PkgInfo& P4Info::_internal_pkg_info() const {
  const ::p4::config::v1::PkgInfo* p = pkg_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::PkgInfo&>(
      ::p4::config::v1::_PkgInfo_default_instance_);
}
inline const ::p4::config::v1::PkgInfo& P4Info::pkg_info() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.pkg_info)
  return _internal_pkg_info();
}
inline void P4Info::unsafe_arena_set_allocated_pkg_info(
    ::p4::config::v1::PkgInfo* pkg_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pkg_info_);
  }
  pkg_info_ = pkg_info;
  if (pkg_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4Info.pkg_info)
}
inline ::p4::config::v1::PkgInfo* P4Info::release_pkg_info() {
  
  ::p4::config::v1::PkgInfo* temp = pkg_info_;
  pkg_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::PkgInfo* P4Info::unsafe_arena_release_pkg_info() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4Info.pkg_info)
  
  ::p4::config::v1::PkgInfo* temp = pkg_info_;
  pkg_info_ = nullptr;
  return temp;
}
inline ::p4::config::v1::PkgInfo* P4Info::_internal_mutable_pkg_info() {
  
  if (pkg_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::PkgInfo>(GetArenaForAllocation());
    pkg_info_ = p;
  }
  return pkg_info_;
}
inline ::p4::config::v1::PkgInfo* P4Info::mutable_pkg_info() {
  ::p4::config::v1::PkgInfo* _msg = _internal_mutable_pkg_info();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.pkg_info)
  return _msg;
}
inline void P4Info::set_allocated_pkg_info(::p4::config::v1::PkgInfo* pkg_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pkg_info_;
  }
  if (pkg_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::PkgInfo>::GetOwningArena(pkg_info);
    if (message_arena != submessage_arena) {
      pkg_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pkg_info, submessage_arena);
    }
    
  } else {
    
  }
  pkg_info_ = pkg_info;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4Info.pkg_info)
}

// repeated .p4.config.v1.Table tables = 2;
inline int P4Info::_internal_tables_size() const {
  return tables_.size();
}
inline int P4Info::tables_size() const {
  return _internal_tables_size();
}
inline void P4Info::clear_tables() {
  tables_.Clear();
}
inline ::p4::config::v1::Table* P4Info::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Table >*
P4Info::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.tables)
  return &tables_;
}
inline const ::p4::config::v1::Table& P4Info::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::p4::config::v1::Table& P4Info::tables(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.tables)
  return _internal_tables(index);
}
inline ::p4::config::v1::Table* P4Info::_internal_add_tables() {
  return tables_.Add();
}
inline ::p4::config::v1::Table* P4Info::add_tables() {
  ::p4::config::v1::Table* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Table >&
P4Info::tables() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.tables)
  return tables_;
}

// repeated .p4.config.v1.Action actions = 3;
inline int P4Info::_internal_actions_size() const {
  return actions_.size();
}
inline int P4Info::actions_size() const {
  return _internal_actions_size();
}
inline void P4Info::clear_actions() {
  actions_.Clear();
}
inline ::p4::config::v1::Action* P4Info::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action >*
P4Info::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.actions)
  return &actions_;
}
inline const ::p4::config::v1::Action& P4Info::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::p4::config::v1::Action& P4Info::actions(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.actions)
  return _internal_actions(index);
}
inline ::p4::config::v1::Action* P4Info::_internal_add_actions() {
  return actions_.Add();
}
inline ::p4::config::v1::Action* P4Info::add_actions() {
  ::p4::config::v1::Action* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action >&
P4Info::actions() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.actions)
  return actions_;
}

// repeated .p4.config.v1.ActionProfile action_profiles = 4;
inline int P4Info::_internal_action_profiles_size() const {
  return action_profiles_.size();
}
inline int P4Info::action_profiles_size() const {
  return _internal_action_profiles_size();
}
inline void P4Info::clear_action_profiles() {
  action_profiles_.Clear();
}
inline ::p4::config::v1::ActionProfile* P4Info::mutable_action_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.action_profiles)
  return action_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionProfile >*
P4Info::mutable_action_profiles() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.action_profiles)
  return &action_profiles_;
}
inline const ::p4::config::v1::ActionProfile& P4Info::_internal_action_profiles(int index) const {
  return action_profiles_.Get(index);
}
inline const ::p4::config::v1::ActionProfile& P4Info::action_profiles(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.action_profiles)
  return _internal_action_profiles(index);
}
inline ::p4::config::v1::ActionProfile* P4Info::_internal_add_action_profiles() {
  return action_profiles_.Add();
}
inline ::p4::config::v1::ActionProfile* P4Info::add_action_profiles() {
  ::p4::config::v1::ActionProfile* _add = _internal_add_action_profiles();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.action_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionProfile >&
P4Info::action_profiles() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.action_profiles)
  return action_profiles_;
}

// repeated .p4.config.v1.Counter counters = 5;
inline int P4Info::_internal_counters_size() const {
  return counters_.size();
}
inline int P4Info::counters_size() const {
  return _internal_counters_size();
}
inline void P4Info::clear_counters() {
  counters_.Clear();
}
inline ::p4::config::v1::Counter* P4Info::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.counters)
  return counters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Counter >*
P4Info::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.counters)
  return &counters_;
}
inline const ::p4::config::v1::Counter& P4Info::_internal_counters(int index) const {
  return counters_.Get(index);
}
inline const ::p4::config::v1::Counter& P4Info::counters(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.counters)
  return _internal_counters(index);
}
inline ::p4::config::v1::Counter* P4Info::_internal_add_counters() {
  return counters_.Add();
}
inline ::p4::config::v1::Counter* P4Info::add_counters() {
  ::p4::config::v1::Counter* _add = _internal_add_counters();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.counters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Counter >&
P4Info::counters() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.counters)
  return counters_;
}

// repeated .p4.config.v1.DirectCounter direct_counters = 6;
inline int P4Info::_internal_direct_counters_size() const {
  return direct_counters_.size();
}
inline int P4Info::direct_counters_size() const {
  return _internal_direct_counters_size();
}
inline void P4Info::clear_direct_counters() {
  direct_counters_.Clear();
}
inline ::p4::config::v1::DirectCounter* P4Info::mutable_direct_counters(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.direct_counters)
  return direct_counters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectCounter >*
P4Info::mutable_direct_counters() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.direct_counters)
  return &direct_counters_;
}
inline const ::p4::config::v1::DirectCounter& P4Info::_internal_direct_counters(int index) const {
  return direct_counters_.Get(index);
}
inline const ::p4::config::v1::DirectCounter& P4Info::direct_counters(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.direct_counters)
  return _internal_direct_counters(index);
}
inline ::p4::config::v1::DirectCounter* P4Info::_internal_add_direct_counters() {
  return direct_counters_.Add();
}
inline ::p4::config::v1::DirectCounter* P4Info::add_direct_counters() {
  ::p4::config::v1::DirectCounter* _add = _internal_add_direct_counters();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.direct_counters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectCounter >&
P4Info::direct_counters() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.direct_counters)
  return direct_counters_;
}

// repeated .p4.config.v1.Meter meters = 7;
inline int P4Info::_internal_meters_size() const {
  return meters_.size();
}
inline int P4Info::meters_size() const {
  return _internal_meters_size();
}
inline void P4Info::clear_meters() {
  meters_.Clear();
}
inline ::p4::config::v1::Meter* P4Info::mutable_meters(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.meters)
  return meters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Meter >*
P4Info::mutable_meters() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.meters)
  return &meters_;
}
inline const ::p4::config::v1::Meter& P4Info::_internal_meters(int index) const {
  return meters_.Get(index);
}
inline const ::p4::config::v1::Meter& P4Info::meters(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.meters)
  return _internal_meters(index);
}
inline ::p4::config::v1::Meter* P4Info::_internal_add_meters() {
  return meters_.Add();
}
inline ::p4::config::v1::Meter* P4Info::add_meters() {
  ::p4::config::v1::Meter* _add = _internal_add_meters();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.meters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Meter >&
P4Info::meters() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.meters)
  return meters_;
}

// repeated .p4.config.v1.DirectMeter direct_meters = 8;
inline int P4Info::_internal_direct_meters_size() const {
  return direct_meters_.size();
}
inline int P4Info::direct_meters_size() const {
  return _internal_direct_meters_size();
}
inline void P4Info::clear_direct_meters() {
  direct_meters_.Clear();
}
inline ::p4::config::v1::DirectMeter* P4Info::mutable_direct_meters(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.direct_meters)
  return direct_meters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectMeter >*
P4Info::mutable_direct_meters() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.direct_meters)
  return &direct_meters_;
}
inline const ::p4::config::v1::DirectMeter& P4Info::_internal_direct_meters(int index) const {
  return direct_meters_.Get(index);
}
inline const ::p4::config::v1::DirectMeter& P4Info::direct_meters(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.direct_meters)
  return _internal_direct_meters(index);
}
inline ::p4::config::v1::DirectMeter* P4Info::_internal_add_direct_meters() {
  return direct_meters_.Add();
}
inline ::p4::config::v1::DirectMeter* P4Info::add_direct_meters() {
  ::p4::config::v1::DirectMeter* _add = _internal_add_direct_meters();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.direct_meters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::DirectMeter >&
P4Info::direct_meters() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.direct_meters)
  return direct_meters_;
}

// repeated .p4.config.v1.ControllerPacketMetadata controller_packet_metadata = 9;
inline int P4Info::_internal_controller_packet_metadata_size() const {
  return controller_packet_metadata_.size();
}
inline int P4Info::controller_packet_metadata_size() const {
  return _internal_controller_packet_metadata_size();
}
inline void P4Info::clear_controller_packet_metadata() {
  controller_packet_metadata_.Clear();
}
inline ::p4::config::v1::ControllerPacketMetadata* P4Info::mutable_controller_packet_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.controller_packet_metadata)
  return controller_packet_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata >*
P4Info::mutable_controller_packet_metadata() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.controller_packet_metadata)
  return &controller_packet_metadata_;
}
inline const ::p4::config::v1::ControllerPacketMetadata& P4Info::_internal_controller_packet_metadata(int index) const {
  return controller_packet_metadata_.Get(index);
}
inline const ::p4::config::v1::ControllerPacketMetadata& P4Info::controller_packet_metadata(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.controller_packet_metadata)
  return _internal_controller_packet_metadata(index);
}
inline ::p4::config::v1::ControllerPacketMetadata* P4Info::_internal_add_controller_packet_metadata() {
  return controller_packet_metadata_.Add();
}
inline ::p4::config::v1::ControllerPacketMetadata* P4Info::add_controller_packet_metadata() {
  ::p4::config::v1::ControllerPacketMetadata* _add = _internal_add_controller_packet_metadata();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.controller_packet_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata >&
P4Info::controller_packet_metadata() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.controller_packet_metadata)
  return controller_packet_metadata_;
}

// repeated .p4.config.v1.ValueSet value_sets = 10;
inline int P4Info::_internal_value_sets_size() const {
  return value_sets_.size();
}
inline int P4Info::value_sets_size() const {
  return _internal_value_sets_size();
}
inline void P4Info::clear_value_sets() {
  value_sets_.Clear();
}
inline ::p4::config::v1::ValueSet* P4Info::mutable_value_sets(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.value_sets)
  return value_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ValueSet >*
P4Info::mutable_value_sets() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.value_sets)
  return &value_sets_;
}
inline const ::p4::config::v1::ValueSet& P4Info::_internal_value_sets(int index) const {
  return value_sets_.Get(index);
}
inline const ::p4::config::v1::ValueSet& P4Info::value_sets(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.value_sets)
  return _internal_value_sets(index);
}
inline ::p4::config::v1::ValueSet* P4Info::_internal_add_value_sets() {
  return value_sets_.Add();
}
inline ::p4::config::v1::ValueSet* P4Info::add_value_sets() {
  ::p4::config::v1::ValueSet* _add = _internal_add_value_sets();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.value_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ValueSet >&
P4Info::value_sets() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.value_sets)
  return value_sets_;
}

// repeated .p4.config.v1.Register registers = 11;
inline int P4Info::_internal_registers_size() const {
  return registers_.size();
}
inline int P4Info::registers_size() const {
  return _internal_registers_size();
}
inline void P4Info::clear_registers() {
  registers_.Clear();
}
inline ::p4::config::v1::Register* P4Info::mutable_registers(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.registers)
  return registers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Register >*
P4Info::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.registers)
  return &registers_;
}
inline const ::p4::config::v1::Register& P4Info::_internal_registers(int index) const {
  return registers_.Get(index);
}
inline const ::p4::config::v1::Register& P4Info::registers(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.registers)
  return _internal_registers(index);
}
inline ::p4::config::v1::Register* P4Info::_internal_add_registers() {
  return registers_.Add();
}
inline ::p4::config::v1::Register* P4Info::add_registers() {
  ::p4::config::v1::Register* _add = _internal_add_registers();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.registers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Register >&
P4Info::registers() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.registers)
  return registers_;
}

// repeated .p4.config.v1.Digest digests = 12;
inline int P4Info::_internal_digests_size() const {
  return digests_.size();
}
inline int P4Info::digests_size() const {
  return _internal_digests_size();
}
inline void P4Info::clear_digests() {
  digests_.Clear();
}
inline ::p4::config::v1::Digest* P4Info::mutable_digests(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.digests)
  return digests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Digest >*
P4Info::mutable_digests() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.digests)
  return &digests_;
}
inline const ::p4::config::v1::Digest& P4Info::_internal_digests(int index) const {
  return digests_.Get(index);
}
inline const ::p4::config::v1::Digest& P4Info::digests(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.digests)
  return _internal_digests(index);
}
inline ::p4::config::v1::Digest* P4Info::_internal_add_digests() {
  return digests_.Add();
}
inline ::p4::config::v1::Digest* P4Info::add_digests() {
  ::p4::config::v1::Digest* _add = _internal_add_digests();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.digests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Digest >&
P4Info::digests() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.digests)
  return digests_;
}

// repeated .p4.config.v1.Extern externs = 100;
inline int P4Info::_internal_externs_size() const {
  return externs_.size();
}
inline int P4Info::externs_size() const {
  return _internal_externs_size();
}
inline void P4Info::clear_externs() {
  externs_.Clear();
}
inline ::p4::config::v1::Extern* P4Info::mutable_externs(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.externs)
  return externs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Extern >*
P4Info::mutable_externs() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4Info.externs)
  return &externs_;
}
inline const ::p4::config::v1::Extern& P4Info::_internal_externs(int index) const {
  return externs_.Get(index);
}
inline const ::p4::config::v1::Extern& P4Info::externs(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.externs)
  return _internal_externs(index);
}
inline ::p4::config::v1::Extern* P4Info::_internal_add_externs() {
  return externs_.Add();
}
inline ::p4::config::v1::Extern* P4Info::add_externs() {
  ::p4::config::v1::Extern* _add = _internal_add_externs();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4Info.externs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Extern >&
P4Info::externs() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4Info.externs)
  return externs_;
}

// .p4.config.v1.P4TypeInfo type_info = 200;
inline bool P4Info::_internal_has_type_info() const {
  return this != internal_default_instance() && type_info_ != nullptr;
}
inline bool P4Info::has_type_info() const {
  return _internal_has_type_info();
}
inline const ::p4::config::v1::P4TypeInfo& P4Info::_internal_type_info() const {
  const ::p4::config::v1::P4TypeInfo* p = type_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4TypeInfo&>(
      ::p4::config::v1::_P4TypeInfo_default_instance_);
}
inline const ::p4::config::v1::P4TypeInfo& P4Info::type_info() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4Info.type_info)
  return _internal_type_info();
}
inline void P4Info::unsafe_arena_set_allocated_type_info(
    ::p4::config::v1::P4TypeInfo* type_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_info_);
  }
  type_info_ = type_info;
  if (type_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4Info.type_info)
}
inline ::p4::config::v1::P4TypeInfo* P4Info::release_type_info() {
  
  ::p4::config::v1::P4TypeInfo* temp = type_info_;
  type_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4TypeInfo* P4Info::unsafe_arena_release_type_info() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4Info.type_info)
  
  ::p4::config::v1::P4TypeInfo* temp = type_info_;
  type_info_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4TypeInfo* P4Info::_internal_mutable_type_info() {
  
  if (type_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4TypeInfo>(GetArenaForAllocation());
    type_info_ = p;
  }
  return type_info_;
}
inline ::p4::config::v1::P4TypeInfo* P4Info::mutable_type_info() {
  ::p4::config::v1::P4TypeInfo* _msg = _internal_mutable_type_info();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4Info.type_info)
  return _msg;
}
inline void P4Info::set_allocated_type_info(::p4::config::v1::P4TypeInfo* type_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_info_);
  }
  if (type_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_info));
    if (message_arena != submessage_arena) {
      type_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_info, submessage_arena);
    }
    
  } else {
    
  }
  type_info_ = type_info;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4Info.type_info)
}

// -------------------------------------------------------------------

// Documentation

// string brief = 1;
inline void Documentation::clear_brief() {
  brief_.ClearToEmpty();
}
inline const std::string& Documentation::brief() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Documentation.brief)
  return _internal_brief();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_brief(ArgT0&& arg0, ArgT... args) {
 
 brief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Documentation.brief)
}
inline std::string* Documentation::mutable_brief() {
  std::string* _s = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Documentation.brief)
  return _s;
}
inline const std::string& Documentation::_internal_brief() const {
  return brief_.Get();
}
inline void Documentation::_internal_set_brief(const std::string& value) {
  
  brief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_brief() {
  
  return brief_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Documentation::release_brief() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Documentation.brief)
  return brief_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Documentation::set_allocated_brief(std::string* brief) {
  if (brief != nullptr) {
    
  } else {
    
  }
  brief_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brief,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Documentation.brief)
}

// string description = 2;
inline void Documentation::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Documentation::description() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Documentation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Documentation::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Documentation.description)
}
inline std::string* Documentation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Documentation.description)
  return _s;
}
inline const std::string& Documentation::_internal_description() const {
  return description_.Get();
}
inline void Documentation::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Documentation::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Documentation::release_description() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Documentation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Documentation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Documentation.description)
}

// -------------------------------------------------------------------

// PkgInfo

// string name = 1;
inline void PkgInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PkgInfo::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.name)
}
inline std::string* PkgInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.name)
  return _s;
}
inline const std::string& PkgInfo::_internal_name() const {
  return name_.Get();
}
inline void PkgInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.name)
}

// string version = 2;
inline void PkgInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PkgInfo::version() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.version)
}
inline std::string* PkgInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.version)
  return _s;
}
inline const std::string& PkgInfo::_internal_version() const {
  return version_.Get();
}
inline void PkgInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_version() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.version)
}

// .p4.config.v1.Documentation doc = 3;
inline bool PkgInfo::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool PkgInfo::has_doc() const {
  return _internal_has_doc();
}
inline void PkgInfo::clear_doc() {
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::p4::config::v1::Documentation& PkgInfo::_internal_doc() const {
  const ::p4::config::v1::Documentation* p = doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Documentation&>(
      ::p4::config::v1::_Documentation_default_instance_);
}
inline const ::p4::config::v1::Documentation& PkgInfo::doc() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.doc)
  return _internal_doc();
}
inline void PkgInfo::unsafe_arena_set_allocated_doc(
    ::p4::config::v1::Documentation* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.PkgInfo.doc)
}
inline ::p4::config::v1::Documentation* PkgInfo::release_doc() {
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Documentation* PkgInfo::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.doc)
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Documentation* PkgInfo::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Documentation>(GetArenaForAllocation());
    doc_ = p;
  }
  return doc_;
}
inline ::p4::config::v1::Documentation* PkgInfo::mutable_doc() {
  ::p4::config::v1::Documentation* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.doc)
  return _msg;
}
inline void PkgInfo::set_allocated_doc(::p4::config::v1::Documentation* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Documentation>::GetOwningArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.doc)
}

// repeated string annotations = 4;
inline int PkgInfo::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PkgInfo::annotations_size() const {
  return _internal_annotations_size();
}
inline void PkgInfo::clear_annotations() {
  annotations_.Clear();
}
inline std::string* PkgInfo::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.PkgInfo.annotations)
  return _s;
}
inline const std::string& PkgInfo::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& PkgInfo::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.annotations)
  return _internal_annotations(index);
}
inline std::string* PkgInfo::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.annotations)
  return annotations_.Mutable(index);
}
inline void PkgInfo::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.PkgInfo.annotations)
}
inline std::string* PkgInfo::_internal_add_annotations() {
  return annotations_.Add();
}
inline void PkgInfo::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.PkgInfo.annotations)
}
inline void PkgInfo::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.PkgInfo.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PkgInfo::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.PkgInfo.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PkgInfo::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.PkgInfo.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 10;
inline int PkgInfo::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int PkgInfo::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* PkgInfo::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
PkgInfo::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.PkgInfo.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& PkgInfo::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& PkgInfo::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* PkgInfo::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* PkgInfo::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.PkgInfo.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
PkgInfo::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.PkgInfo.annotation_locations)
  return annotation_locations_;
}

// string arch = 5;
inline void PkgInfo::clear_arch() {
  arch_.ClearToEmpty();
}
inline const std::string& PkgInfo::arch() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.arch)
  return _internal_arch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_arch(ArgT0&& arg0, ArgT... args) {
 
 arch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.arch)
}
inline std::string* PkgInfo::mutable_arch() {
  std::string* _s = _internal_mutable_arch();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.arch)
  return _s;
}
inline const std::string& PkgInfo::_internal_arch() const {
  return arch_.Get();
}
inline void PkgInfo::_internal_set_arch(const std::string& value) {
  
  arch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_arch() {
  
  return arch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_arch() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.arch)
  return arch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_arch(std::string* arch) {
  if (arch != nullptr) {
    
  } else {
    
  }
  arch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arch,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.arch)
}

// string organization = 6;
inline void PkgInfo::clear_organization() {
  organization_.ClearToEmpty();
}
inline const std::string& PkgInfo::organization() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.organization)
  return _internal_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_organization(ArgT0&& arg0, ArgT... args) {
 
 organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.organization)
}
inline std::string* PkgInfo::mutable_organization() {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.organization)
  return _s;
}
inline const std::string& PkgInfo::_internal_organization() const {
  return organization_.Get();
}
inline void PkgInfo::_internal_set_organization(const std::string& value) {
  
  organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_organization() {
  
  return organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_organization() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.organization)
  return organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.organization)
}

// string contact = 7;
inline void PkgInfo::clear_contact() {
  contact_.ClearToEmpty();
}
inline const std::string& PkgInfo::contact() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.contact)
  return _internal_contact();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_contact(ArgT0&& arg0, ArgT... args) {
 
 contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.contact)
}
inline std::string* PkgInfo::mutable_contact() {
  std::string* _s = _internal_mutable_contact();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.contact)
  return _s;
}
inline const std::string& PkgInfo::_internal_contact() const {
  return contact_.Get();
}
inline void PkgInfo::_internal_set_contact(const std::string& value) {
  
  contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_contact() {
  
  return contact_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_contact() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.contact)
  return contact_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_contact(std::string* contact) {
  if (contact != nullptr) {
    
  } else {
    
  }
  contact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.contact)
}

// string url = 8;
inline void PkgInfo::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& PkgInfo::url() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgInfo::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.PkgInfo.url)
}
inline std::string* PkgInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.url)
  return _s;
}
inline const std::string& PkgInfo::_internal_url() const {
  return url_.Get();
}
inline void PkgInfo::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkgInfo::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkgInfo::release_url() {
  // @@protoc_insertion_point(field_release:p4.config.v1.PkgInfo.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkgInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.PkgInfo.url)
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
inline int PkgInfo::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int PkgInfo::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* PkgInfo::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.PkgInfo.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
PkgInfo::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.PkgInfo.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& PkgInfo::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& PkgInfo::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.PkgInfo.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* PkgInfo::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* PkgInfo::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.PkgInfo.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
PkgInfo::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.PkgInfo.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4Ids

// -------------------------------------------------------------------

// Preamble

// uint32 id = 1;
inline void Preamble::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Preamble::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Preamble::id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.id)
  return _internal_id();
}
inline void Preamble::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Preamble::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Preamble.id)
}

// string name = 2;
inline void Preamble::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Preamble::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Preamble::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Preamble.name)
}
inline std::string* Preamble::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.name)
  return _s;
}
inline const std::string& Preamble::_internal_name() const {
  return name_.Get();
}
inline void Preamble::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Preamble::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Preamble::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Preamble.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Preamble::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Preamble.name)
}

// string alias = 3;
inline void Preamble::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& Preamble::alias() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Preamble::set_alias(ArgT0&& arg0, ArgT... args) {
 
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Preamble.alias)
}
inline std::string* Preamble::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.alias)
  return _s;
}
inline const std::string& Preamble::_internal_alias() const {
  return alias_.Get();
}
inline void Preamble::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Preamble::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Preamble::release_alias() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Preamble.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Preamble::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Preamble.alias)
}

// repeated string annotations = 4;
inline int Preamble::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Preamble::annotations_size() const {
  return _internal_annotations_size();
}
inline void Preamble::clear_annotations() {
  annotations_.Clear();
}
inline std::string* Preamble::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.Preamble.annotations)
  return _s;
}
inline const std::string& Preamble::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& Preamble::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.annotations)
  return _internal_annotations(index);
}
inline std::string* Preamble::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.annotations)
  return annotations_.Mutable(index);
}
inline void Preamble::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Preamble.annotations)
}
inline void Preamble::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.Preamble.annotations)
}
inline void Preamble::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.Preamble.annotations)
}
inline void Preamble::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.Preamble.annotations)
}
inline std::string* Preamble::_internal_add_annotations() {
  return annotations_.Add();
}
inline void Preamble::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.Preamble.annotations)
}
inline void Preamble::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.Preamble.annotations)
}
inline void Preamble::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.Preamble.annotations)
}
inline void Preamble::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.Preamble.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Preamble::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Preamble.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Preamble::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Preamble.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 7;
inline int Preamble::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int Preamble::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* Preamble::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
Preamble::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Preamble.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& Preamble::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& Preamble::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* Preamble::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* Preamble::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.Preamble.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
Preamble::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Preamble.annotation_locations)
  return annotation_locations_;
}

// .p4.config.v1.Documentation doc = 5;
inline bool Preamble::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool Preamble::has_doc() const {
  return _internal_has_doc();
}
inline void Preamble::clear_doc() {
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::p4::config::v1::Documentation& Preamble::_internal_doc() const {
  const ::p4::config::v1::Documentation* p = doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Documentation&>(
      ::p4::config::v1::_Documentation_default_instance_);
}
inline const ::p4::config::v1::Documentation& Preamble::doc() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.doc)
  return _internal_doc();
}
inline void Preamble::unsafe_arena_set_allocated_doc(
    ::p4::config::v1::Documentation* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Preamble.doc)
}
inline ::p4::config::v1::Documentation* Preamble::release_doc() {
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Documentation* Preamble::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Preamble.doc)
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Documentation* Preamble::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Documentation>(GetArenaForAllocation());
    doc_ = p;
  }
  return doc_;
}
inline ::p4::config::v1::Documentation* Preamble::mutable_doc() {
  ::p4::config::v1::Documentation* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.doc)
  return _msg;
}
inline void Preamble::set_allocated_doc(::p4::config::v1::Documentation* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Documentation>::GetOwningArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Preamble.doc)
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
inline int Preamble::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int Preamble::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* Preamble::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Preamble.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
Preamble::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Preamble.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& Preamble::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& Preamble::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Preamble.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* Preamble::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* Preamble::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.Preamble.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
Preamble::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Preamble.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// Extern

// uint32 extern_type_id = 1;
inline void Extern::clear_extern_type_id() {
  extern_type_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extern::_internal_extern_type_id() const {
  return extern_type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extern::extern_type_id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Extern.extern_type_id)
  return _internal_extern_type_id();
}
inline void Extern::_internal_set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extern_type_id_ = value;
}
inline void Extern::set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extern_type_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Extern.extern_type_id)
}

// string extern_type_name = 2;
inline void Extern::clear_extern_type_name() {
  extern_type_name_.ClearToEmpty();
}
inline const std::string& Extern::extern_type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Extern.extern_type_name)
  return _internal_extern_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Extern::set_extern_type_name(ArgT0&& arg0, ArgT... args) {
 
 extern_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Extern.extern_type_name)
}
inline std::string* Extern::mutable_extern_type_name() {
  std::string* _s = _internal_mutable_extern_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Extern.extern_type_name)
  return _s;
}
inline const std::string& Extern::_internal_extern_type_name() const {
  return extern_type_name_.Get();
}
inline void Extern::_internal_set_extern_type_name(const std::string& value) {
  
  extern_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Extern::_internal_mutable_extern_type_name() {
  
  return extern_type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Extern::release_extern_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Extern.extern_type_name)
  return extern_type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Extern::set_allocated_extern_type_name(std::string* extern_type_name) {
  if (extern_type_name != nullptr) {
    
  } else {
    
  }
  extern_type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extern_type_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Extern.extern_type_name)
}

// repeated .p4.config.v1.ExternInstance instances = 3;
inline int Extern::_internal_instances_size() const {
  return instances_.size();
}
inline int Extern::instances_size() const {
  return _internal_instances_size();
}
inline void Extern::clear_instances() {
  instances_.Clear();
}
inline ::p4::config::v1::ExternInstance* Extern::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Extern.instances)
  return instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ExternInstance >*
Extern::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Extern.instances)
  return &instances_;
}
inline const ::p4::config::v1::ExternInstance& Extern::_internal_instances(int index) const {
  return instances_.Get(index);
}
inline const ::p4::config::v1::ExternInstance& Extern::instances(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Extern.instances)
  return _internal_instances(index);
}
inline ::p4::config::v1::ExternInstance* Extern::_internal_add_instances() {
  return instances_.Add();
}
inline ::p4::config::v1::ExternInstance* Extern::add_instances() {
  ::p4::config::v1::ExternInstance* _add = _internal_add_instances();
  // @@protoc_insertion_point(field_add:p4.config.v1.Extern.instances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ExternInstance >&
Extern::instances() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Extern.instances)
  return instances_;
}

// -------------------------------------------------------------------

// ExternInstance

// .p4.config.v1.Preamble preamble = 1;
inline bool ExternInstance::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool ExternInstance::has_preamble() const {
  return _internal_has_preamble();
}
inline void ExternInstance::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& ExternInstance::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& ExternInstance::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ExternInstance.preamble)
  return _internal_preamble();
}
inline void ExternInstance::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ExternInstance.preamble)
}
inline ::p4::config::v1::Preamble* ExternInstance::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* ExternInstance::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ExternInstance.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* ExternInstance::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* ExternInstance::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ExternInstance.preamble)
  return _msg;
}
inline void ExternInstance::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ExternInstance.preamble)
}

// .google.protobuf.Any info = 2;
inline bool ExternInstance::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ExternInstance::has_info() const {
  return _internal_has_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExternInstance::_internal_info() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExternInstance::info() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ExternInstance.info)
  return _internal_info();
}
inline void ExternInstance::unsafe_arena_set_allocated_info(
    ::PROTOBUF_NAMESPACE_ID::Any* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ExternInstance.info)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExternInstance::release_info() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExternInstance::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ExternInstance.info)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExternInstance::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExternInstance::mutable_info() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ExternInstance.info)
  return _msg;
}
inline void ExternInstance::set_allocated_info(::PROTOBUF_NAMESPACE_ID::Any* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ExternInstance.info)
}

// -------------------------------------------------------------------

// MatchField

// uint32 id = 1;
inline void MatchField::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchField::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchField::id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.id)
  return _internal_id();
}
inline void MatchField::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MatchField::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.id)
}

// string name = 2;
inline void MatchField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MatchField::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchField::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.name)
}
inline std::string* MatchField::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.name)
  return _s;
}
inline const std::string& MatchField::_internal_name() const {
  return name_.Get();
}
inline void MatchField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchField::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.MatchField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.MatchField.name)
}

// repeated string annotations = 3;
inline int MatchField::_internal_annotations_size() const {
  return annotations_.size();
}
inline int MatchField::annotations_size() const {
  return _internal_annotations_size();
}
inline void MatchField::clear_annotations() {
  annotations_.Clear();
}
inline std::string* MatchField::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.MatchField.annotations)
  return _s;
}
inline const std::string& MatchField::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& MatchField::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.annotations)
  return _internal_annotations(index);
}
inline std::string* MatchField::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.annotations)
  return annotations_.Mutable(index);
}
inline void MatchField::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.annotations)
}
inline void MatchField::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.annotations)
}
inline void MatchField::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.MatchField.annotations)
}
inline void MatchField::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.MatchField.annotations)
}
inline std::string* MatchField::_internal_add_annotations() {
  return annotations_.Add();
}
inline void MatchField::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.MatchField.annotations)
}
inline void MatchField::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.MatchField.annotations)
}
inline void MatchField::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.MatchField.annotations)
}
inline void MatchField::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.MatchField.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MatchField::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.MatchField.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MatchField::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.MatchField.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 10;
inline int MatchField::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int MatchField::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* MatchField::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
MatchField::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.MatchField.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& MatchField::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& MatchField::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* MatchField::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* MatchField::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.MatchField.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
MatchField::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.MatchField.annotation_locations)
  return annotation_locations_;
}

// int32 bitwidth = 4;
inline void MatchField::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchField::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchField::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.bitwidth)
  return _internal_bitwidth();
}
inline void MatchField::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void MatchField::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.bitwidth)
}

// .p4.config.v1.MatchField.MatchType match_type = 5;
inline bool MatchField::_internal_has_match_type() const {
  return match_case() == kMatchType;
}
inline bool MatchField::has_match_type() const {
  return _internal_has_match_type();
}
inline void MatchField::set_has_match_type() {
  _oneof_case_[0] = kMatchType;
}
inline void MatchField::clear_match_type() {
  if (_internal_has_match_type()) {
    match_.match_type_ = 0;
    clear_has_match();
  }
}
inline ::p4::config::v1::MatchField_MatchType MatchField::_internal_match_type() const {
  if (_internal_has_match_type()) {
    return static_cast< ::p4::config::v1::MatchField_MatchType >(match_.match_type_);
  }
  return static_cast< ::p4::config::v1::MatchField_MatchType >(0);
}
inline ::p4::config::v1::MatchField_MatchType MatchField::match_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.match_type)
  return _internal_match_type();
}
inline void MatchField::_internal_set_match_type(::p4::config::v1::MatchField_MatchType value) {
  if (!_internal_has_match_type()) {
    clear_match();
    set_has_match_type();
  }
  match_.match_type_ = value;
}
inline void MatchField::set_match_type(::p4::config::v1::MatchField_MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.match_type)
}

// string other_match_type = 7;
inline bool MatchField::_internal_has_other_match_type() const {
  return match_case() == kOtherMatchType;
}
inline bool MatchField::has_other_match_type() const {
  return _internal_has_other_match_type();
}
inline void MatchField::set_has_other_match_type() {
  _oneof_case_[0] = kOtherMatchType;
}
inline void MatchField::clear_other_match_type() {
  if (_internal_has_other_match_type()) {
    match_.other_match_type_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_match();
  }
}
inline const std::string& MatchField::other_match_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.other_match_type)
  return _internal_other_match_type();
}
template <typename ArgT0, typename... ArgT>
inline void MatchField::set_other_match_type(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_other_match_type()) {
    clear_match();
    set_has_other_match_type();
    match_.other_match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.other_match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.MatchField.other_match_type)
}
inline std::string* MatchField::mutable_other_match_type() {
  std::string* _s = _internal_mutable_other_match_type();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.other_match_type)
  return _s;
}
inline const std::string& MatchField::_internal_other_match_type() const {
  if (_internal_has_other_match_type()) {
    return match_.other_match_type_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MatchField::_internal_set_other_match_type(const std::string& value) {
  if (!_internal_has_other_match_type()) {
    clear_match();
    set_has_other_match_type();
    match_.other_match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  match_.other_match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchField::_internal_mutable_other_match_type() {
  if (!_internal_has_other_match_type()) {
    clear_match();
    set_has_other_match_type();
    match_.other_match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return match_.other_match_type_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchField::release_other_match_type() {
  // @@protoc_insertion_point(field_release:p4.config.v1.MatchField.other_match_type)
  if (_internal_has_other_match_type()) {
    clear_has_match();
    return match_.other_match_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void MatchField::set_allocated_other_match_type(std::string* other_match_type) {
  if (has_match()) {
    clear_match();
  }
  if (other_match_type != nullptr) {
    set_has_other_match_type();
    match_.other_match_type_.UnsafeSetDefault(other_match_type);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(other_match_type);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.MatchField.other_match_type)
}

// .p4.config.v1.Documentation doc = 6;
inline bool MatchField::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool MatchField::has_doc() const {
  return _internal_has_doc();
}
inline void MatchField::clear_doc() {
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::p4::config::v1::Documentation& MatchField::_internal_doc() const {
  const ::p4::config::v1::Documentation* p = doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Documentation&>(
      ::p4::config::v1::_Documentation_default_instance_);
}
inline const ::p4::config::v1::Documentation& MatchField::doc() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.doc)
  return _internal_doc();
}
inline void MatchField::unsafe_arena_set_allocated_doc(
    ::p4::config::v1::Documentation* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.MatchField.doc)
}
inline ::p4::config::v1::Documentation* MatchField::release_doc() {
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Documentation* MatchField::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:p4.config.v1.MatchField.doc)
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Documentation* MatchField::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Documentation>(GetArenaForAllocation());
    doc_ = p;
  }
  return doc_;
}
inline ::p4::config::v1::Documentation* MatchField::mutable_doc() {
  ::p4::config::v1::Documentation* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.doc)
  return _msg;
}
inline void MatchField::set_allocated_doc(::p4::config::v1::Documentation* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Documentation>::GetOwningArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.MatchField.doc)
}

// .p4.config.v1.P4NamedType type_name = 8;
inline bool MatchField::_internal_has_type_name() const {
  return this != internal_default_instance() && type_name_ != nullptr;
}
inline bool MatchField::has_type_name() const {
  return _internal_has_type_name();
}
inline const ::p4::config::v1::P4NamedType& MatchField::_internal_type_name() const {
  const ::p4::config::v1::P4NamedType* p = type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& MatchField::type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.type_name)
  return _internal_type_name();
}
inline void MatchField::unsafe_arena_set_allocated_type_name(
    ::p4::config::v1::P4NamedType* type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  type_name_ = type_name;
  if (type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.MatchField.type_name)
}
inline ::p4::config::v1::P4NamedType* MatchField::release_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* MatchField::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.MatchField.type_name)
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* MatchField::_internal_mutable_type_name() {
  
  if (type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    type_name_ = p;
  }
  return type_name_;
}
inline ::p4::config::v1::P4NamedType* MatchField::mutable_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.type_name)
  return _msg;
}
inline void MatchField::set_allocated_type_name(::p4::config::v1::P4NamedType* type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  if (type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name));
    if (message_arena != submessage_arena) {
      type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_name, submessage_arena);
    }
    
  } else {
    
  }
  type_name_ = type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.MatchField.type_name)
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
inline int MatchField::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int MatchField::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* MatchField::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.MatchField.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
MatchField::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.MatchField.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& MatchField::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& MatchField::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MatchField.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* MatchField::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* MatchField::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.MatchField.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
MatchField::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.MatchField.structured_annotations)
  return structured_annotations_;
}

inline bool MatchField::has_match() const {
  return match_case() != MATCH_NOT_SET;
}
inline void MatchField::clear_has_match() {
  _oneof_case_[0] = MATCH_NOT_SET;
}
inline MatchField::MatchCase MatchField::match_case() const {
  return MatchField::MatchCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Table

// .p4.config.v1.Preamble preamble = 1;
inline bool Table::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Table::has_preamble() const {
  return _internal_has_preamble();
}
inline void Table::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Table::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Table::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.preamble)
  return _internal_preamble();
}
inline void Table::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Table.preamble)
}
inline ::p4::config::v1::Preamble* Table::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Table::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Table.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Table::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Table::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Table.preamble)
  return _msg;
}
inline void Table::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Table.preamble)
}

// repeated .p4.config.v1.MatchField match_fields = 2;
inline int Table::_internal_match_fields_size() const {
  return match_fields_.size();
}
inline int Table::match_fields_size() const {
  return _internal_match_fields_size();
}
inline void Table::clear_match_fields() {
  match_fields_.Clear();
}
inline ::p4::config::v1::MatchField* Table::mutable_match_fields(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Table.match_fields)
  return match_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >*
Table::mutable_match_fields() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Table.match_fields)
  return &match_fields_;
}
inline const ::p4::config::v1::MatchField& Table::_internal_match_fields(int index) const {
  return match_fields_.Get(index);
}
inline const ::p4::config::v1::MatchField& Table::match_fields(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.match_fields)
  return _internal_match_fields(index);
}
inline ::p4::config::v1::MatchField* Table::_internal_add_match_fields() {
  return match_fields_.Add();
}
inline ::p4::config::v1::MatchField* Table::add_match_fields() {
  ::p4::config::v1::MatchField* _add = _internal_add_match_fields();
  // @@protoc_insertion_point(field_add:p4.config.v1.Table.match_fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >&
Table::match_fields() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Table.match_fields)
  return match_fields_;
}

// repeated .p4.config.v1.ActionRef action_refs = 3;
inline int Table::_internal_action_refs_size() const {
  return action_refs_.size();
}
inline int Table::action_refs_size() const {
  return _internal_action_refs_size();
}
inline void Table::clear_action_refs() {
  action_refs_.Clear();
}
inline ::p4::config::v1::ActionRef* Table::mutable_action_refs(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Table.action_refs)
  return action_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionRef >*
Table::mutable_action_refs() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Table.action_refs)
  return &action_refs_;
}
inline const ::p4::config::v1::ActionRef& Table::_internal_action_refs(int index) const {
  return action_refs_.Get(index);
}
inline const ::p4::config::v1::ActionRef& Table::action_refs(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.action_refs)
  return _internal_action_refs(index);
}
inline ::p4::config::v1::ActionRef* Table::_internal_add_action_refs() {
  return action_refs_.Add();
}
inline ::p4::config::v1::ActionRef* Table::add_action_refs() {
  ::p4::config::v1::ActionRef* _add = _internal_add_action_refs();
  // @@protoc_insertion_point(field_add:p4.config.v1.Table.action_refs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ActionRef >&
Table::action_refs() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Table.action_refs)
  return action_refs_;
}

// uint32 const_default_action_id = 4;
inline void Table::clear_const_default_action_id() {
  const_default_action_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::_internal_const_default_action_id() const {
  return const_default_action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::const_default_action_id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.const_default_action_id)
  return _internal_const_default_action_id();
}
inline void Table::_internal_set_const_default_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  const_default_action_id_ = value;
}
inline void Table::set_const_default_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_const_default_action_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.const_default_action_id)
}

// uint32 implementation_id = 6;
inline void Table::clear_implementation_id() {
  implementation_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::_internal_implementation_id() const {
  return implementation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::implementation_id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.implementation_id)
  return _internal_implementation_id();
}
inline void Table::_internal_set_implementation_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  implementation_id_ = value;
}
inline void Table::set_implementation_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_implementation_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.implementation_id)
}

// repeated uint32 direct_resource_ids = 7;
inline int Table::_internal_direct_resource_ids_size() const {
  return direct_resource_ids_.size();
}
inline int Table::direct_resource_ids_size() const {
  return _internal_direct_resource_ids_size();
}
inline void Table::clear_direct_resource_ids() {
  direct_resource_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::_internal_direct_resource_ids(int index) const {
  return direct_resource_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::direct_resource_ids(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.direct_resource_ids)
  return _internal_direct_resource_ids(index);
}
inline void Table::set_direct_resource_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  direct_resource_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.direct_resource_ids)
}
inline void Table::_internal_add_direct_resource_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  direct_resource_ids_.Add(value);
}
inline void Table::add_direct_resource_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_direct_resource_ids(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.Table.direct_resource_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Table::_internal_direct_resource_ids() const {
  return direct_resource_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Table::direct_resource_ids() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Table.direct_resource_ids)
  return _internal_direct_resource_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Table::_internal_mutable_direct_resource_ids() {
  return &direct_resource_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Table::mutable_direct_resource_ids() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Table.direct_resource_ids)
  return _internal_mutable_direct_resource_ids();
}

// int64 size = 8;
inline void Table::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Table::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Table::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.size)
  return _internal_size();
}
inline void Table::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Table::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.size)
}

// .p4.config.v1.Table.IdleTimeoutBehavior idle_timeout_behavior = 9;
inline void Table::clear_idle_timeout_behavior() {
  idle_timeout_behavior_ = 0;
}
inline ::p4::config::v1::Table_IdleTimeoutBehavior Table::_internal_idle_timeout_behavior() const {
  return static_cast< ::p4::config::v1::Table_IdleTimeoutBehavior >(idle_timeout_behavior_);
}
inline ::p4::config::v1::Table_IdleTimeoutBehavior Table::idle_timeout_behavior() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.idle_timeout_behavior)
  return _internal_idle_timeout_behavior();
}
inline void Table::_internal_set_idle_timeout_behavior(::p4::config::v1::Table_IdleTimeoutBehavior value) {
  
  idle_timeout_behavior_ = value;
}
inline void Table::set_idle_timeout_behavior(::p4::config::v1::Table_IdleTimeoutBehavior value) {
  _internal_set_idle_timeout_behavior(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.idle_timeout_behavior)
}

// bool is_const_table = 10;
inline void Table::clear_is_const_table() {
  is_const_table_ = false;
}
inline bool Table::_internal_is_const_table() const {
  return is_const_table_;
}
inline bool Table::is_const_table() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.is_const_table)
  return _internal_is_const_table();
}
inline void Table::_internal_set_is_const_table(bool value) {
  
  is_const_table_ = value;
}
inline void Table::set_is_const_table(bool value) {
  _internal_set_is_const_table(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Table.is_const_table)
}

// .google.protobuf.Any other_properties = 100;
inline bool Table::_internal_has_other_properties() const {
  return this != internal_default_instance() && other_properties_ != nullptr;
}
inline bool Table::has_other_properties() const {
  return _internal_has_other_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Table::_internal_other_properties() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = other_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Table::other_properties() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Table.other_properties)
  return _internal_other_properties();
}
inline void Table::unsafe_arena_set_allocated_other_properties(
    ::PROTOBUF_NAMESPACE_ID::Any* other_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_properties_);
  }
  other_properties_ = other_properties;
  if (other_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Table.other_properties)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Table::release_other_properties() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = other_properties_;
  other_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Table::unsafe_arena_release_other_properties() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Table.other_properties)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = other_properties_;
  other_properties_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Table::_internal_mutable_other_properties() {
  
  if (other_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    other_properties_ = p;
  }
  return other_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Table::mutable_other_properties() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_other_properties();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Table.other_properties)
  return _msg;
}
inline void Table::set_allocated_other_properties(::PROTOBUF_NAMESPACE_ID::Any* other_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_properties_);
  }
  if (other_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_properties));
    if (message_arena != submessage_arena) {
      other_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_properties, submessage_arena);
    }
    
  } else {
    
  }
  other_properties_ = other_properties;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Table.other_properties)
}

// -------------------------------------------------------------------

// ActionRef

// uint32 id = 1;
inline void ActionRef::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionRef::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionRef::id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionRef.id)
  return _internal_id();
}
inline void ActionRef::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ActionRef::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionRef.id)
}

// .p4.config.v1.ActionRef.Scope scope = 3;
inline void ActionRef::clear_scope() {
  scope_ = 0;
}
inline ::p4::config::v1::ActionRef_Scope ActionRef::_internal_scope() const {
  return static_cast< ::p4::config::v1::ActionRef_Scope >(scope_);
}
inline ::p4::config::v1::ActionRef_Scope ActionRef::scope() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionRef.scope)
  return _internal_scope();
}
inline void ActionRef::_internal_set_scope(::p4::config::v1::ActionRef_Scope value) {
  
  scope_ = value;
}
inline void ActionRef::set_scope(::p4::config::v1::ActionRef_Scope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionRef.scope)
}

// repeated string annotations = 2;
inline int ActionRef::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ActionRef::annotations_size() const {
  return _internal_annotations_size();
}
inline void ActionRef::clear_annotations() {
  annotations_.Clear();
}
inline std::string* ActionRef::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.ActionRef.annotations)
  return _s;
}
inline const std::string& ActionRef::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& ActionRef::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionRef.annotations)
  return _internal_annotations(index);
}
inline std::string* ActionRef::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ActionRef.annotations)
  return annotations_.Mutable(index);
}
inline void ActionRef::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.ActionRef.annotations)
}
inline std::string* ActionRef::_internal_add_annotations() {
  return annotations_.Add();
}
inline void ActionRef::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.ActionRef.annotations)
}
inline void ActionRef::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.ActionRef.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActionRef::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ActionRef.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActionRef::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ActionRef.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 5;
inline int ActionRef::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int ActionRef::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* ActionRef::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ActionRef.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
ActionRef::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ActionRef.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& ActionRef::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& ActionRef::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionRef.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* ActionRef::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* ActionRef::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.ActionRef.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
ActionRef::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ActionRef.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int ActionRef::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int ActionRef::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* ActionRef::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ActionRef.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
ActionRef::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ActionRef.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& ActionRef::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& ActionRef::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionRef.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* ActionRef::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* ActionRef::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.ActionRef.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
ActionRef::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ActionRef.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// Action_Param

// uint32 id = 1;
inline void Action_Param::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action_Param::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action_Param::id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.id)
  return _internal_id();
}
inline void Action_Param::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Action_Param::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Action.Param.id)
}

// string name = 2;
inline void Action_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Action_Param::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Action_Param::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Action.Param.name)
}
inline std::string* Action_Param::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.name)
  return _s;
}
inline const std::string& Action_Param::_internal_name() const {
  return name_.Get();
}
inline void Action_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Action_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Action_Param::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Action.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Action_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Action.Param.name)
}

// repeated string annotations = 3;
inline int Action_Param::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Action_Param::annotations_size() const {
  return _internal_annotations_size();
}
inline void Action_Param::clear_annotations() {
  annotations_.Clear();
}
inline std::string* Action_Param::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.Action.Param.annotations)
  return _s;
}
inline const std::string& Action_Param::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& Action_Param::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.annotations)
  return _internal_annotations(index);
}
inline std::string* Action_Param::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.annotations)
  return annotations_.Mutable(index);
}
inline void Action_Param::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.Action.Param.annotations)
}
inline std::string* Action_Param::_internal_add_annotations() {
  return annotations_.Add();
}
inline void Action_Param::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.Action.Param.annotations)
}
inline void Action_Param::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.Action.Param.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Action_Param::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Action.Param.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Action_Param::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Action.Param.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 8;
inline int Action_Param::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int Action_Param::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* Action_Param::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
Action_Param::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Action.Param.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& Action_Param::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& Action_Param::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* Action_Param::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* Action_Param::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.Action.Param.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
Action_Param::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Action.Param.annotation_locations)
  return annotation_locations_;
}

// int32 bitwidth = 4;
inline void Action_Param::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action_Param::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action_Param::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.bitwidth)
  return _internal_bitwidth();
}
inline void Action_Param::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void Action_Param::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Action.Param.bitwidth)
}

// .p4.config.v1.Documentation doc = 5;
inline bool Action_Param::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool Action_Param::has_doc() const {
  return _internal_has_doc();
}
inline void Action_Param::clear_doc() {
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::p4::config::v1::Documentation& Action_Param::_internal_doc() const {
  const ::p4::config::v1::Documentation* p = doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Documentation&>(
      ::p4::config::v1::_Documentation_default_instance_);
}
inline const ::p4::config::v1::Documentation& Action_Param::doc() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.doc)
  return _internal_doc();
}
inline void Action_Param::unsafe_arena_set_allocated_doc(
    ::p4::config::v1::Documentation* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Action.Param.doc)
}
inline ::p4::config::v1::Documentation* Action_Param::release_doc() {
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Documentation* Action_Param::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Action.Param.doc)
  
  ::p4::config::v1::Documentation* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Documentation* Action_Param::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Documentation>(GetArenaForAllocation());
    doc_ = p;
  }
  return doc_;
}
inline ::p4::config::v1::Documentation* Action_Param::mutable_doc() {
  ::p4::config::v1::Documentation* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.doc)
  return _msg;
}
inline void Action_Param::set_allocated_doc(::p4::config::v1::Documentation* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Documentation>::GetOwningArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Action.Param.doc)
}

// .p4.config.v1.P4NamedType type_name = 6;
inline bool Action_Param::_internal_has_type_name() const {
  return this != internal_default_instance() && type_name_ != nullptr;
}
inline bool Action_Param::has_type_name() const {
  return _internal_has_type_name();
}
inline const ::p4::config::v1::P4NamedType& Action_Param::_internal_type_name() const {
  const ::p4::config::v1::P4NamedType* p = type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& Action_Param::type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.type_name)
  return _internal_type_name();
}
inline void Action_Param::unsafe_arena_set_allocated_type_name(
    ::p4::config::v1::P4NamedType* type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  type_name_ = type_name;
  if (type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Action.Param.type_name)
}
inline ::p4::config::v1::P4NamedType* Action_Param::release_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* Action_Param::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Action.Param.type_name)
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* Action_Param::_internal_mutable_type_name() {
  
  if (type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    type_name_ = p;
  }
  return type_name_;
}
inline ::p4::config::v1::P4NamedType* Action_Param::mutable_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.type_name)
  return _msg;
}
inline void Action_Param::set_allocated_type_name(::p4::config::v1::P4NamedType* type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  if (type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name));
    if (message_arena != submessage_arena) {
      type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_name, submessage_arena);
    }
    
  } else {
    
  }
  type_name_ = type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Action.Param.type_name)
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 7;
inline int Action_Param::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int Action_Param::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* Action_Param::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.Param.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
Action_Param::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Action.Param.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& Action_Param::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& Action_Param::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.Param.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* Action_Param::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* Action_Param::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.Action.Param.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
Action_Param::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Action.Param.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// Action

// .p4.config.v1.Preamble preamble = 1;
inline bool Action::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Action::has_preamble() const {
  return _internal_has_preamble();
}
inline void Action::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Action::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Action::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.preamble)
  return _internal_preamble();
}
inline void Action::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Action.preamble)
}
inline ::p4::config::v1::Preamble* Action::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Action::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Action.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Action::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Action::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.preamble)
  return _msg;
}
inline void Action::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Action.preamble)
}

// repeated .p4.config.v1.Action.Param params = 2;
inline int Action::_internal_params_size() const {
  return params_.size();
}
inline int Action::params_size() const {
  return _internal_params_size();
}
inline void Action::clear_params() {
  params_.Clear();
}
inline ::p4::config::v1::Action_Param* Action::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Action.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action_Param >*
Action::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.Action.params)
  return &params_;
}
inline const ::p4::config::v1::Action_Param& Action::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::p4::config::v1::Action_Param& Action::params(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Action.params)
  return _internal_params(index);
}
inline ::p4::config::v1::Action_Param* Action::_internal_add_params() {
  return params_.Add();
}
inline ::p4::config::v1::Action_Param* Action::add_params() {
  ::p4::config::v1::Action_Param* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:p4.config.v1.Action.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Action_Param >&
Action::params() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.Action.params)
  return params_;
}

// -------------------------------------------------------------------

// ActionProfile

// .p4.config.v1.Preamble preamble = 1;
inline bool ActionProfile::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool ActionProfile::has_preamble() const {
  return _internal_has_preamble();
}
inline void ActionProfile::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& ActionProfile::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& ActionProfile::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionProfile.preamble)
  return _internal_preamble();
}
inline void ActionProfile::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ActionProfile.preamble)
}
inline ::p4::config::v1::Preamble* ActionProfile::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* ActionProfile::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ActionProfile.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* ActionProfile::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* ActionProfile::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ActionProfile.preamble)
  return _msg;
}
inline void ActionProfile::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ActionProfile.preamble)
}

// repeated uint32 table_ids = 2;
inline int ActionProfile::_internal_table_ids_size() const {
  return table_ids_.size();
}
inline int ActionProfile::table_ids_size() const {
  return _internal_table_ids_size();
}
inline void ActionProfile::clear_table_ids() {
  table_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionProfile::_internal_table_ids(int index) const {
  return table_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionProfile::table_ids(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionProfile.table_ids)
  return _internal_table_ids(index);
}
inline void ActionProfile::set_table_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  table_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionProfile.table_ids)
}
inline void ActionProfile::_internal_add_table_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  table_ids_.Add(value);
}
inline void ActionProfile::add_table_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_table_ids(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.ActionProfile.table_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActionProfile::_internal_table_ids() const {
  return table_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActionProfile::table_ids() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ActionProfile.table_ids)
  return _internal_table_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActionProfile::_internal_mutable_table_ids() {
  return &table_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActionProfile::mutable_table_ids() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ActionProfile.table_ids)
  return _internal_mutable_table_ids();
}

// bool with_selector = 3;
inline void ActionProfile::clear_with_selector() {
  with_selector_ = false;
}
inline bool ActionProfile::_internal_with_selector() const {
  return with_selector_;
}
inline bool ActionProfile::with_selector() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionProfile.with_selector)
  return _internal_with_selector();
}
inline void ActionProfile::_internal_set_with_selector(bool value) {
  
  with_selector_ = value;
}
inline void ActionProfile::set_with_selector(bool value) {
  _internal_set_with_selector(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionProfile.with_selector)
}

// int64 size = 4;
inline void ActionProfile::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActionProfile::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActionProfile::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionProfile.size)
  return _internal_size();
}
inline void ActionProfile::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ActionProfile::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionProfile.size)
}

// int32 max_group_size = 5;
inline void ActionProfile::clear_max_group_size() {
  max_group_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfile::_internal_max_group_size() const {
  return max_group_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfile::max_group_size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ActionProfile.max_group_size)
  return _internal_max_group_size();
}
inline void ActionProfile::_internal_set_max_group_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_group_size_ = value;
}
inline void ActionProfile::set_max_group_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_group_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ActionProfile.max_group_size)
}

// -------------------------------------------------------------------

// CounterSpec

// .p4.config.v1.CounterSpec.Unit unit = 1;
inline void CounterSpec::clear_unit() {
  unit_ = 0;
}
inline ::p4::config::v1::CounterSpec_Unit CounterSpec::_internal_unit() const {
  return static_cast< ::p4::config::v1::CounterSpec_Unit >(unit_);
}
inline ::p4::config::v1::CounterSpec_Unit CounterSpec::unit() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.CounterSpec.unit)
  return _internal_unit();
}
inline void CounterSpec::_internal_set_unit(::p4::config::v1::CounterSpec_Unit value) {
  
  unit_ = value;
}
inline void CounterSpec::set_unit(::p4::config::v1::CounterSpec_Unit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.CounterSpec.unit)
}

// -------------------------------------------------------------------

// Counter

// .p4.config.v1.Preamble preamble = 1;
inline bool Counter::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Counter::has_preamble() const {
  return _internal_has_preamble();
}
inline void Counter::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Counter::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Counter::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Counter.preamble)
  return _internal_preamble();
}
inline void Counter::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Counter.preamble)
}
inline ::p4::config::v1::Preamble* Counter::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Counter::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Counter.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Counter::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Counter::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Counter.preamble)
  return _msg;
}
inline void Counter::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Counter.preamble)
}

// .p4.config.v1.CounterSpec spec = 2;
inline bool Counter::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Counter::has_spec() const {
  return _internal_has_spec();
}
inline void Counter::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::p4::config::v1::CounterSpec& Counter::_internal_spec() const {
  const ::p4::config::v1::CounterSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::CounterSpec&>(
      ::p4::config::v1::_CounterSpec_default_instance_);
}
inline const ::p4::config::v1::CounterSpec& Counter::spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Counter.spec)
  return _internal_spec();
}
inline void Counter::unsafe_arena_set_allocated_spec(
    ::p4::config::v1::CounterSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Counter.spec)
}
inline ::p4::config::v1::CounterSpec* Counter::release_spec() {
  
  ::p4::config::v1::CounterSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::CounterSpec* Counter::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Counter.spec)
  
  ::p4::config::v1::CounterSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::CounterSpec* Counter::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::CounterSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::p4::config::v1::CounterSpec* Counter::mutable_spec() {
  ::p4::config::v1::CounterSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Counter.spec)
  return _msg;
}
inline void Counter::set_allocated_spec(::p4::config::v1::CounterSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::CounterSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Counter.spec)
}

// int64 size = 3;
inline void Counter::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Counter::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Counter::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Counter.size)
  return _internal_size();
}
inline void Counter::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Counter::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Counter.size)
}

// .p4.config.v1.P4NamedType index_type_name = 4;
inline bool Counter::_internal_has_index_type_name() const {
  return this != internal_default_instance() && index_type_name_ != nullptr;
}
inline bool Counter::has_index_type_name() const {
  return _internal_has_index_type_name();
}
inline const ::p4::config::v1::P4NamedType& Counter::_internal_index_type_name() const {
  const ::p4::config::v1::P4NamedType* p = index_type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& Counter::index_type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Counter.index_type_name)
  return _internal_index_type_name();
}
inline void Counter::unsafe_arena_set_allocated_index_type_name(
    ::p4::config::v1::P4NamedType* index_type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  index_type_name_ = index_type_name;
  if (index_type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Counter.index_type_name)
}
inline ::p4::config::v1::P4NamedType* Counter::release_index_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* Counter::unsafe_arena_release_index_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Counter.index_type_name)
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* Counter::_internal_mutable_index_type_name() {
  
  if (index_type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    index_type_name_ = p;
  }
  return index_type_name_;
}
inline ::p4::config::v1::P4NamedType* Counter::mutable_index_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_index_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Counter.index_type_name)
  return _msg;
}
inline void Counter::set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  if (index_type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name));
    if (message_arena != submessage_arena) {
      index_type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_type_name, submessage_arena);
    }
    
  } else {
    
  }
  index_type_name_ = index_type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Counter.index_type_name)
}

// -------------------------------------------------------------------

// DirectCounter

// .p4.config.v1.Preamble preamble = 1;
inline bool DirectCounter::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool DirectCounter::has_preamble() const {
  return _internal_has_preamble();
}
inline void DirectCounter::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& DirectCounter::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& DirectCounter::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectCounter.preamble)
  return _internal_preamble();
}
inline void DirectCounter::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.DirectCounter.preamble)
}
inline ::p4::config::v1::Preamble* DirectCounter::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* DirectCounter::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.DirectCounter.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* DirectCounter::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* DirectCounter::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.DirectCounter.preamble)
  return _msg;
}
inline void DirectCounter::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.DirectCounter.preamble)
}

// .p4.config.v1.CounterSpec spec = 2;
inline bool DirectCounter::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool DirectCounter::has_spec() const {
  return _internal_has_spec();
}
inline void DirectCounter::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::p4::config::v1::CounterSpec& DirectCounter::_internal_spec() const {
  const ::p4::config::v1::CounterSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::CounterSpec&>(
      ::p4::config::v1::_CounterSpec_default_instance_);
}
inline const ::p4::config::v1::CounterSpec& DirectCounter::spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectCounter.spec)
  return _internal_spec();
}
inline void DirectCounter::unsafe_arena_set_allocated_spec(
    ::p4::config::v1::CounterSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.DirectCounter.spec)
}
inline ::p4::config::v1::CounterSpec* DirectCounter::release_spec() {
  
  ::p4::config::v1::CounterSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::CounterSpec* DirectCounter::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.DirectCounter.spec)
  
  ::p4::config::v1::CounterSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::CounterSpec* DirectCounter::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::CounterSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::p4::config::v1::CounterSpec* DirectCounter::mutable_spec() {
  ::p4::config::v1::CounterSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.DirectCounter.spec)
  return _msg;
}
inline void DirectCounter::set_allocated_spec(::p4::config::v1::CounterSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::CounterSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.DirectCounter.spec)
}

// uint32 direct_table_id = 3;
inline void DirectCounter::clear_direct_table_id() {
  direct_table_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DirectCounter::_internal_direct_table_id() const {
  return direct_table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DirectCounter::direct_table_id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectCounter.direct_table_id)
  return _internal_direct_table_id();
}
inline void DirectCounter::_internal_set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direct_table_id_ = value;
}
inline void DirectCounter::set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direct_table_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.DirectCounter.direct_table_id)
}

// -------------------------------------------------------------------

// MeterSpec

// .p4.config.v1.MeterSpec.Unit unit = 1;
inline void MeterSpec::clear_unit() {
  unit_ = 0;
}
inline ::p4::config::v1::MeterSpec_Unit MeterSpec::_internal_unit() const {
  return static_cast< ::p4::config::v1::MeterSpec_Unit >(unit_);
}
inline ::p4::config::v1::MeterSpec_Unit MeterSpec::unit() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.MeterSpec.unit)
  return _internal_unit();
}
inline void MeterSpec::_internal_set_unit(::p4::config::v1::MeterSpec_Unit value) {
  
  unit_ = value;
}
inline void MeterSpec::set_unit(::p4::config::v1::MeterSpec_Unit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.MeterSpec.unit)
}

// -------------------------------------------------------------------

// Meter

// .p4.config.v1.Preamble preamble = 1;
inline bool Meter::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Meter::has_preamble() const {
  return _internal_has_preamble();
}
inline void Meter::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Meter::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Meter::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Meter.preamble)
  return _internal_preamble();
}
inline void Meter::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Meter.preamble)
}
inline ::p4::config::v1::Preamble* Meter::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Meter::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Meter.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Meter::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Meter::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Meter.preamble)
  return _msg;
}
inline void Meter::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Meter.preamble)
}

// .p4.config.v1.MeterSpec spec = 2;
inline bool Meter::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Meter::has_spec() const {
  return _internal_has_spec();
}
inline void Meter::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::p4::config::v1::MeterSpec& Meter::_internal_spec() const {
  const ::p4::config::v1::MeterSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::MeterSpec&>(
      ::p4::config::v1::_MeterSpec_default_instance_);
}
inline const ::p4::config::v1::MeterSpec& Meter::spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Meter.spec)
  return _internal_spec();
}
inline void Meter::unsafe_arena_set_allocated_spec(
    ::p4::config::v1::MeterSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Meter.spec)
}
inline ::p4::config::v1::MeterSpec* Meter::release_spec() {
  
  ::p4::config::v1::MeterSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::MeterSpec* Meter::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Meter.spec)
  
  ::p4::config::v1::MeterSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::MeterSpec* Meter::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::MeterSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::p4::config::v1::MeterSpec* Meter::mutable_spec() {
  ::p4::config::v1::MeterSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Meter.spec)
  return _msg;
}
inline void Meter::set_allocated_spec(::p4::config::v1::MeterSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::MeterSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Meter.spec)
}

// int64 size = 3;
inline void Meter::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meter::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meter::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Meter.size)
  return _internal_size();
}
inline void Meter::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Meter::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Meter.size)
}

// .p4.config.v1.P4NamedType index_type_name = 4;
inline bool Meter::_internal_has_index_type_name() const {
  return this != internal_default_instance() && index_type_name_ != nullptr;
}
inline bool Meter::has_index_type_name() const {
  return _internal_has_index_type_name();
}
inline const ::p4::config::v1::P4NamedType& Meter::_internal_index_type_name() const {
  const ::p4::config::v1::P4NamedType* p = index_type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& Meter::index_type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Meter.index_type_name)
  return _internal_index_type_name();
}
inline void Meter::unsafe_arena_set_allocated_index_type_name(
    ::p4::config::v1::P4NamedType* index_type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  index_type_name_ = index_type_name;
  if (index_type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Meter.index_type_name)
}
inline ::p4::config::v1::P4NamedType* Meter::release_index_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* Meter::unsafe_arena_release_index_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Meter.index_type_name)
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* Meter::_internal_mutable_index_type_name() {
  
  if (index_type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    index_type_name_ = p;
  }
  return index_type_name_;
}
inline ::p4::config::v1::P4NamedType* Meter::mutable_index_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_index_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Meter.index_type_name)
  return _msg;
}
inline void Meter::set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  if (index_type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name));
    if (message_arena != submessage_arena) {
      index_type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_type_name, submessage_arena);
    }
    
  } else {
    
  }
  index_type_name_ = index_type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Meter.index_type_name)
}

// -------------------------------------------------------------------

// DirectMeter

// .p4.config.v1.Preamble preamble = 1;
inline bool DirectMeter::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool DirectMeter::has_preamble() const {
  return _internal_has_preamble();
}
inline void DirectMeter::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& DirectMeter::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& DirectMeter::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectMeter.preamble)
  return _internal_preamble();
}
inline void DirectMeter::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.DirectMeter.preamble)
}
inline ::p4::config::v1::Preamble* DirectMeter::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* DirectMeter::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.DirectMeter.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* DirectMeter::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* DirectMeter::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.DirectMeter.preamble)
  return _msg;
}
inline void DirectMeter::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.DirectMeter.preamble)
}

// .p4.config.v1.MeterSpec spec = 2;
inline bool DirectMeter::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool DirectMeter::has_spec() const {
  return _internal_has_spec();
}
inline void DirectMeter::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::p4::config::v1::MeterSpec& DirectMeter::_internal_spec() const {
  const ::p4::config::v1::MeterSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::MeterSpec&>(
      ::p4::config::v1::_MeterSpec_default_instance_);
}
inline const ::p4::config::v1::MeterSpec& DirectMeter::spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectMeter.spec)
  return _internal_spec();
}
inline void DirectMeter::unsafe_arena_set_allocated_spec(
    ::p4::config::v1::MeterSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.DirectMeter.spec)
}
inline ::p4::config::v1::MeterSpec* DirectMeter::release_spec() {
  
  ::p4::config::v1::MeterSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::MeterSpec* DirectMeter::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.DirectMeter.spec)
  
  ::p4::config::v1::MeterSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::MeterSpec* DirectMeter::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::MeterSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::p4::config::v1::MeterSpec* DirectMeter::mutable_spec() {
  ::p4::config::v1::MeterSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.DirectMeter.spec)
  return _msg;
}
inline void DirectMeter::set_allocated_spec(::p4::config::v1::MeterSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::MeterSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.DirectMeter.spec)
}

// uint32 direct_table_id = 3;
inline void DirectMeter::clear_direct_table_id() {
  direct_table_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DirectMeter::_internal_direct_table_id() const {
  return direct_table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DirectMeter::direct_table_id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.DirectMeter.direct_table_id)
  return _internal_direct_table_id();
}
inline void DirectMeter::_internal_set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direct_table_id_ = value;
}
inline void DirectMeter::set_direct_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direct_table_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.DirectMeter.direct_table_id)
}

// -------------------------------------------------------------------

// ControllerPacketMetadata_Metadata

// uint32 id = 1;
inline void ControllerPacketMetadata_Metadata::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerPacketMetadata_Metadata::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerPacketMetadata_Metadata::id() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.id)
  return _internal_id();
}
inline void ControllerPacketMetadata_Metadata::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ControllerPacketMetadata_Metadata::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ControllerPacketMetadata.Metadata.id)
}

// string name = 2;
inline void ControllerPacketMetadata_Metadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ControllerPacketMetadata_Metadata::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerPacketMetadata_Metadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.ControllerPacketMetadata.Metadata.name)
}
inline std::string* ControllerPacketMetadata_Metadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.name)
  return _s;
}
inline const std::string& ControllerPacketMetadata_Metadata::_internal_name() const {
  return name_.Get();
}
inline void ControllerPacketMetadata_Metadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControllerPacketMetadata_Metadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControllerPacketMetadata_Metadata::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ControllerPacketMetadata.Metadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControllerPacketMetadata_Metadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ControllerPacketMetadata.Metadata.name)
}

// repeated string annotations = 3;
inline int ControllerPacketMetadata_Metadata::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ControllerPacketMetadata_Metadata::annotations_size() const {
  return _internal_annotations_size();
}
inline void ControllerPacketMetadata_Metadata::clear_annotations() {
  annotations_.Clear();
}
inline std::string* ControllerPacketMetadata_Metadata::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
  return _s;
}
inline const std::string& ControllerPacketMetadata_Metadata::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& ControllerPacketMetadata_Metadata::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
  return _internal_annotations(index);
}
inline std::string* ControllerPacketMetadata_Metadata::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
  return annotations_.Mutable(index);
}
inline void ControllerPacketMetadata_Metadata::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline std::string* ControllerPacketMetadata_Metadata::_internal_add_annotations() {
  return annotations_.Add();
}
inline void ControllerPacketMetadata_Metadata::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline void ControllerPacketMetadata_Metadata::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ControllerPacketMetadata_Metadata::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ControllerPacketMetadata_Metadata::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ControllerPacketMetadata.Metadata.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 7;
inline int ControllerPacketMetadata_Metadata::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int ControllerPacketMetadata_Metadata::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline ::p4::config::v1::SourceLocation* ControllerPacketMetadata_Metadata::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
ControllerPacketMetadata_Metadata::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ControllerPacketMetadata.Metadata.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& ControllerPacketMetadata_Metadata::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& ControllerPacketMetadata_Metadata::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* ControllerPacketMetadata_Metadata::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* ControllerPacketMetadata_Metadata::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.ControllerPacketMetadata.Metadata.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
ControllerPacketMetadata_Metadata::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ControllerPacketMetadata.Metadata.annotation_locations)
  return annotation_locations_;
}

// int32 bitwidth = 4;
inline void ControllerPacketMetadata_Metadata::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControllerPacketMetadata_Metadata::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControllerPacketMetadata_Metadata::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.bitwidth)
  return _internal_bitwidth();
}
inline void ControllerPacketMetadata_Metadata::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void ControllerPacketMetadata_Metadata::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ControllerPacketMetadata.Metadata.bitwidth)
}

// .p4.config.v1.P4NamedType type_name = 5;
inline bool ControllerPacketMetadata_Metadata::_internal_has_type_name() const {
  return this != internal_default_instance() && type_name_ != nullptr;
}
inline bool ControllerPacketMetadata_Metadata::has_type_name() const {
  return _internal_has_type_name();
}
inline const ::p4::config::v1::P4NamedType& ControllerPacketMetadata_Metadata::_internal_type_name() const {
  const ::p4::config::v1::P4NamedType* p = type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& ControllerPacketMetadata_Metadata::type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.type_name)
  return _internal_type_name();
}
inline void ControllerPacketMetadata_Metadata::unsafe_arena_set_allocated_type_name(
    ::p4::config::v1::P4NamedType* type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  type_name_ = type_name;
  if (type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ControllerPacketMetadata.Metadata.type_name)
}
inline ::p4::config::v1::P4NamedType* ControllerPacketMetadata_Metadata::release_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* ControllerPacketMetadata_Metadata::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ControllerPacketMetadata.Metadata.type_name)
  
  ::p4::config::v1::P4NamedType* temp = type_name_;
  type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* ControllerPacketMetadata_Metadata::_internal_mutable_type_name() {
  
  if (type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    type_name_ = p;
  }
  return type_name_;
}
inline ::p4::config::v1::P4NamedType* ControllerPacketMetadata_Metadata::mutable_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.type_name)
  return _msg;
}
inline void ControllerPacketMetadata_Metadata::set_allocated_type_name(::p4::config::v1::P4NamedType* type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name_);
  }
  if (type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_name));
    if (message_arena != submessage_arena) {
      type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_name, submessage_arena);
    }
    
  } else {
    
  }
  type_name_ = type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ControllerPacketMetadata.Metadata.type_name)
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
inline int ControllerPacketMetadata_Metadata::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int ControllerPacketMetadata_Metadata::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline ::p4::config::v1::StructuredAnnotation* ControllerPacketMetadata_Metadata::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.Metadata.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
ControllerPacketMetadata_Metadata::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ControllerPacketMetadata.Metadata.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& ControllerPacketMetadata_Metadata::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& ControllerPacketMetadata_Metadata::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.Metadata.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* ControllerPacketMetadata_Metadata::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* ControllerPacketMetadata_Metadata::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.ControllerPacketMetadata.Metadata.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
ControllerPacketMetadata_Metadata::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ControllerPacketMetadata.Metadata.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// ControllerPacketMetadata

// .p4.config.v1.Preamble preamble = 1;
inline bool ControllerPacketMetadata::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool ControllerPacketMetadata::has_preamble() const {
  return _internal_has_preamble();
}
inline void ControllerPacketMetadata::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& ControllerPacketMetadata::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& ControllerPacketMetadata::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.preamble)
  return _internal_preamble();
}
inline void ControllerPacketMetadata::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ControllerPacketMetadata.preamble)
}
inline ::p4::config::v1::Preamble* ControllerPacketMetadata::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* ControllerPacketMetadata::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ControllerPacketMetadata.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* ControllerPacketMetadata::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* ControllerPacketMetadata::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.preamble)
  return _msg;
}
inline void ControllerPacketMetadata::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ControllerPacketMetadata.preamble)
}

// repeated .p4.config.v1.ControllerPacketMetadata.Metadata metadata = 2;
inline int ControllerPacketMetadata::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ControllerPacketMetadata::metadata_size() const {
  return _internal_metadata_size();
}
inline void ControllerPacketMetadata::clear_metadata() {
  metadata_.Clear();
}
inline ::p4::config::v1::ControllerPacketMetadata_Metadata* ControllerPacketMetadata::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ControllerPacketMetadata.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata_Metadata >*
ControllerPacketMetadata::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ControllerPacketMetadata.metadata)
  return &metadata_;
}
inline const ::p4::config::v1::ControllerPacketMetadata_Metadata& ControllerPacketMetadata::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::p4::config::v1::ControllerPacketMetadata_Metadata& ControllerPacketMetadata::metadata(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ControllerPacketMetadata.metadata)
  return _internal_metadata(index);
}
inline ::p4::config::v1::ControllerPacketMetadata_Metadata* ControllerPacketMetadata::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::p4::config::v1::ControllerPacketMetadata_Metadata* ControllerPacketMetadata::add_metadata() {
  ::p4::config::v1::ControllerPacketMetadata_Metadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:p4.config.v1.ControllerPacketMetadata.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::ControllerPacketMetadata_Metadata >&
ControllerPacketMetadata::metadata() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ControllerPacketMetadata.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// ValueSet

// .p4.config.v1.Preamble preamble = 1;
inline bool ValueSet::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool ValueSet::has_preamble() const {
  return _internal_has_preamble();
}
inline void ValueSet::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& ValueSet::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& ValueSet::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ValueSet.preamble)
  return _internal_preamble();
}
inline void ValueSet::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.ValueSet.preamble)
}
inline ::p4::config::v1::Preamble* ValueSet::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* ValueSet::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.ValueSet.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* ValueSet::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* ValueSet::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ValueSet.preamble)
  return _msg;
}
inline void ValueSet::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.ValueSet.preamble)
}

// repeated .p4.config.v1.MatchField match = 2;
inline int ValueSet::_internal_match_size() const {
  return match_.size();
}
inline int ValueSet::match_size() const {
  return _internal_match_size();
}
inline void ValueSet::clear_match() {
  match_.Clear();
}
inline ::p4::config::v1::MatchField* ValueSet::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ValueSet.match)
  return match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >*
ValueSet::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ValueSet.match)
  return &match_;
}
inline const ::p4::config::v1::MatchField& ValueSet::_internal_match(int index) const {
  return match_.Get(index);
}
inline const ::p4::config::v1::MatchField& ValueSet::match(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ValueSet.match)
  return _internal_match(index);
}
inline ::p4::config::v1::MatchField* ValueSet::_internal_add_match() {
  return match_.Add();
}
inline ::p4::config::v1::MatchField* ValueSet::add_match() {
  ::p4::config::v1::MatchField* _add = _internal_add_match();
  // @@protoc_insertion_point(field_add:p4.config.v1.ValueSet.match)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::MatchField >&
ValueSet::match() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ValueSet.match)
  return match_;
}

// int32 size = 3;
inline void ValueSet::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueSet::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueSet::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ValueSet.size)
  return _internal_size();
}
inline void ValueSet::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void ValueSet::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.ValueSet.size)
}

// -------------------------------------------------------------------

// Register

// .p4.config.v1.Preamble preamble = 1;
inline bool Register::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Register::has_preamble() const {
  return _internal_has_preamble();
}
inline void Register::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Register::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Register::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Register.preamble)
  return _internal_preamble();
}
inline void Register::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Register.preamble)
}
inline ::p4::config::v1::Preamble* Register::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Register::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Register.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Register::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Register::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Register.preamble)
  return _msg;
}
inline void Register::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Register.preamble)
}

// .p4.config.v1.P4DataTypeSpec type_spec = 2;
inline bool Register::_internal_has_type_spec() const {
  return this != internal_default_instance() && type_spec_ != nullptr;
}
inline bool Register::has_type_spec() const {
  return _internal_has_type_spec();
}
inline const ::p4::config::v1::P4DataTypeSpec& Register::_internal_type_spec() const {
  const ::p4::config::v1::P4DataTypeSpec* p = type_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4DataTypeSpec&>(
      ::p4::config::v1::_P4DataTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4DataTypeSpec& Register::type_spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Register.type_spec)
  return _internal_type_spec();
}
inline void Register::unsafe_arena_set_allocated_type_spec(
    ::p4::config::v1::P4DataTypeSpec* type_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  type_spec_ = type_spec;
  if (type_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Register.type_spec)
}
inline ::p4::config::v1::P4DataTypeSpec* Register::release_type_spec() {
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* Register::unsafe_arena_release_type_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Register.type_spec)
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* Register::_internal_mutable_type_spec() {
  
  if (type_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4DataTypeSpec>(GetArenaForAllocation());
    type_spec_ = p;
  }
  return type_spec_;
}
inline ::p4::config::v1::P4DataTypeSpec* Register::mutable_type_spec() {
  ::p4::config::v1::P4DataTypeSpec* _msg = _internal_mutable_type_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Register.type_spec)
  return _msg;
}
inline void Register::set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  if (type_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec));
    if (message_arena != submessage_arena) {
      type_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec, submessage_arena);
    }
    
  } else {
    
  }
  type_spec_ = type_spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Register.type_spec)
}

// int32 size = 3;
inline void Register::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Register::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Register::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Register.size)
  return _internal_size();
}
inline void Register::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Register::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Register.size)
}

// .p4.config.v1.P4NamedType index_type_name = 4;
inline bool Register::_internal_has_index_type_name() const {
  return this != internal_default_instance() && index_type_name_ != nullptr;
}
inline bool Register::has_index_type_name() const {
  return _internal_has_index_type_name();
}
inline const ::p4::config::v1::P4NamedType& Register::_internal_index_type_name() const {
  const ::p4::config::v1::P4NamedType* p = index_type_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& Register::index_type_name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Register.index_type_name)
  return _internal_index_type_name();
}
inline void Register::unsafe_arena_set_allocated_index_type_name(
    ::p4::config::v1::P4NamedType* index_type_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  index_type_name_ = index_type_name;
  if (index_type_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Register.index_type_name)
}
inline ::p4::config::v1::P4NamedType* Register::release_index_type_name() {
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* Register::unsafe_arena_release_index_type_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Register.index_type_name)
  
  ::p4::config::v1::P4NamedType* temp = index_type_name_;
  index_type_name_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* Register::_internal_mutable_index_type_name() {
  
  if (index_type_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    index_type_name_ = p;
  }
  return index_type_name_;
}
inline ::p4::config::v1::P4NamedType* Register::mutable_index_type_name() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_index_type_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Register.index_type_name)
  return _msg;
}
inline void Register::set_allocated_index_type_name(::p4::config::v1::P4NamedType* index_type_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name_);
  }
  if (index_type_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_type_name));
    if (message_arena != submessage_arena) {
      index_type_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_type_name, submessage_arena);
    }
    
  } else {
    
  }
  index_type_name_ = index_type_name;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Register.index_type_name)
}

// -------------------------------------------------------------------

// Digest

// .p4.config.v1.Preamble preamble = 1;
inline bool Digest::_internal_has_preamble() const {
  return this != internal_default_instance() && preamble_ != nullptr;
}
inline bool Digest::has_preamble() const {
  return _internal_has_preamble();
}
inline void Digest::clear_preamble() {
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
}
inline const ::p4::config::v1::Preamble& Digest::_internal_preamble() const {
  const ::p4::config::v1::Preamble* p = preamble_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Preamble&>(
      ::p4::config::v1::_Preamble_default_instance_);
}
inline const ::p4::config::v1::Preamble& Digest::preamble() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Digest.preamble)
  return _internal_preamble();
}
inline void Digest::unsafe_arena_set_allocated_preamble(
    ::p4::config::v1::Preamble* preamble) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preamble_);
  }
  preamble_ = preamble;
  if (preamble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Digest.preamble)
}
inline ::p4::config::v1::Preamble* Digest::release_preamble() {
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Preamble* Digest::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Digest.preamble)
  
  ::p4::config::v1::Preamble* temp = preamble_;
  preamble_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Preamble* Digest::_internal_mutable_preamble() {
  
  if (preamble_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Preamble>(GetArenaForAllocation());
    preamble_ = p;
  }
  return preamble_;
}
inline ::p4::config::v1::Preamble* Digest::mutable_preamble() {
  ::p4::config::v1::Preamble* _msg = _internal_mutable_preamble();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Digest.preamble)
  return _msg;
}
inline void Digest::set_allocated_preamble(::p4::config::v1::Preamble* preamble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preamble_;
  }
  if (preamble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Preamble>::GetOwningArena(preamble);
    if (message_arena != submessage_arena) {
      preamble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preamble, submessage_arena);
    }
    
  } else {
    
  }
  preamble_ = preamble;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Digest.preamble)
}

// .p4.config.v1.P4DataTypeSpec type_spec = 2;
inline bool Digest::_internal_has_type_spec() const {
  return this != internal_default_instance() && type_spec_ != nullptr;
}
inline bool Digest::has_type_spec() const {
  return _internal_has_type_spec();
}
inline const ::p4::config::v1::P4DataTypeSpec& Digest::_internal_type_spec() const {
  const ::p4::config::v1::P4DataTypeSpec* p = type_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4DataTypeSpec&>(
      ::p4::config::v1::_P4DataTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4DataTypeSpec& Digest::type_spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Digest.type_spec)
  return _internal_type_spec();
}
inline void Digest::unsafe_arena_set_allocated_type_spec(
    ::p4::config::v1::P4DataTypeSpec* type_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  type_spec_ = type_spec;
  if (type_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.Digest.type_spec)
}
inline ::p4::config::v1::P4DataTypeSpec* Digest::release_type_spec() {
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* Digest::unsafe_arena_release_type_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Digest.type_spec)
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* Digest::_internal_mutable_type_spec() {
  
  if (type_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4DataTypeSpec>(GetArenaForAllocation());
    type_spec_ = p;
  }
  return type_spec_;
}
inline ::p4::config::v1::P4DataTypeSpec* Digest::mutable_type_spec() {
  ::p4::config::v1::P4DataTypeSpec* _msg = _internal_mutable_type_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Digest.type_spec)
  return _msg;
}
inline void Digest::set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  if (type_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec));
    if (message_arena != submessage_arena) {
      type_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec, submessage_arena);
    }
    
  } else {
    
  }
  type_spec_ = type_spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Digest.type_spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace config
}  // namespace p4

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::p4::config::v1::P4Ids_Prefix> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::P4Ids_Prefix>() {
  return ::p4::config::v1::P4Ids_Prefix_descriptor();
}
template <> struct is_proto_enum< ::p4::config::v1::MatchField_MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::MatchField_MatchType>() {
  return ::p4::config::v1::MatchField_MatchType_descriptor();
}
template <> struct is_proto_enum< ::p4::config::v1::Table_IdleTimeoutBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::Table_IdleTimeoutBehavior>() {
  return ::p4::config::v1::Table_IdleTimeoutBehavior_descriptor();
}
template <> struct is_proto_enum< ::p4::config::v1::ActionRef_Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::ActionRef_Scope>() {
  return ::p4::config::v1::ActionRef_Scope_descriptor();
}
template <> struct is_proto_enum< ::p4::config::v1::CounterSpec_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::CounterSpec_Unit>() {
  return ::p4::config::v1::CounterSpec_Unit_descriptor();
}
template <> struct is_proto_enum< ::p4::config::v1::MeterSpec_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p4::config::v1::MeterSpec_Unit>() {
  return ::p4::config::v1::MeterSpec_Unit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4info_2eproto
