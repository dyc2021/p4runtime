// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/config/v1/p4types.proto

#include "p4/config/v1/p4types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace p4 {
namespace config {
namespace v1 {
constexpr P4TypeInfo_StructsEntry_DoNotUse::P4TypeInfo_StructsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_StructsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_StructsEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo_HeadersEntry_DoNotUse::P4TypeInfo_HeadersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_HeadersEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo_HeaderUnionsEntry_DoNotUse::P4TypeInfo_HeaderUnionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_HeaderUnionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_HeaderUnionsEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo_EnumsEntry_DoNotUse::P4TypeInfo_EnumsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_EnumsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_EnumsEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo_SerializableEnumsEntry_DoNotUse::P4TypeInfo_SerializableEnumsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_SerializableEnumsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_SerializableEnumsEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo_NewTypesEntry_DoNotUse::P4TypeInfo_NewTypesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal {
  constexpr P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    P4TypeInfo_NewTypesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_NewTypesEntry_DoNotUse_default_instance_;
constexpr P4TypeInfo::P4TypeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : structs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , headers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , header_unions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , enums_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , serializable_enums_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , new_types_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(nullptr){}
struct P4TypeInfoDefaultTypeInternal {
  constexpr P4TypeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TypeInfoDefaultTypeInternal() {}
  union {
    P4TypeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TypeInfoDefaultTypeInternal _P4TypeInfo_default_instance_;
constexpr P4DataTypeSpec::P4DataTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct P4DataTypeSpecDefaultTypeInternal {
  constexpr P4DataTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4DataTypeSpecDefaultTypeInternal() {}
  union {
    P4DataTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4DataTypeSpecDefaultTypeInternal _P4DataTypeSpec_default_instance_;
constexpr P4NamedType::P4NamedType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct P4NamedTypeDefaultTypeInternal {
  constexpr P4NamedTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4NamedTypeDefaultTypeInternal() {}
  union {
    P4NamedType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4NamedTypeDefaultTypeInternal _P4NamedType_default_instance_;
constexpr P4BoolType::P4BoolType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4BoolTypeDefaultTypeInternal {
  constexpr P4BoolTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4BoolTypeDefaultTypeInternal() {}
  union {
    P4BoolType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4BoolTypeDefaultTypeInternal _P4BoolType_default_instance_;
constexpr P4ErrorType::P4ErrorType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4ErrorTypeDefaultTypeInternal {
  constexpr P4ErrorTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4ErrorTypeDefaultTypeInternal() {}
  union {
    P4ErrorType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4ErrorTypeDefaultTypeInternal _P4ErrorType_default_instance_;
constexpr P4BitstringLikeTypeSpec::P4BitstringLikeTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , annotation_locations_()
  , structured_annotations_()
  , _oneof_case_{}{}
struct P4BitstringLikeTypeSpecDefaultTypeInternal {
  constexpr P4BitstringLikeTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4BitstringLikeTypeSpecDefaultTypeInternal() {}
  union {
    P4BitstringLikeTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4BitstringLikeTypeSpecDefaultTypeInternal _P4BitstringLikeTypeSpec_default_instance_;
constexpr P4BitTypeSpec::P4BitTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitwidth_(0){}
struct P4BitTypeSpecDefaultTypeInternal {
  constexpr P4BitTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4BitTypeSpecDefaultTypeInternal() {}
  union {
    P4BitTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4BitTypeSpecDefaultTypeInternal _P4BitTypeSpec_default_instance_;
constexpr P4IntTypeSpec::P4IntTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitwidth_(0){}
struct P4IntTypeSpecDefaultTypeInternal {
  constexpr P4IntTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4IntTypeSpecDefaultTypeInternal() {}
  union {
    P4IntTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4IntTypeSpecDefaultTypeInternal _P4IntTypeSpec_default_instance_;
constexpr P4VarbitTypeSpec::P4VarbitTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_bitwidth_(0){}
struct P4VarbitTypeSpecDefaultTypeInternal {
  constexpr P4VarbitTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4VarbitTypeSpecDefaultTypeInternal() {}
  union {
    P4VarbitTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4VarbitTypeSpecDefaultTypeInternal _P4VarbitTypeSpec_default_instance_;
constexpr P4TupleTypeSpec::P4TupleTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_(){}
struct P4TupleTypeSpecDefaultTypeInternal {
  constexpr P4TupleTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4TupleTypeSpecDefaultTypeInternal() {}
  union {
    P4TupleTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4TupleTypeSpecDefaultTypeInternal _P4TupleTypeSpec_default_instance_;
constexpr P4StructTypeSpec_Member::P4StructTypeSpec_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_spec_(nullptr){}
struct P4StructTypeSpec_MemberDefaultTypeInternal {
  constexpr P4StructTypeSpec_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4StructTypeSpec_MemberDefaultTypeInternal() {}
  union {
    P4StructTypeSpec_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4StructTypeSpec_MemberDefaultTypeInternal _P4StructTypeSpec_Member_default_instance_;
constexpr P4StructTypeSpec::P4StructTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , annotations_()
  , annotation_locations_()
  , structured_annotations_(){}
struct P4StructTypeSpecDefaultTypeInternal {
  constexpr P4StructTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4StructTypeSpecDefaultTypeInternal() {}
  union {
    P4StructTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4StructTypeSpecDefaultTypeInternal _P4StructTypeSpec_default_instance_;
constexpr P4HeaderTypeSpec_Member::P4HeaderTypeSpec_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_spec_(nullptr){}
struct P4HeaderTypeSpec_MemberDefaultTypeInternal {
  constexpr P4HeaderTypeSpec_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderTypeSpec_MemberDefaultTypeInternal() {}
  union {
    P4HeaderTypeSpec_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderTypeSpec_MemberDefaultTypeInternal _P4HeaderTypeSpec_Member_default_instance_;
constexpr P4HeaderTypeSpec::P4HeaderTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , annotations_()
  , annotation_locations_()
  , structured_annotations_(){}
struct P4HeaderTypeSpecDefaultTypeInternal {
  constexpr P4HeaderTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderTypeSpecDefaultTypeInternal() {}
  union {
    P4HeaderTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderTypeSpecDefaultTypeInternal _P4HeaderTypeSpec_default_instance_;
constexpr P4HeaderUnionTypeSpec_Member::P4HeaderUnionTypeSpec_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct P4HeaderUnionTypeSpec_MemberDefaultTypeInternal {
  constexpr P4HeaderUnionTypeSpec_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderUnionTypeSpec_MemberDefaultTypeInternal() {}
  union {
    P4HeaderUnionTypeSpec_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderUnionTypeSpec_MemberDefaultTypeInternal _P4HeaderUnionTypeSpec_Member_default_instance_;
constexpr P4HeaderUnionTypeSpec::P4HeaderUnionTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , annotations_()
  , annotation_locations_()
  , structured_annotations_(){}
struct P4HeaderUnionTypeSpecDefaultTypeInternal {
  constexpr P4HeaderUnionTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderUnionTypeSpecDefaultTypeInternal() {}
  union {
    P4HeaderUnionTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderUnionTypeSpecDefaultTypeInternal _P4HeaderUnionTypeSpec_default_instance_;
constexpr P4HeaderStackTypeSpec::P4HeaderStackTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , size_(0){}
struct P4HeaderStackTypeSpecDefaultTypeInternal {
  constexpr P4HeaderStackTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderStackTypeSpecDefaultTypeInternal() {}
  union {
    P4HeaderStackTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderStackTypeSpecDefaultTypeInternal _P4HeaderStackTypeSpec_default_instance_;
constexpr P4HeaderUnionStackTypeSpec::P4HeaderUnionStackTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_union_(nullptr)
  , size_(0){}
struct P4HeaderUnionStackTypeSpecDefaultTypeInternal {
  constexpr P4HeaderUnionStackTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4HeaderUnionStackTypeSpecDefaultTypeInternal() {}
  union {
    P4HeaderUnionStackTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4HeaderUnionStackTypeSpecDefaultTypeInternal _P4HeaderUnionStackTypeSpec_default_instance_;
constexpr KeyValuePair::KeyValuePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct KeyValuePairDefaultTypeInternal {
  constexpr KeyValuePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyValuePairDefaultTypeInternal() {}
  union {
    KeyValuePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
constexpr KeyValuePairList::KeyValuePairList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kv_pairs_(){}
struct KeyValuePairListDefaultTypeInternal {
  constexpr KeyValuePairListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyValuePairListDefaultTypeInternal() {}
  union {
    KeyValuePairList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyValuePairListDefaultTypeInternal _KeyValuePairList_default_instance_;
constexpr Expression::Expression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExpressionDefaultTypeInternal {
  constexpr ExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpressionDefaultTypeInternal() {}
  union {
    Expression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpressionDefaultTypeInternal _Expression_default_instance_;
constexpr ExpressionList::ExpressionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expressions_(){}
struct ExpressionListDefaultTypeInternal {
  constexpr ExpressionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpressionListDefaultTypeInternal() {}
  union {
    ExpressionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpressionListDefaultTypeInternal _ExpressionList_default_instance_;
constexpr StructuredAnnotation::StructuredAnnotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_location_(nullptr)
  , _oneof_case_{}{}
struct StructuredAnnotationDefaultTypeInternal {
  constexpr StructuredAnnotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredAnnotationDefaultTypeInternal() {}
  union {
    StructuredAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredAnnotationDefaultTypeInternal _StructuredAnnotation_default_instance_;
constexpr SourceLocation::SourceLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_(0)
  , column_(0){}
struct SourceLocationDefaultTypeInternal {
  constexpr SourceLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SourceLocationDefaultTypeInternal() {}
  union {
    SourceLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
constexpr P4EnumTypeSpec_Member::P4EnumTypeSpec_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct P4EnumTypeSpec_MemberDefaultTypeInternal {
  constexpr P4EnumTypeSpec_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4EnumTypeSpec_MemberDefaultTypeInternal() {}
  union {
    P4EnumTypeSpec_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4EnumTypeSpec_MemberDefaultTypeInternal _P4EnumTypeSpec_Member_default_instance_;
constexpr P4EnumTypeSpec::P4EnumTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , annotations_()
  , structured_annotations_()
  , annotation_locations_(){}
struct P4EnumTypeSpecDefaultTypeInternal {
  constexpr P4EnumTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4EnumTypeSpecDefaultTypeInternal() {}
  union {
    P4EnumTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4EnumTypeSpecDefaultTypeInternal _P4EnumTypeSpec_default_instance_;
constexpr P4SerializableEnumTypeSpec_Member::P4SerializableEnumTypeSpec_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct P4SerializableEnumTypeSpec_MemberDefaultTypeInternal {
  constexpr P4SerializableEnumTypeSpec_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4SerializableEnumTypeSpec_MemberDefaultTypeInternal() {}
  union {
    P4SerializableEnumTypeSpec_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4SerializableEnumTypeSpec_MemberDefaultTypeInternal _P4SerializableEnumTypeSpec_Member_default_instance_;
constexpr P4SerializableEnumTypeSpec::P4SerializableEnumTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , underlying_type_(nullptr){}
struct P4SerializableEnumTypeSpecDefaultTypeInternal {
  constexpr P4SerializableEnumTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4SerializableEnumTypeSpecDefaultTypeInternal() {}
  union {
    P4SerializableEnumTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4SerializableEnumTypeSpecDefaultTypeInternal _P4SerializableEnumTypeSpec_default_instance_;
constexpr P4ErrorTypeSpec::P4ErrorTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_(){}
struct P4ErrorTypeSpecDefaultTypeInternal {
  constexpr P4ErrorTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4ErrorTypeSpecDefaultTypeInternal() {}
  union {
    P4ErrorTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4ErrorTypeSpecDefaultTypeInternal _P4ErrorTypeSpec_default_instance_;
constexpr P4NewTypeTranslation_SdnString::P4NewTypeTranslation_SdnString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4NewTypeTranslation_SdnStringDefaultTypeInternal {
  constexpr P4NewTypeTranslation_SdnStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4NewTypeTranslation_SdnStringDefaultTypeInternal() {}
  union {
    P4NewTypeTranslation_SdnString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4NewTypeTranslation_SdnStringDefaultTypeInternal _P4NewTypeTranslation_SdnString_default_instance_;
constexpr P4NewTypeTranslation::P4NewTypeTranslation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct P4NewTypeTranslationDefaultTypeInternal {
  constexpr P4NewTypeTranslationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4NewTypeTranslationDefaultTypeInternal() {}
  union {
    P4NewTypeTranslation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4NewTypeTranslationDefaultTypeInternal _P4NewTypeTranslation_default_instance_;
constexpr P4NewTypeSpec::P4NewTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , _oneof_case_{}{}
struct P4NewTypeSpecDefaultTypeInternal {
  constexpr P4NewTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4NewTypeSpecDefaultTypeInternal() {}
  union {
    P4NewTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4NewTypeSpecDefaultTypeInternal _P4NewTypeSpec_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace p4
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[38];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4types_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p4_2fconfig_2fv1_2fp4types_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, structs_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, headers_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, header_unions_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, enums_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, error_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, serializable_enums_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TypeInfo, new_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4DataTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4DataTypeSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4DataTypeSpec, type_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NamedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NamedType, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BoolType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4ErrorType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, structured_annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitstringLikeTypeSpec, type_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4BitTypeSpec, bitwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4IntTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4IntTypeSpec, bitwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4VarbitTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4VarbitTypeSpec, max_bitwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TupleTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4TupleTypeSpec, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec_Member, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec_Member, type_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec, members_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4StructTypeSpec, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec_Member, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec_Member, type_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec, members_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderTypeSpec, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec_Member, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec_Member, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec, members_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionTypeSpec, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderStackTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderStackTypeSpec, header_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderStackTypeSpec, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionStackTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionStackTypeSpec, header_union_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4HeaderUnionStackTypeSpec, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::KeyValuePairList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::KeyValuePairList, kv_pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Expression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Expression, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ExpressionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ExpressionList, expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::StructuredAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::StructuredAnnotation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::StructuredAnnotation, name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::StructuredAnnotation, source_location_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::StructuredAnnotation, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::SourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::SourceLocation, file_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::SourceLocation, line_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::SourceLocation, column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec_Member, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec_Member, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec_Member, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec_Member, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec, members_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4EnumTypeSpec, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, value_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec_Member, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, underlying_type_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, members_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4SerializableEnumTypeSpec, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4ErrorTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4ErrorTypeSpec, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeTranslation_SdnString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeTranslation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeTranslation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeTranslation, uri_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeTranslation, sdn_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, structured_annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4NewTypeSpec, representation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse)},
  { 50, 58, -1, sizeof(::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse)},
  { 60, -1, -1, sizeof(::p4::config::v1::P4TypeInfo)},
  { 73, -1, -1, sizeof(::p4::config::v1::P4DataTypeSpec)},
  { 92, -1, -1, sizeof(::p4::config::v1::P4NamedType)},
  { 99, -1, -1, sizeof(::p4::config::v1::P4BoolType)},
  { 105, -1, -1, sizeof(::p4::config::v1::P4ErrorType)},
  { 111, -1, -1, sizeof(::p4::config::v1::P4BitstringLikeTypeSpec)},
  { 124, -1, -1, sizeof(::p4::config::v1::P4BitTypeSpec)},
  { 131, -1, -1, sizeof(::p4::config::v1::P4IntTypeSpec)},
  { 138, -1, -1, sizeof(::p4::config::v1::P4VarbitTypeSpec)},
  { 145, -1, -1, sizeof(::p4::config::v1::P4TupleTypeSpec)},
  { 152, -1, -1, sizeof(::p4::config::v1::P4StructTypeSpec_Member)},
  { 160, -1, -1, sizeof(::p4::config::v1::P4StructTypeSpec)},
  { 170, -1, -1, sizeof(::p4::config::v1::P4HeaderTypeSpec_Member)},
  { 178, -1, -1, sizeof(::p4::config::v1::P4HeaderTypeSpec)},
  { 188, -1, -1, sizeof(::p4::config::v1::P4HeaderUnionTypeSpec_Member)},
  { 196, -1, -1, sizeof(::p4::config::v1::P4HeaderUnionTypeSpec)},
  { 206, -1, -1, sizeof(::p4::config::v1::P4HeaderStackTypeSpec)},
  { 214, -1, -1, sizeof(::p4::config::v1::P4HeaderUnionStackTypeSpec)},
  { 222, -1, -1, sizeof(::p4::config::v1::KeyValuePair)},
  { 230, -1, -1, sizeof(::p4::config::v1::KeyValuePairList)},
  { 237, -1, -1, sizeof(::p4::config::v1::Expression)},
  { 247, -1, -1, sizeof(::p4::config::v1::ExpressionList)},
  { 254, -1, -1, sizeof(::p4::config::v1::StructuredAnnotation)},
  { 265, -1, -1, sizeof(::p4::config::v1::SourceLocation)},
  { 274, -1, -1, sizeof(::p4::config::v1::P4EnumTypeSpec_Member)},
  { 284, -1, -1, sizeof(::p4::config::v1::P4EnumTypeSpec)},
  { 294, -1, -1, sizeof(::p4::config::v1::P4SerializableEnumTypeSpec_Member)},
  { 305, -1, -1, sizeof(::p4::config::v1::P4SerializableEnumTypeSpec)},
  { 316, -1, -1, sizeof(::p4::config::v1::P4ErrorTypeSpec)},
  { 323, -1, -1, sizeof(::p4::config::v1::P4NewTypeTranslation_SdnString)},
  { 329, -1, -1, sizeof(::p4::config::v1::P4NewTypeTranslation)},
  { 339, -1, -1, sizeof(::p4::config::v1::P4NewTypeSpec)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_StructsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_HeaderUnionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_EnumsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_SerializableEnumsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_NewTypesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4DataTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4NamedType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4BoolType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4ErrorType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4BitstringLikeTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4BitTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4IntTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4VarbitTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4TupleTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4StructTypeSpec_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4StructTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderTypeSpec_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderUnionTypeSpec_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderUnionTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderStackTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4HeaderUnionStackTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_KeyValuePairList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ExpressionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_StructuredAnnotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_SourceLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4EnumTypeSpec_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4EnumTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4SerializableEnumTypeSpec_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4SerializableEnumTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4ErrorTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4NewTypeTranslation_SdnString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4NewTypeTranslation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4NewTypeSpec_default_instance_),
};

const char descriptor_table_protodef_p4_2fconfig_2fv1_2fp4types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032p4/config/v1/p4types.proto\022\014p4.config."
  "v1\"\241\007\n\nP4TypeInfo\0226\n\007structs\030\001 \003(\0132%.p4."
  "config.v1.P4TypeInfo.StructsEntry\0226\n\007hea"
  "ders\030\002 \003(\0132%.p4.config.v1.P4TypeInfo.Hea"
  "dersEntry\022A\n\rheader_unions\030\003 \003(\0132*.p4.co"
  "nfig.v1.P4TypeInfo.HeaderUnionsEntry\0222\n\005"
  "enums\030\004 \003(\0132#.p4.config.v1.P4TypeInfo.En"
  "umsEntry\022,\n\005error\030\005 \001(\0132\035.p4.config.v1.P"
  "4ErrorTypeSpec\022K\n\022serializable_enums\030\006 \003"
  "(\0132/.p4.config.v1.P4TypeInfo.Serializabl"
  "eEnumsEntry\0229\n\tnew_types\030\007 \003(\0132&.p4.conf"
  "ig.v1.P4TypeInfo.NewTypesEntry\032N\n\014Struct"
  "sEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.p4."
  "config.v1.P4StructTypeSpec:\0028\001\032N\n\014Header"
  "sEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.p4."
  "config.v1.P4HeaderTypeSpec:\0028\001\032X\n\021Header"
  "UnionsEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132"
  "#.p4.config.v1.P4HeaderUnionTypeSpec:\0028\001"
  "\032J\n\nEnumsEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001"
  "(\0132\034.p4.config.v1.P4EnumTypeSpec:\0028\001\032b\n\026"
  "SerializableEnumsEntry\022\013\n\003key\030\001 \001(\t\0227\n\005v"
  "alue\030\002 \001(\0132(.p4.config.v1.P4Serializable"
  "EnumTypeSpec:\0028\001\032L\n\rNewTypesEntry\022\013\n\003key"
  "\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.p4.config.v1.P4N"
  "ewTypeSpec:\0028\001\"\203\005\n\016P4DataTypeSpec\022:\n\tbit"
  "string\030\001 \001(\0132%.p4.config.v1.P4BitstringL"
  "ikeTypeSpecH\000\022(\n\004bool\030\002 \001(\0132\030.p4.config."
  "v1.P4BoolTypeH\000\022.\n\005tuple\030\003 \001(\0132\035.p4.conf"
  "ig.v1.P4TupleTypeSpecH\000\022+\n\006struct\030\004 \001(\0132"
  "\031.p4.config.v1.P4NamedTypeH\000\022+\n\006header\030\005"
  " \001(\0132\031.p4.config.v1.P4NamedTypeH\000\0221\n\014hea"
  "der_union\030\006 \001(\0132\031.p4.config.v1.P4NamedTy"
  "peH\000\022;\n\014header_stack\030\007 \001(\0132#.p4.config.v"
  "1.P4HeaderStackTypeSpecH\000\022F\n\022header_unio"
  "n_stack\030\010 \001(\0132(.p4.config.v1.P4HeaderUni"
  "onStackTypeSpecH\000\022)\n\004enum\030\t \001(\0132\031.p4.con"
  "fig.v1.P4NamedTypeH\000\022*\n\005error\030\n \001(\0132\031.p4"
  ".config.v1.P4ErrorTypeH\000\0226\n\021serializable"
  "_enum\030\013 \001(\0132\031.p4.config.v1.P4NamedTypeH\000"
  "\022-\n\010new_type\030\014 \001(\0132\031.p4.config.v1.P4Name"
  "dTypeH\000B\013\n\ttype_spec\"\033\n\013P4NamedType\022\014\n\004n"
  "ame\030\001 \001(\t\"\014\n\nP4BoolType\"\r\n\013P4ErrorType\"\305"
  "\002\n\027P4BitstringLikeTypeSpec\022*\n\003bit\030\001 \001(\0132"
  "\033.p4.config.v1.P4BitTypeSpecH\000\022*\n\003int\030\002 "
  "\001(\0132\033.p4.config.v1.P4IntTypeSpecH\000\0220\n\006va"
  "rbit\030\003 \001(\0132\036.p4.config.v1.P4VarbitTypeSp"
  "ecH\000\022\023\n\013annotations\030\004 \003(\t\022:\n\024annotation_"
  "locations\030\005 \003(\0132\034.p4.config.v1.SourceLoc"
  "ation\022B\n\026structured_annotations\030\006 \003(\0132\"."
  "p4.config.v1.StructuredAnnotationB\013\n\ttyp"
  "e_spec\"!\n\rP4BitTypeSpec\022\020\n\010bitwidth\030\001 \001("
  "\005\"!\n\rP4IntTypeSpec\022\020\n\010bitwidth\030\001 \001(\005\"(\n\020"
  "P4VarbitTypeSpec\022\024\n\014max_bitwidth\030\001 \001(\005\"@"
  "\n\017P4TupleTypeSpec\022-\n\007members\030\001 \003(\0132\034.p4."
  "config.v1.P4DataTypeSpec\"\250\002\n\020P4StructTyp"
  "eSpec\0226\n\007members\030\001 \003(\0132%.p4.config.v1.P4"
  "StructTypeSpec.Member\022\023\n\013annotations\030\002 \003"
  "(\t\022:\n\024annotation_locations\030\003 \003(\0132\034.p4.co"
  "nfig.v1.SourceLocation\022B\n\026structured_ann"
  "otations\030\004 \003(\0132\".p4.config.v1.Structured"
  "Annotation\032G\n\006Member\022\014\n\004name\030\001 \001(\t\022/\n\tty"
  "pe_spec\030\002 \001(\0132\034.p4.config.v1.P4DataTypeS"
  "pec\"\261\002\n\020P4HeaderTypeSpec\0226\n\007members\030\001 \003("
  "\0132%.p4.config.v1.P4HeaderTypeSpec.Member"
  "\022\023\n\013annotations\030\002 \003(\t\022:\n\024annotation_loca"
  "tions\030\003 \003(\0132\034.p4.config.v1.SourceLocatio"
  "n\022B\n\026structured_annotations\030\004 \003(\0132\".p4.c"
  "onfig.v1.StructuredAnnotation\032P\n\006Member\022"
  "\014\n\004name\030\001 \001(\t\0228\n\ttype_spec\030\002 \001(\0132%.p4.co"
  "nfig.v1.P4BitstringLikeTypeSpec\"\254\002\n\025P4He"
  "aderUnionTypeSpec\022;\n\007members\030\001 \003(\0132*.p4."
  "config.v1.P4HeaderUnionTypeSpec.Member\022\023"
  "\n\013annotations\030\002 \003(\t\022:\n\024annotation_locati"
  "ons\030\003 \003(\0132\034.p4.config.v1.SourceLocation\022"
  "B\n\026structured_annotations\030\004 \003(\0132\".p4.con"
  "fig.v1.StructuredAnnotation\032A\n\006Member\022\014\n"
  "\004name\030\001 \001(\t\022)\n\006header\030\002 \001(\0132\031.p4.config."
  "v1.P4NamedType\"P\n\025P4HeaderStackTypeSpec\022"
  ")\n\006header\030\001 \001(\0132\031.p4.config.v1.P4NamedTy"
  "pe\022\014\n\004size\030\002 \001(\005\"[\n\032P4HeaderUnionStackTy"
  "peSpec\022/\n\014header_union\030\001 \001(\0132\031.p4.config"
  ".v1.P4NamedType\022\014\n\004size\030\002 \001(\005\"D\n\014KeyValu"
  "ePair\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.p4.c"
  "onfig.v1.Expression\"@\n\020KeyValuePairList\022"
  ",\n\010kv_pairs\030\001 \003(\0132\032.p4.config.v1.KeyValu"
  "ePair\"Z\n\nExpression\022\026\n\014string_value\030\001 \001("
  "\tH\000\022\025\n\013int64_value\030\002 \001(\003H\000\022\024\n\nbool_value"
  "\030\003 \001(\010H\000B\007\n\005value\"\?\n\016ExpressionList\022-\n\013e"
  "xpressions\030\001 \003(\0132\030.p4.config.v1.Expressi"
  "on\"\324\001\n\024StructuredAnnotation\022\014\n\004name\030\001 \001("
  "\t\0227\n\017expression_list\030\002 \001(\0132\034.p4.config.v"
  "1.ExpressionListH\000\0226\n\014kv_pair_list\030\003 \001(\013"
  "2\036.p4.config.v1.KeyValuePairListH\000\0225\n\017so"
  "urce_location\030\004 \001(\0132\034.p4.config.v1.Sourc"
  "eLocationB\006\n\004body\"<\n\016SourceLocation\022\014\n\004f"
  "ile\030\001 \001(\t\022\014\n\004line\030\002 \001(\005\022\016\n\006column\030\003 \001(\005\""
  "\211\003\n\016P4EnumTypeSpec\0224\n\007members\030\001 \003(\0132#.p4"
  ".config.v1.P4EnumTypeSpec.Member\022\023\n\013anno"
  "tations\030\002 \003(\t\022:\n\024annotation_locations\030\004 "
  "\003(\0132\034.p4.config.v1.SourceLocation\022B\n\026str"
  "uctured_annotations\030\003 \003(\0132\".p4.config.v1"
  ".StructuredAnnotation\032\253\001\n\006Member\022\014\n\004name"
  "\030\001 \001(\t\022\023\n\013annotations\030\002 \003(\t\022:\n\024annotatio"
  "n_locations\030\004 \003(\0132\034.p4.config.v1.SourceL"
  "ocation\022B\n\026structured_annotations\030\003 \003(\0132"
  "\".p4.config.v1.StructuredAnnotation\"\346\003\n\032"
  "P4SerializableEnumTypeSpec\0224\n\017underlying"
  "_type\030\001 \001(\0132\033.p4.config.v1.P4BitTypeSpec"
  "\022@\n\007members\030\002 \003(\0132/.p4.config.v1.P4Seria"
  "lizableEnumTypeSpec.Member\022\023\n\013annotation"
  "s\030\003 \003(\t\022:\n\024annotation_locations\030\005 \003(\0132\034."
  "p4.config.v1.SourceLocation\022B\n\026structure"
  "d_annotations\030\004 \003(\0132\".p4.config.v1.Struc"
  "turedAnnotation\032\272\001\n\006Member\022\014\n\004name\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\014\022\023\n\013annotations\030\003 \003(\t\022:\n\024"
  "annotation_locations\030\005 \003(\0132\034.p4.config.v"
  "1.SourceLocation\022B\n\026structured_annotatio"
  "ns\030\004 \003(\0132\".p4.config.v1.StructuredAnnota"
  "tion\"\"\n\017P4ErrorTypeSpec\022\017\n\007members\030\001 \003(\t"
  "\"\230\001\n\024P4NewTypeTranslation\022\013\n\003uri\030\001 \001(\t\022\026"
  "\n\014sdn_bitwidth\030\002 \001(\005H\000\022B\n\nsdn_string\030\003 \001"
  "(\0132,.p4.config.v1.P4NewTypeTranslation.S"
  "dnStringH\000\032\013\n\tSdnStringB\n\n\010sdn_type\"\254\002\n\r"
  "P4NewTypeSpec\0225\n\roriginal_type\030\001 \001(\0132\034.p"
  "4.config.v1.P4DataTypeSpecH\000\022=\n\017translat"
  "ed_type\030\002 \001(\0132\".p4.config.v1.P4NewTypeTr"
  "anslationH\000\022\023\n\013annotations\030\003 \003(\t\022:\n\024anno"
  "tation_locations\030\005 \003(\0132\034.p4.config.v1.So"
  "urceLocation\022B\n\026structured_annotations\030\004"
  " \003(\0132\".p4.config.v1.StructuredAnnotation"
  "B\020\n\016representationB-Z+github.com/p4lang/"
  "p4runtime/go/p4/config/v1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto = {
  false, false, 5273, descriptor_table_protodef_p4_2fconfig_2fv1_2fp4types_2eproto, "p4/config/v1/p4types.proto", 
  &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once, nullptr, 0, 38,
  schemas, file_default_instances, TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto::offsets,
  file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto, file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4types_2eproto, file_level_service_descriptors_p4_2fconfig_2fv1_2fp4types_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter() {
  return &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p4_2fconfig_2fv1_2fp4types_2eproto(&descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto);
namespace p4 {
namespace config {
namespace v1 {

// ===================================================================

P4TypeInfo_StructsEntry_DoNotUse::P4TypeInfo_StructsEntry_DoNotUse() {}
P4TypeInfo_StructsEntry_DoNotUse::P4TypeInfo_StructsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_StructsEntry_DoNotUse::MergeFrom(const P4TypeInfo_StructsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_StructsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[0]);
}

// ===================================================================

P4TypeInfo_HeadersEntry_DoNotUse::P4TypeInfo_HeadersEntry_DoNotUse() {}
P4TypeInfo_HeadersEntry_DoNotUse::P4TypeInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_HeadersEntry_DoNotUse::MergeFrom(const P4TypeInfo_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[1]);
}

// ===================================================================

P4TypeInfo_HeaderUnionsEntry_DoNotUse::P4TypeInfo_HeaderUnionsEntry_DoNotUse() {}
P4TypeInfo_HeaderUnionsEntry_DoNotUse::P4TypeInfo_HeaderUnionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_HeaderUnionsEntry_DoNotUse::MergeFrom(const P4TypeInfo_HeaderUnionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_HeaderUnionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[2]);
}

// ===================================================================

P4TypeInfo_EnumsEntry_DoNotUse::P4TypeInfo_EnumsEntry_DoNotUse() {}
P4TypeInfo_EnumsEntry_DoNotUse::P4TypeInfo_EnumsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_EnumsEntry_DoNotUse::MergeFrom(const P4TypeInfo_EnumsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_EnumsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[3]);
}

// ===================================================================

P4TypeInfo_SerializableEnumsEntry_DoNotUse::P4TypeInfo_SerializableEnumsEntry_DoNotUse() {}
P4TypeInfo_SerializableEnumsEntry_DoNotUse::P4TypeInfo_SerializableEnumsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_SerializableEnumsEntry_DoNotUse::MergeFrom(const P4TypeInfo_SerializableEnumsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_SerializableEnumsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[4]);
}

// ===================================================================

P4TypeInfo_NewTypesEntry_DoNotUse::P4TypeInfo_NewTypesEntry_DoNotUse() {}
P4TypeInfo_NewTypesEntry_DoNotUse::P4TypeInfo_NewTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void P4TypeInfo_NewTypesEntry_DoNotUse::MergeFrom(const P4TypeInfo_NewTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo_NewTypesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[5]);
}

// ===================================================================

class P4TypeInfo::_Internal {
 public:
  static const ::p4::config::v1::P4ErrorTypeSpec& error(const P4TypeInfo* msg);
};

const ::p4::config::v1::P4ErrorTypeSpec&
P4TypeInfo::_Internal::error(const P4TypeInfo* msg) {
  return *msg->error_;
}
P4TypeInfo::P4TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  structs_(arena),
  headers_(arena),
  header_unions_(arena),
  enums_(arena),
  serializable_enums_(arena),
  new_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4TypeInfo)
}
P4TypeInfo::P4TypeInfo(const P4TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  structs_.MergeFrom(from.structs_);
  headers_.MergeFrom(from.headers_);
  header_unions_.MergeFrom(from.header_unions_);
  enums_.MergeFrom(from.enums_);
  serializable_enums_.MergeFrom(from.serializable_enums_);
  new_types_.MergeFrom(from.new_types_);
  if (from._internal_has_error()) {
    error_ = new ::p4::config::v1::P4ErrorTypeSpec(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4TypeInfo)
}

void P4TypeInfo::SharedCtor() {
error_ = nullptr;
}

P4TypeInfo::~P4TypeInfo() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4TypeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void P4TypeInfo::ArenaDtor(void* object) {
  P4TypeInfo* _this = reinterpret_cast< P4TypeInfo* >(object);
  (void)_this;
  _this->structs_. ~MapField();
  _this->headers_. ~MapField();
  _this->header_unions_. ~MapField();
  _this->enums_. ~MapField();
  _this->serializable_enums_. ~MapField();
  _this->new_types_. ~MapField();
}
inline void P4TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &P4TypeInfo::ArenaDtor);
  }
}
void P4TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  structs_.Clear();
  headers_.Clear();
  header_unions_.Clear();
  enums_.Clear();
  serializable_enums_.Clear();
  new_types_.Clear();
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .p4.config.v1.P4StructTypeSpec> structs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&structs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .p4.config.v1.P4HeaderTypeSpec> headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .p4.config.v1.P4HeaderUnionTypeSpec> header_unions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&header_unions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .p4.config.v1.P4EnumTypeSpec> enums = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&enums_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4ErrorTypeSpec error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .p4.config.v1.P4SerializableEnumTypeSpec> serializable_enums = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&serializable_enums_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .p4.config.v1.P4NewTypeSpec> new_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&new_types_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .p4.config.v1.P4StructTypeSpec> structs = 1;
  if (!this->_internal_structs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.StructsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_structs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_structs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >::const_iterator
          it = this->_internal_structs().begin();
          it != this->_internal_structs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_StructsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >::const_iterator
          it = this->_internal_structs().begin();
          it != this->_internal_structs().end(); ++it) {
        target = P4TypeInfo_StructsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .p4.config.v1.P4HeaderTypeSpec> headers = 2;
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.HeadersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_HeadersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = P4TypeInfo_HeadersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .p4.config.v1.P4HeaderUnionTypeSpec> header_unions = 3;
  if (!this->_internal_header_unions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.HeaderUnionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_header_unions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_header_unions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >::const_iterator
          it = this->_internal_header_unions().begin();
          it != this->_internal_header_unions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_HeaderUnionsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >::const_iterator
          it = this->_internal_header_unions().begin();
          it != this->_internal_header_unions().end(); ++it) {
        target = P4TypeInfo_HeaderUnionsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .p4.config.v1.P4EnumTypeSpec> enums = 4;
  if (!this->_internal_enums().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.EnumsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_enums().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_enums().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >::const_iterator
          it = this->_internal_enums().begin();
          it != this->_internal_enums().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_EnumsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >::const_iterator
          it = this->_internal_enums().begin();
          it != this->_internal_enums().end(); ++it) {
        target = P4TypeInfo_EnumsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .p4.config.v1.P4ErrorTypeSpec error = 5;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::error(this), target, stream);
  }

  // map<string, .p4.config.v1.P4SerializableEnumTypeSpec> serializable_enums = 6;
  if (!this->_internal_serializable_enums().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.SerializableEnumsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_serializable_enums().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_serializable_enums().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >::const_iterator
          it = this->_internal_serializable_enums().begin();
          it != this->_internal_serializable_enums().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_SerializableEnumsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >::const_iterator
          it = this->_internal_serializable_enums().begin();
          it != this->_internal_serializable_enums().end(); ++it) {
        target = P4TypeInfo_SerializableEnumsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .p4.config.v1.P4NewTypeSpec> new_types = 7;
  if (!this->_internal_new_types().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "p4.config.v1.P4TypeInfo.NewTypesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_new_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_new_types().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >::const_iterator
          it = this->_internal_new_types().begin();
          it != this->_internal_new_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = P4TypeInfo_NewTypesEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >::const_iterator
          it = this->_internal_new_types().begin();
          it != this->_internal_new_types().end(); ++it) {
        target = P4TypeInfo_NewTypesEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4TypeInfo)
  return target;
}

size_t P4TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .p4.config.v1.P4StructTypeSpec> structs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_structs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >::const_iterator
      it = this->_internal_structs().begin();
      it != this->_internal_structs().end(); ++it) {
    total_size += P4TypeInfo_StructsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .p4.config.v1.P4HeaderTypeSpec> headers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += P4TypeInfo_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .p4.config.v1.P4HeaderUnionTypeSpec> header_unions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_header_unions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >::const_iterator
      it = this->_internal_header_unions().begin();
      it != this->_internal_header_unions().end(); ++it) {
    total_size += P4TypeInfo_HeaderUnionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .p4.config.v1.P4EnumTypeSpec> enums = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enums_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >::const_iterator
      it = this->_internal_enums().begin();
      it != this->_internal_enums().end(); ++it) {
    total_size += P4TypeInfo_EnumsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .p4.config.v1.P4SerializableEnumTypeSpec> serializable_enums = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_serializable_enums_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >::const_iterator
      it = this->_internal_serializable_enums().begin();
      it != this->_internal_serializable_enums().end(); ++it) {
    total_size += P4TypeInfo_SerializableEnumsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .p4.config.v1.P4NewTypeSpec> new_types = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_new_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >::const_iterator
      it = this->_internal_new_types().begin();
      it != this->_internal_new_types().end(); ++it) {
    total_size += P4TypeInfo_NewTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .p4.config.v1.P4ErrorTypeSpec error = 5;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4TypeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4TypeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4TypeInfo::GetClassData() const { return &_class_data_; }

void P4TypeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4TypeInfo *>(to)->MergeFrom(
      static_cast<const P4TypeInfo &>(from));
}


void P4TypeInfo::MergeFrom(const P4TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  structs_.MergeFrom(from.structs_);
  headers_.MergeFrom(from.headers_);
  header_unions_.MergeFrom(from.header_unions_);
  enums_.MergeFrom(from.enums_);
  serializable_enums_.MergeFrom(from.serializable_enums_);
  new_types_.MergeFrom(from.new_types_);
  if (from._internal_has_error()) {
    _internal_mutable_error()->::p4::config::v1::P4ErrorTypeSpec::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4TypeInfo::CopyFrom(const P4TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4TypeInfo::IsInitialized() const {
  return true;
}

void P4TypeInfo::InternalSwap(P4TypeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  structs_.InternalSwap(&other->structs_);
  headers_.InternalSwap(&other->headers_);
  header_unions_.InternalSwap(&other->header_unions_);
  enums_.InternalSwap(&other->enums_);
  serializable_enums_.InternalSwap(&other->serializable_enums_);
  new_types_.InternalSwap(&other->new_types_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4TypeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[6]);
}

// ===================================================================

class P4DataTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4BitstringLikeTypeSpec& bitstring(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4BoolType& bool_(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4TupleTypeSpec& tuple(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& struct_(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& header(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& header_union(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4HeaderStackTypeSpec& header_stack(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4HeaderUnionStackTypeSpec& header_union_stack(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& enum_(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4ErrorType& error(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& serializable_enum(const P4DataTypeSpec* msg);
  static const ::p4::config::v1::P4NamedType& new_type(const P4DataTypeSpec* msg);
};

const ::p4::config::v1::P4BitstringLikeTypeSpec&
P4DataTypeSpec::_Internal::bitstring(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.bitstring_;
}
const ::p4::config::v1::P4BoolType&
P4DataTypeSpec::_Internal::bool_(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.bool__;
}
const ::p4::config::v1::P4TupleTypeSpec&
P4DataTypeSpec::_Internal::tuple(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.tuple_;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::struct_(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.struct__;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::header(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.header_;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::header_union(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.header_union_;
}
const ::p4::config::v1::P4HeaderStackTypeSpec&
P4DataTypeSpec::_Internal::header_stack(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.header_stack_;
}
const ::p4::config::v1::P4HeaderUnionStackTypeSpec&
P4DataTypeSpec::_Internal::header_union_stack(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.header_union_stack_;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::enum_(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.enum__;
}
const ::p4::config::v1::P4ErrorType&
P4DataTypeSpec::_Internal::error(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.error_;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::serializable_enum(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.serializable_enum_;
}
const ::p4::config::v1::P4NamedType&
P4DataTypeSpec::_Internal::new_type(const P4DataTypeSpec* msg) {
  return *msg->type_spec_.new_type_;
}
void P4DataTypeSpec::set_allocated_bitstring(::p4::config::v1::P4BitstringLikeTypeSpec* bitstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (bitstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4BitstringLikeTypeSpec>::GetOwningArena(bitstring);
    if (message_arena != submessage_arena) {
      bitstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitstring, submessage_arena);
    }
    set_has_bitstring();
    type_spec_.bitstring_ = bitstring;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.bitstring)
}
void P4DataTypeSpec::set_allocated_bool_(::p4::config::v1::P4BoolType* bool_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (bool_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4BoolType>::GetOwningArena(bool_);
    if (message_arena != submessage_arena) {
      bool_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_, submessage_arena);
    }
    set_has_bool_();
    type_spec_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.bool)
}
void P4DataTypeSpec::set_allocated_tuple(::p4::config::v1::P4TupleTypeSpec* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4TupleTypeSpec>::GetOwningArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    type_spec_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.tuple)
}
void P4DataTypeSpec::set_allocated_struct_(::p4::config::v1::P4NamedType* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    type_spec_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.struct)
}
void P4DataTypeSpec::set_allocated_header(::p4::config::v1::P4NamedType* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    type_spec_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.header)
}
void P4DataTypeSpec::set_allocated_header_union(::p4::config::v1::P4NamedType* header_union) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (header_union) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(header_union);
    if (message_arena != submessage_arena) {
      header_union = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_union, submessage_arena);
    }
    set_has_header_union();
    type_spec_.header_union_ = header_union;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.header_union)
}
void P4DataTypeSpec::set_allocated_header_stack(::p4::config::v1::P4HeaderStackTypeSpec* header_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (header_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4HeaderStackTypeSpec>::GetOwningArena(header_stack);
    if (message_arena != submessage_arena) {
      header_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_stack, submessage_arena);
    }
    set_has_header_stack();
    type_spec_.header_stack_ = header_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.header_stack)
}
void P4DataTypeSpec::set_allocated_header_union_stack(::p4::config::v1::P4HeaderUnionStackTypeSpec* header_union_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (header_union_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4HeaderUnionStackTypeSpec>::GetOwningArena(header_union_stack);
    if (message_arena != submessage_arena) {
      header_union_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_union_stack, submessage_arena);
    }
    set_has_header_union_stack();
    type_spec_.header_union_stack_ = header_union_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.header_union_stack)
}
void P4DataTypeSpec::set_allocated_enum_(::p4::config::v1::P4NamedType* enum_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (enum_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(enum_);
    if (message_arena != submessage_arena) {
      enum_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    type_spec_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.enum)
}
void P4DataTypeSpec::set_allocated_error(::p4::config::v1::P4ErrorType* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4ErrorType>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    type_spec_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.error)
}
void P4DataTypeSpec::set_allocated_serializable_enum(::p4::config::v1::P4NamedType* serializable_enum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (serializable_enum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(serializable_enum);
    if (message_arena != submessage_arena) {
      serializable_enum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serializable_enum, submessage_arena);
    }
    set_has_serializable_enum();
    type_spec_.serializable_enum_ = serializable_enum;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.serializable_enum)
}
void P4DataTypeSpec::set_allocated_new_type(::p4::config::v1::P4NamedType* new_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (new_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(new_type);
    if (message_arena != submessage_arena) {
      new_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_type, submessage_arena);
    }
    set_has_new_type();
    type_spec_.new_type_ = new_type;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4DataTypeSpec.new_type)
}
P4DataTypeSpec::P4DataTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4DataTypeSpec)
}
P4DataTypeSpec::P4DataTypeSpec(const P4DataTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type_spec();
  switch (from.type_spec_case()) {
    case kBitstring: {
      _internal_mutable_bitstring()->::p4::config::v1::P4BitstringLikeTypeSpec::MergeFrom(from._internal_bitstring());
      break;
    }
    case kBool: {
      _internal_mutable_bool_()->::p4::config::v1::P4BoolType::MergeFrom(from._internal_bool_());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::p4::config::v1::P4TupleTypeSpec::MergeFrom(from._internal_tuple());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_struct_());
      break;
    }
    case kHeader: {
      _internal_mutable_header()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header());
      break;
    }
    case kHeaderUnion: {
      _internal_mutable_header_union()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header_union());
      break;
    }
    case kHeaderStack: {
      _internal_mutable_header_stack()->::p4::config::v1::P4HeaderStackTypeSpec::MergeFrom(from._internal_header_stack());
      break;
    }
    case kHeaderUnionStack: {
      _internal_mutable_header_union_stack()->::p4::config::v1::P4HeaderUnionStackTypeSpec::MergeFrom(from._internal_header_union_stack());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_enum_());
      break;
    }
    case kError: {
      _internal_mutable_error()->::p4::config::v1::P4ErrorType::MergeFrom(from._internal_error());
      break;
    }
    case kSerializableEnum: {
      _internal_mutable_serializable_enum()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_serializable_enum());
      break;
    }
    case kNewType: {
      _internal_mutable_new_type()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_new_type());
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4DataTypeSpec)
}

void P4DataTypeSpec::SharedCtor() {
clear_has_type_spec();
}

P4DataTypeSpec::~P4DataTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4DataTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4DataTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type_spec()) {
    clear_type_spec();
  }
}

void P4DataTypeSpec::ArenaDtor(void* object) {
  P4DataTypeSpec* _this = reinterpret_cast< P4DataTypeSpec* >(object);
  (void)_this;
}
void P4DataTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4DataTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4DataTypeSpec::clear_type_spec() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.P4DataTypeSpec)
  switch (type_spec_case()) {
    case kBitstring: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.bitstring_;
      }
      break;
    }
    case kBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.bool__;
      }
      break;
    }
    case kTuple: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.tuple_;
      }
      break;
    }
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.struct__;
      }
      break;
    }
    case kHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.header_;
      }
      break;
    }
    case kHeaderUnion: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.header_union_;
      }
      break;
    }
    case kHeaderStack: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.header_stack_;
      }
      break;
    }
    case kHeaderUnionStack: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.header_union_stack_;
      }
      break;
    }
    case kEnum: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.enum__;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.error_;
      }
      break;
    }
    case kSerializableEnum: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.serializable_enum_;
      }
      break;
    }
    case kNewType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.new_type_;
      }
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_SPEC_NOT_SET;
}


void P4DataTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4DataTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type_spec();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4DataTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4BitstringLikeTypeSpec bitstring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitstring(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4BoolType bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4TupleTypeSpec tuple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType struct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType header_union = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_union(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4HeaderStackTypeSpec header_stack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4HeaderUnionStackTypeSpec header_union_stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_union_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType enum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4ErrorType error = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType serializable_enum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_serializable_enum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType new_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4DataTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4DataTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4BitstringLikeTypeSpec bitstring = 1;
  if (_internal_has_bitstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bitstring(this), target, stream);
  }

  // .p4.config.v1.P4BoolType bool = 2;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bool_(this), target, stream);
  }

  // .p4.config.v1.P4TupleTypeSpec tuple = 3;
  if (_internal_has_tuple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tuple(this), target, stream);
  }

  // .p4.config.v1.P4NamedType struct = 4;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::struct_(this), target, stream);
  }

  // .p4.config.v1.P4NamedType header = 5;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::header(this), target, stream);
  }

  // .p4.config.v1.P4NamedType header_union = 6;
  if (_internal_has_header_union()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::header_union(this), target, stream);
  }

  // .p4.config.v1.P4HeaderStackTypeSpec header_stack = 7;
  if (_internal_has_header_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::header_stack(this), target, stream);
  }

  // .p4.config.v1.P4HeaderUnionStackTypeSpec header_union_stack = 8;
  if (_internal_has_header_union_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::header_union_stack(this), target, stream);
  }

  // .p4.config.v1.P4NamedType enum = 9;
  if (_internal_has_enum_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::enum_(this), target, stream);
  }

  // .p4.config.v1.P4ErrorType error = 10;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::error(this), target, stream);
  }

  // .p4.config.v1.P4NamedType serializable_enum = 11;
  if (_internal_has_serializable_enum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::serializable_enum(this), target, stream);
  }

  // .p4.config.v1.P4NamedType new_type = 12;
  if (_internal_has_new_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::new_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4DataTypeSpec)
  return target;
}

size_t P4DataTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4DataTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_spec_case()) {
    // .p4.config.v1.P4BitstringLikeTypeSpec bitstring = 1;
    case kBitstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.bitstring_);
      break;
    }
    // .p4.config.v1.P4BoolType bool = 2;
    case kBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.bool__);
      break;
    }
    // .p4.config.v1.P4TupleTypeSpec tuple = 3;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.tuple_);
      break;
    }
    // .p4.config.v1.P4NamedType struct = 4;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.struct__);
      break;
    }
    // .p4.config.v1.P4NamedType header = 5;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.header_);
      break;
    }
    // .p4.config.v1.P4NamedType header_union = 6;
    case kHeaderUnion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.header_union_);
      break;
    }
    // .p4.config.v1.P4HeaderStackTypeSpec header_stack = 7;
    case kHeaderStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.header_stack_);
      break;
    }
    // .p4.config.v1.P4HeaderUnionStackTypeSpec header_union_stack = 8;
    case kHeaderUnionStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.header_union_stack_);
      break;
    }
    // .p4.config.v1.P4NamedType enum = 9;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.enum__);
      break;
    }
    // .p4.config.v1.P4ErrorType error = 10;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.error_);
      break;
    }
    // .p4.config.v1.P4NamedType serializable_enum = 11;
    case kSerializableEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.serializable_enum_);
      break;
    }
    // .p4.config.v1.P4NamedType new_type = 12;
    case kNewType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.new_type_);
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4DataTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4DataTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4DataTypeSpec::GetClassData() const { return &_class_data_; }

void P4DataTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4DataTypeSpec *>(to)->MergeFrom(
      static_cast<const P4DataTypeSpec &>(from));
}


void P4DataTypeSpec::MergeFrom(const P4DataTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4DataTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_spec_case()) {
    case kBitstring: {
      _internal_mutable_bitstring()->::p4::config::v1::P4BitstringLikeTypeSpec::MergeFrom(from._internal_bitstring());
      break;
    }
    case kBool: {
      _internal_mutable_bool_()->::p4::config::v1::P4BoolType::MergeFrom(from._internal_bool_());
      break;
    }
    case kTuple: {
      _internal_mutable_tuple()->::p4::config::v1::P4TupleTypeSpec::MergeFrom(from._internal_tuple());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_struct_());
      break;
    }
    case kHeader: {
      _internal_mutable_header()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header());
      break;
    }
    case kHeaderUnion: {
      _internal_mutable_header_union()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header_union());
      break;
    }
    case kHeaderStack: {
      _internal_mutable_header_stack()->::p4::config::v1::P4HeaderStackTypeSpec::MergeFrom(from._internal_header_stack());
      break;
    }
    case kHeaderUnionStack: {
      _internal_mutable_header_union_stack()->::p4::config::v1::P4HeaderUnionStackTypeSpec::MergeFrom(from._internal_header_union_stack());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_enum_());
      break;
    }
    case kError: {
      _internal_mutable_error()->::p4::config::v1::P4ErrorType::MergeFrom(from._internal_error());
      break;
    }
    case kSerializableEnum: {
      _internal_mutable_serializable_enum()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_serializable_enum());
      break;
    }
    case kNewType: {
      _internal_mutable_new_type()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_new_type());
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4DataTypeSpec::CopyFrom(const P4DataTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4DataTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4DataTypeSpec::IsInitialized() const {
  return true;
}

void P4DataTypeSpec::InternalSwap(P4DataTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_spec_, other->type_spec_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4DataTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[7]);
}

// ===================================================================

class P4NamedType::_Internal {
 public:
};

P4NamedType::P4NamedType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4NamedType)
}
P4NamedType::P4NamedType(const P4NamedType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4NamedType)
}

void P4NamedType::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

P4NamedType::~P4NamedType() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4NamedType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4NamedType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P4NamedType::ArenaDtor(void* object) {
  P4NamedType* _this = reinterpret_cast< P4NamedType* >(object);
  (void)_this;
}
void P4NamedType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4NamedType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4NamedType::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4NamedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4NamedType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4NamedType.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4NamedType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4NamedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4NamedType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4NamedType)
  return target;
}

size_t P4NamedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4NamedType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4NamedType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4NamedType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4NamedType::GetClassData() const { return &_class_data_; }

void P4NamedType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4NamedType *>(to)->MergeFrom(
      static_cast<const P4NamedType &>(from));
}


void P4NamedType::MergeFrom(const P4NamedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4NamedType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4NamedType::CopyFrom(const P4NamedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4NamedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4NamedType::IsInitialized() const {
  return true;
}

void P4NamedType::InternalSwap(P4NamedType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P4NamedType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[8]);
}

// ===================================================================

class P4BoolType::_Internal {
 public:
};

P4BoolType::P4BoolType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4BoolType)
}
P4BoolType::P4BoolType(const P4BoolType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4BoolType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4BoolType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4BoolType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P4BoolType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[9]);
}

// ===================================================================

class P4ErrorType::_Internal {
 public:
};

P4ErrorType::P4ErrorType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4ErrorType)
}
P4ErrorType::P4ErrorType(const P4ErrorType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4ErrorType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4ErrorType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4ErrorType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P4ErrorType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[10]);
}

// ===================================================================

class P4BitstringLikeTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4BitTypeSpec& bit(const P4BitstringLikeTypeSpec* msg);
  static const ::p4::config::v1::P4IntTypeSpec& int_(const P4BitstringLikeTypeSpec* msg);
  static const ::p4::config::v1::P4VarbitTypeSpec& varbit(const P4BitstringLikeTypeSpec* msg);
};

const ::p4::config::v1::P4BitTypeSpec&
P4BitstringLikeTypeSpec::_Internal::bit(const P4BitstringLikeTypeSpec* msg) {
  return *msg->type_spec_.bit_;
}
const ::p4::config::v1::P4IntTypeSpec&
P4BitstringLikeTypeSpec::_Internal::int_(const P4BitstringLikeTypeSpec* msg) {
  return *msg->type_spec_.int__;
}
const ::p4::config::v1::P4VarbitTypeSpec&
P4BitstringLikeTypeSpec::_Internal::varbit(const P4BitstringLikeTypeSpec* msg) {
  return *msg->type_spec_.varbit_;
}
void P4BitstringLikeTypeSpec::set_allocated_bit(::p4::config::v1::P4BitTypeSpec* bit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (bit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4BitTypeSpec>::GetOwningArena(bit);
    if (message_arena != submessage_arena) {
      bit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bit, submessage_arena);
    }
    set_has_bit();
    type_spec_.bit_ = bit;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.bit)
}
void P4BitstringLikeTypeSpec::set_allocated_int_(::p4::config::v1::P4IntTypeSpec* int_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (int_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4IntTypeSpec>::GetOwningArena(int_);
    if (message_arena != submessage_arena) {
      int_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_, submessage_arena);
    }
    set_has_int_();
    type_spec_.int__ = int_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.int)
}
void P4BitstringLikeTypeSpec::set_allocated_varbit(::p4::config::v1::P4VarbitTypeSpec* varbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_spec();
  if (varbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4VarbitTypeSpec>::GetOwningArena(varbit);
    if (message_arena != submessage_arena) {
      varbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varbit, submessage_arena);
    }
    set_has_varbit();
    type_spec_.varbit_ = varbit;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
}
P4BitstringLikeTypeSpec::P4BitstringLikeTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  annotation_locations_(arena),
  structured_annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4BitstringLikeTypeSpec)
}
P4BitstringLikeTypeSpec::P4BitstringLikeTypeSpec(const P4BitstringLikeTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      annotation_locations_(from.annotation_locations_),
      structured_annotations_(from.structured_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type_spec();
  switch (from.type_spec_case()) {
    case kBit: {
      _internal_mutable_bit()->::p4::config::v1::P4BitTypeSpec::MergeFrom(from._internal_bit());
      break;
    }
    case kInt: {
      _internal_mutable_int_()->::p4::config::v1::P4IntTypeSpec::MergeFrom(from._internal_int_());
      break;
    }
    case kVarbit: {
      _internal_mutable_varbit()->::p4::config::v1::P4VarbitTypeSpec::MergeFrom(from._internal_varbit());
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4BitstringLikeTypeSpec)
}

void P4BitstringLikeTypeSpec::SharedCtor() {
clear_has_type_spec();
}

P4BitstringLikeTypeSpec::~P4BitstringLikeTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4BitstringLikeTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4BitstringLikeTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type_spec()) {
    clear_type_spec();
  }
}

void P4BitstringLikeTypeSpec::ArenaDtor(void* object) {
  P4BitstringLikeTypeSpec* _this = reinterpret_cast< P4BitstringLikeTypeSpec* >(object);
  (void)_this;
}
void P4BitstringLikeTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4BitstringLikeTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4BitstringLikeTypeSpec::clear_type_spec() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.P4BitstringLikeTypeSpec)
  switch (type_spec_case()) {
    case kBit: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.bit_;
      }
      break;
    }
    case kInt: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.int__;
      }
      break;
    }
    case kVarbit: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_spec_.varbit_;
      }
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_SPEC_NOT_SET;
}


void P4BitstringLikeTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4BitstringLikeTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  annotation_locations_.Clear();
  structured_annotations_.Clear();
  clear_type_spec();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4BitstringLikeTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4BitTypeSpec bit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4IntTypeSpec int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4VarbitTypeSpec varbit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_varbit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4BitstringLikeTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4BitstringLikeTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4BitstringLikeTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4BitTypeSpec bit = 1;
  if (_internal_has_bit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bit(this), target, stream);
  }

  // .p4.config.v1.P4IntTypeSpec int = 2;
  if (_internal_has_int_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::int_(this), target, stream);
  }

  // .p4.config.v1.P4VarbitTypeSpec varbit = 3;
  if (_internal_has_varbit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::varbit(this), target, stream);
  }

  // repeated string annotations = 4;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4BitstringLikeTypeSpec.annotations");
    target = stream->WriteString(4, s, target);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_annotation_locations(i), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_structured_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4BitstringLikeTypeSpec)
  return target;
}

size_t P4BitstringLikeTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4BitstringLikeTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (type_spec_case()) {
    // .p4.config.v1.P4BitTypeSpec bit = 1;
    case kBit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.bit_);
      break;
    }
    // .p4.config.v1.P4IntTypeSpec int = 2;
    case kInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.int__);
      break;
    }
    // .p4.config.v1.P4VarbitTypeSpec varbit = 3;
    case kVarbit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_spec_.varbit_);
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4BitstringLikeTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4BitstringLikeTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4BitstringLikeTypeSpec::GetClassData() const { return &_class_data_; }

void P4BitstringLikeTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4BitstringLikeTypeSpec *>(to)->MergeFrom(
      static_cast<const P4BitstringLikeTypeSpec &>(from));
}


void P4BitstringLikeTypeSpec::MergeFrom(const P4BitstringLikeTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4BitstringLikeTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  switch (from.type_spec_case()) {
    case kBit: {
      _internal_mutable_bit()->::p4::config::v1::P4BitTypeSpec::MergeFrom(from._internal_bit());
      break;
    }
    case kInt: {
      _internal_mutable_int_()->::p4::config::v1::P4IntTypeSpec::MergeFrom(from._internal_int_());
      break;
    }
    case kVarbit: {
      _internal_mutable_varbit()->::p4::config::v1::P4VarbitTypeSpec::MergeFrom(from._internal_varbit());
      break;
    }
    case TYPE_SPEC_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4BitstringLikeTypeSpec::CopyFrom(const P4BitstringLikeTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4BitstringLikeTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4BitstringLikeTypeSpec::IsInitialized() const {
  return true;
}

void P4BitstringLikeTypeSpec::InternalSwap(P4BitstringLikeTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  swap(type_spec_, other->type_spec_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4BitstringLikeTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[11]);
}

// ===================================================================

class P4BitTypeSpec::_Internal {
 public:
};

P4BitTypeSpec::P4BitTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4BitTypeSpec)
}
P4BitTypeSpec::P4BitTypeSpec(const P4BitTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bitwidth_ = from.bitwidth_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4BitTypeSpec)
}

void P4BitTypeSpec::SharedCtor() {
bitwidth_ = 0;
}

P4BitTypeSpec::~P4BitTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4BitTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4BitTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4BitTypeSpec::ArenaDtor(void* object) {
  P4BitTypeSpec* _this = reinterpret_cast< P4BitTypeSpec* >(object);
  (void)_this;
}
void P4BitTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4BitTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4BitTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4BitTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitwidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4BitTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bitwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4BitTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4BitTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bitwidth = 1;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bitwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4BitTypeSpec)
  return target;
}

size_t P4BitTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4BitTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bitwidth = 1;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4BitTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4BitTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4BitTypeSpec::GetClassData() const { return &_class_data_; }

void P4BitTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4BitTypeSpec *>(to)->MergeFrom(
      static_cast<const P4BitTypeSpec &>(from));
}


void P4BitTypeSpec::MergeFrom(const P4BitTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4BitTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4BitTypeSpec::CopyFrom(const P4BitTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4BitTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4BitTypeSpec::IsInitialized() const {
  return true;
}

void P4BitTypeSpec::InternalSwap(P4BitTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bitwidth_, other->bitwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4BitTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[12]);
}

// ===================================================================

class P4IntTypeSpec::_Internal {
 public:
};

P4IntTypeSpec::P4IntTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4IntTypeSpec)
}
P4IntTypeSpec::P4IntTypeSpec(const P4IntTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bitwidth_ = from.bitwidth_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4IntTypeSpec)
}

void P4IntTypeSpec::SharedCtor() {
bitwidth_ = 0;
}

P4IntTypeSpec::~P4IntTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4IntTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4IntTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4IntTypeSpec::ArenaDtor(void* object) {
  P4IntTypeSpec* _this = reinterpret_cast< P4IntTypeSpec* >(object);
  (void)_this;
}
void P4IntTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4IntTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4IntTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4IntTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitwidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4IntTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bitwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4IntTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4IntTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bitwidth = 1;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bitwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4IntTypeSpec)
  return target;
}

size_t P4IntTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4IntTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bitwidth = 1;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4IntTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4IntTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4IntTypeSpec::GetClassData() const { return &_class_data_; }

void P4IntTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4IntTypeSpec *>(to)->MergeFrom(
      static_cast<const P4IntTypeSpec &>(from));
}


void P4IntTypeSpec::MergeFrom(const P4IntTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4IntTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4IntTypeSpec::CopyFrom(const P4IntTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4IntTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4IntTypeSpec::IsInitialized() const {
  return true;
}

void P4IntTypeSpec::InternalSwap(P4IntTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bitwidth_, other->bitwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4IntTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[13]);
}

// ===================================================================

class P4VarbitTypeSpec::_Internal {
 public:
};

P4VarbitTypeSpec::P4VarbitTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4VarbitTypeSpec)
}
P4VarbitTypeSpec::P4VarbitTypeSpec(const P4VarbitTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_bitwidth_ = from.max_bitwidth_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4VarbitTypeSpec)
}

void P4VarbitTypeSpec::SharedCtor() {
max_bitwidth_ = 0;
}

P4VarbitTypeSpec::~P4VarbitTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4VarbitTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4VarbitTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4VarbitTypeSpec::ArenaDtor(void* object) {
  P4VarbitTypeSpec* _this = reinterpret_cast< P4VarbitTypeSpec* >(object);
  (void)_this;
}
void P4VarbitTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4VarbitTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4VarbitTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4VarbitTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_bitwidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4VarbitTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_bitwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4VarbitTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4VarbitTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_bitwidth = 1;
  if (this->_internal_max_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_bitwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4VarbitTypeSpec)
  return target;
}

size_t P4VarbitTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4VarbitTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_bitwidth = 1;
  if (this->_internal_max_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4VarbitTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4VarbitTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4VarbitTypeSpec::GetClassData() const { return &_class_data_; }

void P4VarbitTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4VarbitTypeSpec *>(to)->MergeFrom(
      static_cast<const P4VarbitTypeSpec &>(from));
}


void P4VarbitTypeSpec::MergeFrom(const P4VarbitTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4VarbitTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_bitwidth() != 0) {
    _internal_set_max_bitwidth(from._internal_max_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4VarbitTypeSpec::CopyFrom(const P4VarbitTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4VarbitTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4VarbitTypeSpec::IsInitialized() const {
  return true;
}

void P4VarbitTypeSpec::InternalSwap(P4VarbitTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(max_bitwidth_, other->max_bitwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4VarbitTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[14]);
}

// ===================================================================

class P4TupleTypeSpec::_Internal {
 public:
};

P4TupleTypeSpec::P4TupleTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4TupleTypeSpec)
}
P4TupleTypeSpec::P4TupleTypeSpec(const P4TupleTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4TupleTypeSpec)
}

void P4TupleTypeSpec::SharedCtor() {
}

P4TupleTypeSpec::~P4TupleTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4TupleTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4TupleTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4TupleTypeSpec::ArenaDtor(void* object) {
  P4TupleTypeSpec* _this = reinterpret_cast< P4TupleTypeSpec* >(object);
  (void)_this;
}
void P4TupleTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4TupleTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4TupleTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4TupleTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4TupleTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.P4DataTypeSpec members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4TupleTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4TupleTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4DataTypeSpec members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4TupleTypeSpec)
  return target;
}

size_t P4TupleTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4TupleTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4DataTypeSpec members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4TupleTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4TupleTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4TupleTypeSpec::GetClassData() const { return &_class_data_; }

void P4TupleTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4TupleTypeSpec *>(to)->MergeFrom(
      static_cast<const P4TupleTypeSpec &>(from));
}


void P4TupleTypeSpec::MergeFrom(const P4TupleTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4TupleTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4TupleTypeSpec::CopyFrom(const P4TupleTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4TupleTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4TupleTypeSpec::IsInitialized() const {
  return true;
}

void P4TupleTypeSpec::InternalSwap(P4TupleTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4TupleTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[15]);
}

// ===================================================================

class P4StructTypeSpec_Member::_Internal {
 public:
  static const ::p4::config::v1::P4DataTypeSpec& type_spec(const P4StructTypeSpec_Member* msg);
};

const ::p4::config::v1::P4DataTypeSpec&
P4StructTypeSpec_Member::_Internal::type_spec(const P4StructTypeSpec_Member* msg) {
  return *msg->type_spec_;
}
P4StructTypeSpec_Member::P4StructTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4StructTypeSpec.Member)
}
P4StructTypeSpec_Member::P4StructTypeSpec_Member(const P4StructTypeSpec_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type_spec()) {
    type_spec_ = new ::p4::config::v1::P4DataTypeSpec(*from.type_spec_);
  } else {
    type_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4StructTypeSpec.Member)
}

void P4StructTypeSpec_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_spec_ = nullptr;
}

P4StructTypeSpec_Member::~P4StructTypeSpec_Member() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4StructTypeSpec.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4StructTypeSpec_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_spec_;
}

void P4StructTypeSpec_Member::ArenaDtor(void* object) {
  P4StructTypeSpec_Member* _this = reinterpret_cast< P4StructTypeSpec_Member* >(object);
  (void)_this;
}
void P4StructTypeSpec_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4StructTypeSpec_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4StructTypeSpec_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4StructTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4StructTypeSpec_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4StructTypeSpec.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4DataTypeSpec type_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4StructTypeSpec_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4StructTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4StructTypeSpec.Member.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4StructTypeSpec.Member)
  return target;
}

size_t P4StructTypeSpec_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4StructTypeSpec.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4StructTypeSpec_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4StructTypeSpec_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4StructTypeSpec_Member::GetClassData() const { return &_class_data_; }

void P4StructTypeSpec_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4StructTypeSpec_Member *>(to)->MergeFrom(
      static_cast<const P4StructTypeSpec_Member &>(from));
}


void P4StructTypeSpec_Member::MergeFrom(const P4StructTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4StructTypeSpec.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_type_spec()) {
    _internal_mutable_type_spec()->::p4::config::v1::P4DataTypeSpec::MergeFrom(from._internal_type_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4StructTypeSpec_Member::CopyFrom(const P4StructTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4StructTypeSpec.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4StructTypeSpec_Member::IsInitialized() const {
  return true;
}

void P4StructTypeSpec_Member::InternalSwap(P4StructTypeSpec_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_spec_, other->type_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4StructTypeSpec_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[16]);
}

// ===================================================================

class P4StructTypeSpec::_Internal {
 public:
};

P4StructTypeSpec::P4StructTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  annotations_(arena),
  annotation_locations_(arena),
  structured_annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4StructTypeSpec)
}
P4StructTypeSpec::P4StructTypeSpec(const P4StructTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      annotations_(from.annotations_),
      annotation_locations_(from.annotation_locations_),
      structured_annotations_(from.structured_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4StructTypeSpec)
}

void P4StructTypeSpec::SharedCtor() {
}

P4StructTypeSpec::~P4StructTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4StructTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4StructTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4StructTypeSpec::ArenaDtor(void* object) {
  P4StructTypeSpec* _this = reinterpret_cast< P4StructTypeSpec* >(object);
  (void)_this;
}
void P4StructTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4StructTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4StructTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4StructTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  annotations_.Clear();
  annotation_locations_.Clear();
  structured_annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4StructTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.P4StructTypeSpec.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4StructTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4StructTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4StructTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4StructTypeSpec.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4StructTypeSpec.annotations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_annotation_locations(i), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4StructTypeSpec)
  return target;
}

size_t P4StructTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4StructTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4StructTypeSpec.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4StructTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4StructTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4StructTypeSpec::GetClassData() const { return &_class_data_; }

void P4StructTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4StructTypeSpec *>(to)->MergeFrom(
      static_cast<const P4StructTypeSpec &>(from));
}


void P4StructTypeSpec::MergeFrom(const P4StructTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4StructTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  annotations_.MergeFrom(from.annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4StructTypeSpec::CopyFrom(const P4StructTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4StructTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4StructTypeSpec::IsInitialized() const {
  return true;
}

void P4StructTypeSpec::InternalSwap(P4StructTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  annotations_.InternalSwap(&other->annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4StructTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[17]);
}

// ===================================================================

class P4HeaderTypeSpec_Member::_Internal {
 public:
  static const ::p4::config::v1::P4BitstringLikeTypeSpec& type_spec(const P4HeaderTypeSpec_Member* msg);
};

const ::p4::config::v1::P4BitstringLikeTypeSpec&
P4HeaderTypeSpec_Member::_Internal::type_spec(const P4HeaderTypeSpec_Member* msg) {
  return *msg->type_spec_;
}
P4HeaderTypeSpec_Member::P4HeaderTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderTypeSpec.Member)
}
P4HeaderTypeSpec_Member::P4HeaderTypeSpec_Member(const P4HeaderTypeSpec_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type_spec()) {
    type_spec_ = new ::p4::config::v1::P4BitstringLikeTypeSpec(*from.type_spec_);
  } else {
    type_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderTypeSpec.Member)
}

void P4HeaderTypeSpec_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_spec_ = nullptr;
}

P4HeaderTypeSpec_Member::~P4HeaderTypeSpec_Member() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderTypeSpec.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderTypeSpec_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_spec_;
}

void P4HeaderTypeSpec_Member::ArenaDtor(void* object) {
  P4HeaderTypeSpec_Member* _this = reinterpret_cast< P4HeaderTypeSpec_Member* >(object);
  (void)_this;
}
void P4HeaderTypeSpec_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderTypeSpec_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderTypeSpec_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderTypeSpec_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4HeaderTypeSpec.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4BitstringLikeTypeSpec type_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderTypeSpec_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4HeaderTypeSpec.Member.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .p4.config.v1.P4BitstringLikeTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderTypeSpec.Member)
  return target;
}

size_t P4HeaderTypeSpec_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderTypeSpec.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.P4BitstringLikeTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderTypeSpec_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderTypeSpec_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderTypeSpec_Member::GetClassData() const { return &_class_data_; }

void P4HeaderTypeSpec_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderTypeSpec_Member *>(to)->MergeFrom(
      static_cast<const P4HeaderTypeSpec_Member &>(from));
}


void P4HeaderTypeSpec_Member::MergeFrom(const P4HeaderTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderTypeSpec.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_type_spec()) {
    _internal_mutable_type_spec()->::p4::config::v1::P4BitstringLikeTypeSpec::MergeFrom(from._internal_type_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderTypeSpec_Member::CopyFrom(const P4HeaderTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderTypeSpec.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderTypeSpec_Member::IsInitialized() const {
  return true;
}

void P4HeaderTypeSpec_Member::InternalSwap(P4HeaderTypeSpec_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_spec_, other->type_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderTypeSpec_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[18]);
}

// ===================================================================

class P4HeaderTypeSpec::_Internal {
 public:
};

P4HeaderTypeSpec::P4HeaderTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  annotations_(arena),
  annotation_locations_(arena),
  structured_annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderTypeSpec)
}
P4HeaderTypeSpec::P4HeaderTypeSpec(const P4HeaderTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      annotations_(from.annotations_),
      annotation_locations_(from.annotation_locations_),
      structured_annotations_(from.structured_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderTypeSpec)
}

void P4HeaderTypeSpec::SharedCtor() {
}

P4HeaderTypeSpec::~P4HeaderTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4HeaderTypeSpec::ArenaDtor(void* object) {
  P4HeaderTypeSpec* _this = reinterpret_cast< P4HeaderTypeSpec* >(object);
  (void)_this;
}
void P4HeaderTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  annotations_.Clear();
  annotation_locations_.Clear();
  structured_annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.P4HeaderTypeSpec.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4HeaderTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4HeaderTypeSpec.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4HeaderTypeSpec.annotations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_annotation_locations(i), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderTypeSpec)
  return target;
}

size_t P4HeaderTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4HeaderTypeSpec.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderTypeSpec::GetClassData() const { return &_class_data_; }

void P4HeaderTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderTypeSpec *>(to)->MergeFrom(
      static_cast<const P4HeaderTypeSpec &>(from));
}


void P4HeaderTypeSpec::MergeFrom(const P4HeaderTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  annotations_.MergeFrom(from.annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderTypeSpec::CopyFrom(const P4HeaderTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderTypeSpec::IsInitialized() const {
  return true;
}

void P4HeaderTypeSpec::InternalSwap(P4HeaderTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  annotations_.InternalSwap(&other->annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[19]);
}

// ===================================================================

class P4HeaderUnionTypeSpec_Member::_Internal {
 public:
  static const ::p4::config::v1::P4NamedType& header(const P4HeaderUnionTypeSpec_Member* msg);
};

const ::p4::config::v1::P4NamedType&
P4HeaderUnionTypeSpec_Member::_Internal::header(const P4HeaderUnionTypeSpec_Member* msg) {
  return *msg->header_;
}
P4HeaderUnionTypeSpec_Member::P4HeaderUnionTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderUnionTypeSpec.Member)
}
P4HeaderUnionTypeSpec_Member::P4HeaderUnionTypeSpec_Member(const P4HeaderUnionTypeSpec_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::p4::config::v1::P4NamedType(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderUnionTypeSpec.Member)
}

void P4HeaderUnionTypeSpec_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

P4HeaderUnionTypeSpec_Member::~P4HeaderUnionTypeSpec_Member() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderUnionTypeSpec_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void P4HeaderUnionTypeSpec_Member::ArenaDtor(void* object) {
  P4HeaderUnionTypeSpec_Member* _this = reinterpret_cast< P4HeaderUnionTypeSpec_Member* >(object);
  (void)_this;
}
void P4HeaderUnionTypeSpec_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderUnionTypeSpec_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderUnionTypeSpec_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderUnionTypeSpec_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4HeaderUnionTypeSpec.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderUnionTypeSpec_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4HeaderUnionTypeSpec.Member.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .p4.config.v1.P4NamedType header = 2;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  return target;
}

size_t P4HeaderUnionTypeSpec_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.P4NamedType header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderUnionTypeSpec_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderUnionTypeSpec_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderUnionTypeSpec_Member::GetClassData() const { return &_class_data_; }

void P4HeaderUnionTypeSpec_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderUnionTypeSpec_Member *>(to)->MergeFrom(
      static_cast<const P4HeaderUnionTypeSpec_Member &>(from));
}


void P4HeaderUnionTypeSpec_Member::MergeFrom(const P4HeaderUnionTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderUnionTypeSpec_Member::CopyFrom(const P4HeaderUnionTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderUnionTypeSpec.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnionTypeSpec_Member::IsInitialized() const {
  return true;
}

void P4HeaderUnionTypeSpec_Member::InternalSwap(P4HeaderUnionTypeSpec_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderUnionTypeSpec_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[20]);
}

// ===================================================================

class P4HeaderUnionTypeSpec::_Internal {
 public:
};

P4HeaderUnionTypeSpec::P4HeaderUnionTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  annotations_(arena),
  annotation_locations_(arena),
  structured_annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderUnionTypeSpec)
}
P4HeaderUnionTypeSpec::P4HeaderUnionTypeSpec(const P4HeaderUnionTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      annotations_(from.annotations_),
      annotation_locations_(from.annotation_locations_),
      structured_annotations_(from.structured_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderUnionTypeSpec)
}

void P4HeaderUnionTypeSpec::SharedCtor() {
}

P4HeaderUnionTypeSpec::~P4HeaderUnionTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderUnionTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderUnionTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4HeaderUnionTypeSpec::ArenaDtor(void* object) {
  P4HeaderUnionTypeSpec* _this = reinterpret_cast< P4HeaderUnionTypeSpec* >(object);
  (void)_this;
}
void P4HeaderUnionTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderUnionTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderUnionTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderUnionTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  annotations_.Clear();
  annotation_locations_.Clear();
  structured_annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderUnionTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.P4HeaderUnionTypeSpec.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4HeaderUnionTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderUnionTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderUnionTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4HeaderUnionTypeSpec.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4HeaderUnionTypeSpec.annotations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_annotation_locations(i), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderUnionTypeSpec)
  return target;
}

size_t P4HeaderUnionTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderUnionTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4HeaderUnionTypeSpec.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderUnionTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderUnionTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderUnionTypeSpec::GetClassData() const { return &_class_data_; }

void P4HeaderUnionTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderUnionTypeSpec *>(to)->MergeFrom(
      static_cast<const P4HeaderUnionTypeSpec &>(from));
}


void P4HeaderUnionTypeSpec::MergeFrom(const P4HeaderUnionTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderUnionTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  annotations_.MergeFrom(from.annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderUnionTypeSpec::CopyFrom(const P4HeaderUnionTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderUnionTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnionTypeSpec::IsInitialized() const {
  return true;
}

void P4HeaderUnionTypeSpec::InternalSwap(P4HeaderUnionTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  annotations_.InternalSwap(&other->annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderUnionTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[21]);
}

// ===================================================================

class P4HeaderStackTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4NamedType& header(const P4HeaderStackTypeSpec* msg);
};

const ::p4::config::v1::P4NamedType&
P4HeaderStackTypeSpec::_Internal::header(const P4HeaderStackTypeSpec* msg) {
  return *msg->header_;
}
P4HeaderStackTypeSpec::P4HeaderStackTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderStackTypeSpec)
}
P4HeaderStackTypeSpec::P4HeaderStackTypeSpec(const P4HeaderStackTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::p4::config::v1::P4NamedType(*from.header_);
  } else {
    header_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderStackTypeSpec)
}

void P4HeaderStackTypeSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&header_)) + sizeof(size_));
}

P4HeaderStackTypeSpec::~P4HeaderStackTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderStackTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderStackTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void P4HeaderStackTypeSpec::ArenaDtor(void* object) {
  P4HeaderStackTypeSpec* _this = reinterpret_cast< P4HeaderStackTypeSpec* >(object);
  (void)_this;
}
void P4HeaderStackTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderStackTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderStackTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderStackTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderStackTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4NamedType header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderStackTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderStackTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4NamedType header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderStackTypeSpec)
  return target;
}

size_t P4HeaderStackTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderStackTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.P4NamedType header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderStackTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderStackTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderStackTypeSpec::GetClassData() const { return &_class_data_; }

void P4HeaderStackTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderStackTypeSpec *>(to)->MergeFrom(
      static_cast<const P4HeaderStackTypeSpec &>(from));
}


void P4HeaderStackTypeSpec::MergeFrom(const P4HeaderStackTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderStackTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderStackTypeSpec::CopyFrom(const P4HeaderStackTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderStackTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderStackTypeSpec::IsInitialized() const {
  return true;
}

void P4HeaderStackTypeSpec::InternalSwap(P4HeaderStackTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P4HeaderStackTypeSpec, size_)
      + sizeof(P4HeaderStackTypeSpec::size_)
      - PROTOBUF_FIELD_OFFSET(P4HeaderStackTypeSpec, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderStackTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[22]);
}

// ===================================================================

class P4HeaderUnionStackTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4NamedType& header_union(const P4HeaderUnionStackTypeSpec* msg);
};

const ::p4::config::v1::P4NamedType&
P4HeaderUnionStackTypeSpec::_Internal::header_union(const P4HeaderUnionStackTypeSpec* msg) {
  return *msg->header_union_;
}
P4HeaderUnionStackTypeSpec::P4HeaderUnionStackTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4HeaderUnionStackTypeSpec)
}
P4HeaderUnionStackTypeSpec::P4HeaderUnionStackTypeSpec(const P4HeaderUnionStackTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header_union()) {
    header_union_ = new ::p4::config::v1::P4NamedType(*from.header_union_);
  } else {
    header_union_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4HeaderUnionStackTypeSpec)
}

void P4HeaderUnionStackTypeSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_union_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&header_union_)) + sizeof(size_));
}

P4HeaderUnionStackTypeSpec::~P4HeaderUnionStackTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4HeaderUnionStackTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4HeaderUnionStackTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_union_;
}

void P4HeaderUnionStackTypeSpec::ArenaDtor(void* object) {
  P4HeaderUnionStackTypeSpec* _this = reinterpret_cast< P4HeaderUnionStackTypeSpec* >(object);
  (void)_this;
}
void P4HeaderUnionStackTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4HeaderUnionStackTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4HeaderUnionStackTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4HeaderUnionStackTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_union_ != nullptr) {
    delete header_union_;
  }
  header_union_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4HeaderUnionStackTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4NamedType header_union = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_union(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4HeaderUnionStackTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4HeaderUnionStackTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4NamedType header_union = 1;
  if (this->_internal_has_header_union()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header_union(this), target, stream);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4HeaderUnionStackTypeSpec)
  return target;
}

size_t P4HeaderUnionStackTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4HeaderUnionStackTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.P4NamedType header_union = 1;
  if (this->_internal_has_header_union()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_union_);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4HeaderUnionStackTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4HeaderUnionStackTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4HeaderUnionStackTypeSpec::GetClassData() const { return &_class_data_; }

void P4HeaderUnionStackTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4HeaderUnionStackTypeSpec *>(to)->MergeFrom(
      static_cast<const P4HeaderUnionStackTypeSpec &>(from));
}


void P4HeaderUnionStackTypeSpec::MergeFrom(const P4HeaderUnionStackTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4HeaderUnionStackTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header_union()) {
    _internal_mutable_header_union()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_header_union());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4HeaderUnionStackTypeSpec::CopyFrom(const P4HeaderUnionStackTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4HeaderUnionStackTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnionStackTypeSpec::IsInitialized() const {
  return true;
}

void P4HeaderUnionStackTypeSpec::InternalSwap(P4HeaderUnionStackTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P4HeaderUnionStackTypeSpec, size_)
      + sizeof(P4HeaderUnionStackTypeSpec::size_)
      - PROTOBUF_FIELD_OFFSET(P4HeaderUnionStackTypeSpec, header_union_)>(
          reinterpret_cast<char*>(&header_union_),
          reinterpret_cast<char*>(&other->header_union_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P4HeaderUnionStackTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[23]);
}

// ===================================================================

class KeyValuePair::_Internal {
 public:
  static const ::p4::config::v1::Expression& value(const KeyValuePair* msg);
};

const ::p4::config::v1::Expression&
KeyValuePair::_Internal::value(const KeyValuePair* msg) {
  return *msg->value_;
}
KeyValuePair::KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::p4::config::v1::Expression(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:p4.config.v1.KeyValuePair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void KeyValuePair::ArenaDtor(void* object) {
  KeyValuePair* _this = reinterpret_cast< KeyValuePair* >(object);
  (void)_this;
}
void KeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValuePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.KeyValuePair.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Expression value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValuePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.KeyValuePair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .p4.config.v1.Expression value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.KeyValuePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .p4.config.v1.Expression value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValuePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyValuePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValuePair::GetClassData() const { return &_class_data_; }

void KeyValuePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyValuePair *>(to)->MergeFrom(
      static_cast<const KeyValuePair &>(from));
}


void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::p4::config::v1::Expression::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[24]);
}

// ===================================================================

class KeyValuePairList::_Internal {
 public:
};

KeyValuePairList::KeyValuePairList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  kv_pairs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.KeyValuePairList)
}
KeyValuePairList::KeyValuePairList(const KeyValuePairList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kv_pairs_(from.kv_pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.KeyValuePairList)
}

void KeyValuePairList::SharedCtor() {
}

KeyValuePairList::~KeyValuePairList() {
  // @@protoc_insertion_point(destructor:p4.config.v1.KeyValuePairList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyValuePairList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyValuePairList::ArenaDtor(void* object) {
  KeyValuePairList* _this = reinterpret_cast< KeyValuePairList* >(object);
  (void)_this;
}
void KeyValuePairList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePairList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValuePairList::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.KeyValuePairList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kv_pairs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValuePairList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.KeyValuePair kv_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kv_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValuePairList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.KeyValuePairList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.KeyValuePair kv_pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kv_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_kv_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.KeyValuePairList)
  return target;
}

size_t KeyValuePairList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.KeyValuePairList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.KeyValuePair kv_pairs = 1;
  total_size += 1UL * this->_internal_kv_pairs_size();
  for (const auto& msg : this->kv_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValuePairList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyValuePairList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValuePairList::GetClassData() const { return &_class_data_; }

void KeyValuePairList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyValuePairList *>(to)->MergeFrom(
      static_cast<const KeyValuePairList &>(from));
}


void KeyValuePairList::MergeFrom(const KeyValuePairList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.KeyValuePairList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kv_pairs_.MergeFrom(from.kv_pairs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValuePairList::CopyFrom(const KeyValuePairList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.KeyValuePairList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePairList::IsInitialized() const {
  return true;
}

void KeyValuePairList::InternalSwap(KeyValuePairList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  kv_pairs_.InternalSwap(&other->kv_pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePairList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[25]);
}

// ===================================================================

class Expression::_Internal {
 public:
};

Expression::Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Expression)
}
Expression::Expression(const Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Expression)
}

void Expression::SharedCtor() {
clear_has_value();
}

Expression::~Expression() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Expression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Expression::ArenaDtor(void* object) {
  Expression* _this = reinterpret_cast< Expression* >(object);
  (void)_this;
}
void Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.Expression)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Expression.string_value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Expression.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // int64 int64_value = 2;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_value(), target);
  }

  // bool bool_value = 3;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Expression)
  return target;
}

size_t Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // int64 int64_value = 2;
    case kInt64Value: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Expression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression::GetClassData() const { return &_class_data_; }

void Expression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Expression *>(to)->MergeFrom(
      static_cast<const Expression &>(from));
}


void Expression::MergeFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression::CopyFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  return true;
}

void Expression::InternalSwap(Expression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[26]);
}

// ===================================================================

class ExpressionList::_Internal {
 public:
};

ExpressionList::ExpressionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expressions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ExpressionList)
}
ExpressionList::ExpressionList(const ExpressionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expressions_(from.expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ExpressionList)
}

void ExpressionList::SharedCtor() {
}

ExpressionList::~ExpressionList() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ExpressionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpressionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpressionList::ArenaDtor(void* object) {
  ExpressionList* _this = reinterpret_cast< ExpressionList* >(object);
  (void)_this;
}
void ExpressionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpressionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpressionList::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ExpressionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.Expression expressions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpressionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ExpressionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.Expression expressions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_expressions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ExpressionList)
  return target;
}

size_t ExpressionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ExpressionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.Expression expressions = 1;
  total_size += 1UL * this->_internal_expressions_size();
  for (const auto& msg : this->expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpressionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpressionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpressionList::GetClassData() const { return &_class_data_; }

void ExpressionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExpressionList *>(to)->MergeFrom(
      static_cast<const ExpressionList &>(from));
}


void ExpressionList::MergeFrom(const ExpressionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ExpressionList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expressions_.MergeFrom(from.expressions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpressionList::CopyFrom(const ExpressionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ExpressionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionList::IsInitialized() const {
  return true;
}

void ExpressionList::InternalSwap(ExpressionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  expressions_.InternalSwap(&other->expressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[27]);
}

// ===================================================================

class StructuredAnnotation::_Internal {
 public:
  static const ::p4::config::v1::ExpressionList& expression_list(const StructuredAnnotation* msg);
  static const ::p4::config::v1::KeyValuePairList& kv_pair_list(const StructuredAnnotation* msg);
  static const ::p4::config::v1::SourceLocation& source_location(const StructuredAnnotation* msg);
};

const ::p4::config::v1::ExpressionList&
StructuredAnnotation::_Internal::expression_list(const StructuredAnnotation* msg) {
  return *msg->body_.expression_list_;
}
const ::p4::config::v1::KeyValuePairList&
StructuredAnnotation::_Internal::kv_pair_list(const StructuredAnnotation* msg) {
  return *msg->body_.kv_pair_list_;
}
const ::p4::config::v1::SourceLocation&
StructuredAnnotation::_Internal::source_location(const StructuredAnnotation* msg) {
  return *msg->source_location_;
}
void StructuredAnnotation::set_allocated_expression_list(::p4::config::v1::ExpressionList* expression_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (expression_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::ExpressionList>::GetOwningArena(expression_list);
    if (message_arena != submessage_arena) {
      expression_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression_list, submessage_arena);
    }
    set_has_expression_list();
    body_.expression_list_ = expression_list;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.StructuredAnnotation.expression_list)
}
void StructuredAnnotation::set_allocated_kv_pair_list(::p4::config::v1::KeyValuePairList* kv_pair_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (kv_pair_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::KeyValuePairList>::GetOwningArena(kv_pair_list);
    if (message_arena != submessage_arena) {
      kv_pair_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv_pair_list, submessage_arena);
    }
    set_has_kv_pair_list();
    body_.kv_pair_list_ = kv_pair_list;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.StructuredAnnotation.kv_pair_list)
}
StructuredAnnotation::StructuredAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.StructuredAnnotation)
}
StructuredAnnotation::StructuredAnnotation(const StructuredAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_source_location()) {
    source_location_ = new ::p4::config::v1::SourceLocation(*from.source_location_);
  } else {
    source_location_ = nullptr;
  }
  clear_has_body();
  switch (from.body_case()) {
    case kExpressionList: {
      _internal_mutable_expression_list()->::p4::config::v1::ExpressionList::MergeFrom(from._internal_expression_list());
      break;
    }
    case kKvPairList: {
      _internal_mutable_kv_pair_list()->::p4::config::v1::KeyValuePairList::MergeFrom(from._internal_kv_pair_list());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.StructuredAnnotation)
}

void StructuredAnnotation::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_location_ = nullptr;
clear_has_body();
}

StructuredAnnotation::~StructuredAnnotation() {
  // @@protoc_insertion_point(destructor:p4.config.v1.StructuredAnnotation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_location_;
  if (has_body()) {
    clear_body();
  }
}

void StructuredAnnotation::ArenaDtor(void* object) {
  StructuredAnnotation* _this = reinterpret_cast< StructuredAnnotation* >(object);
  (void)_this;
}
void StructuredAnnotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredAnnotation::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.StructuredAnnotation)
  switch (body_case()) {
    case kExpressionList: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.expression_list_;
      }
      break;
    }
    case kKvPairList: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.kv_pair_list_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void StructuredAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.StructuredAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && source_location_ != nullptr) {
    delete source_location_;
  }
  source_location_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredAnnotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.StructuredAnnotation.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.ExpressionList expression_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.KeyValuePairList kv_pair_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv_pair_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.SourceLocation source_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructuredAnnotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.StructuredAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.StructuredAnnotation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .p4.config.v1.ExpressionList expression_list = 2;
  if (_internal_has_expression_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression_list(this), target, stream);
  }

  // .p4.config.v1.KeyValuePairList kv_pair_list = 3;
  if (_internal_has_kv_pair_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kv_pair_list(this), target, stream);
  }

  // .p4.config.v1.SourceLocation source_location = 4;
  if (this->_internal_has_source_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::source_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.StructuredAnnotation)
  return target;
}

size_t StructuredAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.StructuredAnnotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.SourceLocation source_location = 4;
  if (this->_internal_has_source_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_location_);
  }

  switch (body_case()) {
    // .p4.config.v1.ExpressionList expression_list = 2;
    case kExpressionList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.expression_list_);
      break;
    }
    // .p4.config.v1.KeyValuePairList kv_pair_list = 3;
    case kKvPairList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.kv_pair_list_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructuredAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredAnnotation::GetClassData() const { return &_class_data_; }

void StructuredAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StructuredAnnotation *>(to)->MergeFrom(
      static_cast<const StructuredAnnotation &>(from));
}


void StructuredAnnotation::MergeFrom(const StructuredAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.StructuredAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_source_location()) {
    _internal_mutable_source_location()->::p4::config::v1::SourceLocation::MergeFrom(from._internal_source_location());
  }
  switch (from.body_case()) {
    case kExpressionList: {
      _internal_mutable_expression_list()->::p4::config::v1::ExpressionList::MergeFrom(from._internal_expression_list());
      break;
    }
    case kKvPairList: {
      _internal_mutable_kv_pair_list()->::p4::config::v1::KeyValuePairList::MergeFrom(from._internal_kv_pair_list());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredAnnotation::CopyFrom(const StructuredAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.StructuredAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredAnnotation::IsInitialized() const {
  return true;
}

void StructuredAnnotation::InternalSwap(StructuredAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(source_location_, other->source_location_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredAnnotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[28]);
}

// ===================================================================

class SourceLocation::_Internal {
 public:
};

SourceLocation::SourceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.SourceLocation)
}
SourceLocation::SourceLocation(const SourceLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&line_)) + sizeof(column_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.SourceLocation)
}

void SourceLocation::SharedCtor() {
file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&line_)) + sizeof(column_));
}

SourceLocation::~SourceLocation() {
  // @@protoc_insertion_point(destructor:p4.config.v1.SourceLocation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SourceLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceLocation::ArenaDtor(void* object) {
  SourceLocation* _this = reinterpret_cast< SourceLocation* >(object);
  (void)_this;
}
void SourceLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.SourceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty();
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&line_)) + sizeof(column_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.SourceLocation.file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.SourceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.SourceLocation.file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file(), target);
  }

  // int32 line = 2;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_line(), target);
  }

  // int32 column = 3;
  if (this->_internal_column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.SourceLocation)
  return target;
}

size_t SourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.SourceLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 1;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // int32 line = 2;
  if (this->_internal_line() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // int32 column = 3;
  if (this->_internal_column() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_column());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SourceLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceLocation::GetClassData() const { return &_class_data_; }

void SourceLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SourceLocation *>(to)->MergeFrom(
      static_cast<const SourceLocation &>(from));
}


void SourceLocation::MergeFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.SourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file().empty()) {
    _internal_set_file(from._internal_file());
  }
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from._internal_column() != 0) {
    _internal_set_column(from._internal_column());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceLocation::CopyFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.SourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceLocation::IsInitialized() const {
  return true;
}

void SourceLocation::InternalSwap(SourceLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_, lhs_arena,
      &other->file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceLocation, column_)
      + sizeof(SourceLocation::column_)
      - PROTOBUF_FIELD_OFFSET(SourceLocation, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceLocation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[29]);
}

// ===================================================================

class P4EnumTypeSpec_Member::_Internal {
 public:
};

P4EnumTypeSpec_Member::P4EnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4EnumTypeSpec.Member)
}
P4EnumTypeSpec_Member::P4EnumTypeSpec_Member(const P4EnumTypeSpec_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4EnumTypeSpec.Member)
}

void P4EnumTypeSpec_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

P4EnumTypeSpec_Member::~P4EnumTypeSpec_Member() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4EnumTypeSpec.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4EnumTypeSpec_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P4EnumTypeSpec_Member::ArenaDtor(void* object) {
  P4EnumTypeSpec_Member* _this = reinterpret_cast< P4EnumTypeSpec_Member* >(object);
  (void)_this;
}
void P4EnumTypeSpec_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4EnumTypeSpec_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4EnumTypeSpec_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4EnumTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4EnumTypeSpec_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4EnumTypeSpec.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4EnumTypeSpec.Member.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4EnumTypeSpec_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4EnumTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4EnumTypeSpec.Member.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4EnumTypeSpec.Member.annotations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4EnumTypeSpec.Member)
  return target;
}

size_t P4EnumTypeSpec_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4EnumTypeSpec.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4EnumTypeSpec_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4EnumTypeSpec_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4EnumTypeSpec_Member::GetClassData() const { return &_class_data_; }

void P4EnumTypeSpec_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4EnumTypeSpec_Member *>(to)->MergeFrom(
      static_cast<const P4EnumTypeSpec_Member &>(from));
}


void P4EnumTypeSpec_Member::MergeFrom(const P4EnumTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4EnumTypeSpec.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4EnumTypeSpec_Member::CopyFrom(const P4EnumTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4EnumTypeSpec.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4EnumTypeSpec_Member::IsInitialized() const {
  return true;
}

void P4EnumTypeSpec_Member::InternalSwap(P4EnumTypeSpec_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P4EnumTypeSpec_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[30]);
}

// ===================================================================

class P4EnumTypeSpec::_Internal {
 public:
};

P4EnumTypeSpec::P4EnumTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4EnumTypeSpec)
}
P4EnumTypeSpec::P4EnumTypeSpec(const P4EnumTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4EnumTypeSpec)
}

void P4EnumTypeSpec::SharedCtor() {
}

P4EnumTypeSpec::~P4EnumTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4EnumTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4EnumTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4EnumTypeSpec::ArenaDtor(void* object) {
  P4EnumTypeSpec* _this = reinterpret_cast< P4EnumTypeSpec* >(object);
  (void)_this;
}
void P4EnumTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4EnumTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4EnumTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4EnumTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4EnumTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .p4.config.v1.P4EnumTypeSpec.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4EnumTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4EnumTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4EnumTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4EnumTypeSpec.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4EnumTypeSpec.annotations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4EnumTypeSpec)
  return target;
}

size_t P4EnumTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4EnumTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4EnumTypeSpec.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4EnumTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4EnumTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4EnumTypeSpec::GetClassData() const { return &_class_data_; }

void P4EnumTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4EnumTypeSpec *>(to)->MergeFrom(
      static_cast<const P4EnumTypeSpec &>(from));
}


void P4EnumTypeSpec::MergeFrom(const P4EnumTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4EnumTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4EnumTypeSpec::CopyFrom(const P4EnumTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4EnumTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4EnumTypeSpec::IsInitialized() const {
  return true;
}

void P4EnumTypeSpec::InternalSwap(P4EnumTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4EnumTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[31]);
}

// ===================================================================

class P4SerializableEnumTypeSpec_Member::_Internal {
 public:
};

P4SerializableEnumTypeSpec_Member::P4SerializableEnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4SerializableEnumTypeSpec.Member)
}
P4SerializableEnumTypeSpec_Member::P4SerializableEnumTypeSpec_Member(const P4SerializableEnumTypeSpec_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4SerializableEnumTypeSpec.Member)
}

void P4SerializableEnumTypeSpec_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

P4SerializableEnumTypeSpec_Member::~P4SerializableEnumTypeSpec_Member() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4SerializableEnumTypeSpec_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P4SerializableEnumTypeSpec_Member::ArenaDtor(void* object) {
  P4SerializableEnumTypeSpec_Member* _this = reinterpret_cast< P4SerializableEnumTypeSpec_Member* >(object);
  (void)_this;
}
void P4SerializableEnumTypeSpec_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4SerializableEnumTypeSpec_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4SerializableEnumTypeSpec_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4SerializableEnumTypeSpec_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4SerializableEnumTypeSpec.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4SerializableEnumTypeSpec_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4SerializableEnumTypeSpec.Member.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations");
    target = stream->WriteString(3, s, target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  return target;
}

size_t P4SerializableEnumTypeSpec_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4SerializableEnumTypeSpec_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4SerializableEnumTypeSpec_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4SerializableEnumTypeSpec_Member::GetClassData() const { return &_class_data_; }

void P4SerializableEnumTypeSpec_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4SerializableEnumTypeSpec_Member *>(to)->MergeFrom(
      static_cast<const P4SerializableEnumTypeSpec_Member &>(from));
}


void P4SerializableEnumTypeSpec_Member::MergeFrom(const P4SerializableEnumTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4SerializableEnumTypeSpec_Member::CopyFrom(const P4SerializableEnumTypeSpec_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4SerializableEnumTypeSpec.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4SerializableEnumTypeSpec_Member::IsInitialized() const {
  return true;
}

void P4SerializableEnumTypeSpec_Member::InternalSwap(P4SerializableEnumTypeSpec_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata P4SerializableEnumTypeSpec_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[32]);
}

// ===================================================================

class P4SerializableEnumTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4BitTypeSpec& underlying_type(const P4SerializableEnumTypeSpec* msg);
};

const ::p4::config::v1::P4BitTypeSpec&
P4SerializableEnumTypeSpec::_Internal::underlying_type(const P4SerializableEnumTypeSpec* msg) {
  return *msg->underlying_type_;
}
P4SerializableEnumTypeSpec::P4SerializableEnumTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4SerializableEnumTypeSpec)
}
P4SerializableEnumTypeSpec::P4SerializableEnumTypeSpec(const P4SerializableEnumTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlying_type()) {
    underlying_type_ = new ::p4::config::v1::P4BitTypeSpec(*from.underlying_type_);
  } else {
    underlying_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4SerializableEnumTypeSpec)
}

void P4SerializableEnumTypeSpec::SharedCtor() {
underlying_type_ = nullptr;
}

P4SerializableEnumTypeSpec::~P4SerializableEnumTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4SerializableEnumTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4SerializableEnumTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete underlying_type_;
}

void P4SerializableEnumTypeSpec::ArenaDtor(void* object) {
  P4SerializableEnumTypeSpec* _this = reinterpret_cast< P4SerializableEnumTypeSpec* >(object);
  (void)_this;
}
void P4SerializableEnumTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4SerializableEnumTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4SerializableEnumTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4SerializableEnumTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  if (GetArenaForAllocation() == nullptr && underlying_type_ != nullptr) {
    delete underlying_type_;
  }
  underlying_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4SerializableEnumTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4BitTypeSpec underlying_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlying_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.P4SerializableEnumTypeSpec.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4SerializableEnumTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4SerializableEnumTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4SerializableEnumTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4BitTypeSpec underlying_type = 1;
  if (this->_internal_has_underlying_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::underlying_type(this), target, stream);
  }

  // repeated .p4.config.v1.P4SerializableEnumTypeSpec.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4SerializableEnumTypeSpec.annotations");
    target = stream->WriteString(3, s, target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4SerializableEnumTypeSpec)
  return target;
}

size_t P4SerializableEnumTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4SerializableEnumTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.P4SerializableEnumTypeSpec.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.config.v1.P4BitTypeSpec underlying_type = 1;
  if (this->_internal_has_underlying_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlying_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4SerializableEnumTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4SerializableEnumTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4SerializableEnumTypeSpec::GetClassData() const { return &_class_data_; }

void P4SerializableEnumTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4SerializableEnumTypeSpec *>(to)->MergeFrom(
      static_cast<const P4SerializableEnumTypeSpec &>(from));
}


void P4SerializableEnumTypeSpec::MergeFrom(const P4SerializableEnumTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4SerializableEnumTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (from._internal_has_underlying_type()) {
    _internal_mutable_underlying_type()->::p4::config::v1::P4BitTypeSpec::MergeFrom(from._internal_underlying_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4SerializableEnumTypeSpec::CopyFrom(const P4SerializableEnumTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4SerializableEnumTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4SerializableEnumTypeSpec::IsInitialized() const {
  return true;
}

void P4SerializableEnumTypeSpec::InternalSwap(P4SerializableEnumTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  swap(underlying_type_, other->underlying_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4SerializableEnumTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[33]);
}

// ===================================================================

class P4ErrorTypeSpec::_Internal {
 public:
};

P4ErrorTypeSpec::P4ErrorTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4ErrorTypeSpec)
}
P4ErrorTypeSpec::P4ErrorTypeSpec(const P4ErrorTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4ErrorTypeSpec)
}

void P4ErrorTypeSpec::SharedCtor() {
}

P4ErrorTypeSpec::~P4ErrorTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4ErrorTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4ErrorTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P4ErrorTypeSpec::ArenaDtor(void* object) {
  P4ErrorTypeSpec* _this = reinterpret_cast< P4ErrorTypeSpec* >(object);
  (void)_this;
}
void P4ErrorTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4ErrorTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4ErrorTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4ErrorTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4ErrorTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_members();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4ErrorTypeSpec.members"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4ErrorTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4ErrorTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string members = 1;
  for (int i = 0, n = this->_internal_members_size(); i < n; i++) {
    const auto& s = this->_internal_members(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4ErrorTypeSpec.members");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4ErrorTypeSpec)
  return target;
}

size_t P4ErrorTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4ErrorTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string members = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(members_.size());
  for (int i = 0, n = members_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      members_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4ErrorTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4ErrorTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4ErrorTypeSpec::GetClassData() const { return &_class_data_; }

void P4ErrorTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4ErrorTypeSpec *>(to)->MergeFrom(
      static_cast<const P4ErrorTypeSpec &>(from));
}


void P4ErrorTypeSpec::MergeFrom(const P4ErrorTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4ErrorTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4ErrorTypeSpec::CopyFrom(const P4ErrorTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4ErrorTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4ErrorTypeSpec::IsInitialized() const {
  return true;
}

void P4ErrorTypeSpec::InternalSwap(P4ErrorTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4ErrorTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[34]);
}

// ===================================================================

class P4NewTypeTranslation_SdnString::_Internal {
 public:
};

P4NewTypeTranslation_SdnString::P4NewTypeTranslation_SdnString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4NewTypeTranslation.SdnString)
}
P4NewTypeTranslation_SdnString::P4NewTypeTranslation_SdnString(const P4NewTypeTranslation_SdnString& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4NewTypeTranslation.SdnString)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4NewTypeTranslation_SdnString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4NewTypeTranslation_SdnString::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P4NewTypeTranslation_SdnString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[35]);
}

// ===================================================================

class P4NewTypeTranslation::_Internal {
 public:
  static const ::p4::config::v1::P4NewTypeTranslation_SdnString& sdn_string(const P4NewTypeTranslation* msg);
};

const ::p4::config::v1::P4NewTypeTranslation_SdnString&
P4NewTypeTranslation::_Internal::sdn_string(const P4NewTypeTranslation* msg) {
  return *msg->sdn_type_.sdn_string_;
}
void P4NewTypeTranslation::set_allocated_sdn_string(::p4::config::v1::P4NewTypeTranslation_SdnString* sdn_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sdn_type();
  if (sdn_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NewTypeTranslation_SdnString>::GetOwningArena(sdn_string);
    if (message_arena != submessage_arena) {
      sdn_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdn_string, submessage_arena);
    }
    set_has_sdn_string();
    sdn_type_.sdn_string_ = sdn_string;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4NewTypeTranslation.sdn_string)
}
P4NewTypeTranslation::P4NewTypeTranslation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4NewTypeTranslation)
}
P4NewTypeTranslation::P4NewTypeTranslation(const P4NewTypeTranslation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  clear_has_sdn_type();
  switch (from.sdn_type_case()) {
    case kSdnBitwidth: {
      _internal_set_sdn_bitwidth(from._internal_sdn_bitwidth());
      break;
    }
    case kSdnString: {
      _internal_mutable_sdn_string()->::p4::config::v1::P4NewTypeTranslation_SdnString::MergeFrom(from._internal_sdn_string());
      break;
    }
    case SDN_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4NewTypeTranslation)
}

void P4NewTypeTranslation::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_sdn_type();
}

P4NewTypeTranslation::~P4NewTypeTranslation() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4NewTypeTranslation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4NewTypeTranslation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_sdn_type()) {
    clear_sdn_type();
  }
}

void P4NewTypeTranslation::ArenaDtor(void* object) {
  P4NewTypeTranslation* _this = reinterpret_cast< P4NewTypeTranslation* >(object);
  (void)_this;
}
void P4NewTypeTranslation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4NewTypeTranslation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4NewTypeTranslation::clear_sdn_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.P4NewTypeTranslation)
  switch (sdn_type_case()) {
    case kSdnBitwidth: {
      // No need to clear
      break;
    }
    case kSdnString: {
      if (GetArenaForAllocation() == nullptr) {
        delete sdn_type_.sdn_string_;
      }
      break;
    }
    case SDN_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SDN_TYPE_NOT_SET;
}


void P4NewTypeTranslation::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4NewTypeTranslation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  clear_sdn_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4NewTypeTranslation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4NewTypeTranslation.uri"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sdn_bitwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_sdn_bitwidth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NewTypeTranslation.SdnString sdn_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdn_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4NewTypeTranslation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4NewTypeTranslation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4NewTypeTranslation.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // int32 sdn_bitwidth = 2;
  if (_internal_has_sdn_bitwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sdn_bitwidth(), target);
  }

  // .p4.config.v1.P4NewTypeTranslation.SdnString sdn_string = 3;
  if (_internal_has_sdn_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sdn_string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4NewTypeTranslation)
  return target;
}

size_t P4NewTypeTranslation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4NewTypeTranslation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  switch (sdn_type_case()) {
    // int32 sdn_bitwidth = 2;
    case kSdnBitwidth: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sdn_bitwidth());
      break;
    }
    // .p4.config.v1.P4NewTypeTranslation.SdnString sdn_string = 3;
    case kSdnString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sdn_type_.sdn_string_);
      break;
    }
    case SDN_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4NewTypeTranslation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4NewTypeTranslation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4NewTypeTranslation::GetClassData() const { return &_class_data_; }

void P4NewTypeTranslation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4NewTypeTranslation *>(to)->MergeFrom(
      static_cast<const P4NewTypeTranslation &>(from));
}


void P4NewTypeTranslation::MergeFrom(const P4NewTypeTranslation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4NewTypeTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _internal_set_uri(from._internal_uri());
  }
  switch (from.sdn_type_case()) {
    case kSdnBitwidth: {
      _internal_set_sdn_bitwidth(from._internal_sdn_bitwidth());
      break;
    }
    case kSdnString: {
      _internal_mutable_sdn_string()->::p4::config::v1::P4NewTypeTranslation_SdnString::MergeFrom(from._internal_sdn_string());
      break;
    }
    case SDN_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4NewTypeTranslation::CopyFrom(const P4NewTypeTranslation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4NewTypeTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4NewTypeTranslation::IsInitialized() const {
  return true;
}

void P4NewTypeTranslation::InternalSwap(P4NewTypeTranslation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  swap(sdn_type_, other->sdn_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4NewTypeTranslation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[36]);
}

// ===================================================================

class P4NewTypeSpec::_Internal {
 public:
  static const ::p4::config::v1::P4DataTypeSpec& original_type(const P4NewTypeSpec* msg);
  static const ::p4::config::v1::P4NewTypeTranslation& translated_type(const P4NewTypeSpec* msg);
};

const ::p4::config::v1::P4DataTypeSpec&
P4NewTypeSpec::_Internal::original_type(const P4NewTypeSpec* msg) {
  return *msg->representation_.original_type_;
}
const ::p4::config::v1::P4NewTypeTranslation&
P4NewTypeSpec::_Internal::translated_type(const P4NewTypeSpec* msg) {
  return *msg->representation_.translated_type_;
}
void P4NewTypeSpec::set_allocated_original_type(::p4::config::v1::P4DataTypeSpec* original_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_representation();
  if (original_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4DataTypeSpec>::GetOwningArena(original_type);
    if (message_arena != submessage_arena) {
      original_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_type, submessage_arena);
    }
    set_has_original_type();
    representation_.original_type_ = original_type;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4NewTypeSpec.original_type)
}
void P4NewTypeSpec::set_allocated_translated_type(::p4::config::v1::P4NewTypeTranslation* translated_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_representation();
  if (translated_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NewTypeTranslation>::GetOwningArena(translated_type);
    if (message_arena != submessage_arena) {
      translated_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translated_type, submessage_arena);
    }
    set_has_translated_type();
    representation_.translated_type_ = translated_type;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4NewTypeSpec.translated_type)
}
P4NewTypeSpec::P4NewTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4NewTypeSpec)
}
P4NewTypeSpec::P4NewTypeSpec(const P4NewTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_representation();
  switch (from.representation_case()) {
    case kOriginalType: {
      _internal_mutable_original_type()->::p4::config::v1::P4DataTypeSpec::MergeFrom(from._internal_original_type());
      break;
    }
    case kTranslatedType: {
      _internal_mutable_translated_type()->::p4::config::v1::P4NewTypeTranslation::MergeFrom(from._internal_translated_type());
      break;
    }
    case REPRESENTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4NewTypeSpec)
}

void P4NewTypeSpec::SharedCtor() {
clear_has_representation();
}

P4NewTypeSpec::~P4NewTypeSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4NewTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4NewTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_representation()) {
    clear_representation();
  }
}

void P4NewTypeSpec::ArenaDtor(void* object) {
  P4NewTypeSpec* _this = reinterpret_cast< P4NewTypeSpec* >(object);
  (void)_this;
}
void P4NewTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4NewTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4NewTypeSpec::clear_representation() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.P4NewTypeSpec)
  switch (representation_case()) {
    case kOriginalType: {
      if (GetArenaForAllocation() == nullptr) {
        delete representation_.original_type_;
      }
      break;
    }
    case kTranslatedType: {
      if (GetArenaForAllocation() == nullptr) {
        delete representation_.translated_type_;
      }
      break;
    }
    case REPRESENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPRESENTATION_NOT_SET;
}


void P4NewTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4NewTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  clear_representation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4NewTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.P4DataTypeSpec original_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NewTypeTranslation translated_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translated_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.P4NewTypeSpec.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4NewTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4NewTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.P4DataTypeSpec original_type = 1;
  if (_internal_has_original_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::original_type(this), target, stream);
  }

  // .p4.config.v1.P4NewTypeTranslation translated_type = 2;
  if (_internal_has_translated_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translated_type(this), target, stream);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.P4NewTypeSpec.annotations");
    target = stream->WriteString(3, s, target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4NewTypeSpec)
  return target;
}

size_t P4NewTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4NewTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (representation_case()) {
    // .p4.config.v1.P4DataTypeSpec original_type = 1;
    case kOriginalType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *representation_.original_type_);
      break;
    }
    // .p4.config.v1.P4NewTypeTranslation translated_type = 2;
    case kTranslatedType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *representation_.translated_type_);
      break;
    }
    case REPRESENTATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4NewTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4NewTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4NewTypeSpec::GetClassData() const { return &_class_data_; }

void P4NewTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4NewTypeSpec *>(to)->MergeFrom(
      static_cast<const P4NewTypeSpec &>(from));
}


void P4NewTypeSpec::MergeFrom(const P4NewTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4NewTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  switch (from.representation_case()) {
    case kOriginalType: {
      _internal_mutable_original_type()->::p4::config::v1::P4DataTypeSpec::MergeFrom(from._internal_original_type());
      break;
    }
    case kTranslatedType: {
      _internal_mutable_translated_type()->::p4::config::v1::P4NewTypeTranslation::MergeFrom(from._internal_translated_type());
      break;
    }
    case REPRESENTATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4NewTypeSpec::CopyFrom(const P4NewTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4NewTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4NewTypeSpec::IsInitialized() const {
  return true;
}

void P4NewTypeSpec::InternalSwap(P4NewTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  swap(representation_, other->representation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata P4NewTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4types_2eproto[37]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TypeInfo* Arena::CreateMaybeMessage< ::p4::config::v1::P4TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4DataTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4DataTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4DataTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4NamedType* Arena::CreateMaybeMessage< ::p4::config::v1::P4NamedType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4NamedType >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4BoolType* Arena::CreateMaybeMessage< ::p4::config::v1::P4BoolType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4BoolType >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4ErrorType* Arena::CreateMaybeMessage< ::p4::config::v1::P4ErrorType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4ErrorType >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4BitstringLikeTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4BitstringLikeTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4BitstringLikeTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4BitTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4BitTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4BitTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4IntTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4IntTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4IntTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4VarbitTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4VarbitTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4VarbitTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4TupleTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4TupleTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4TupleTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4StructTypeSpec_Member* Arena::CreateMaybeMessage< ::p4::config::v1::P4StructTypeSpec_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4StructTypeSpec_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4StructTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4StructTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4StructTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderTypeSpec_Member* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderTypeSpec_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderTypeSpec_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderUnionTypeSpec_Member* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderUnionTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderUnionTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderUnionTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderStackTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderStackTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderStackTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4HeaderUnionStackTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4HeaderUnionStackTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4HeaderUnionStackTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::KeyValuePair* Arena::CreateMaybeMessage< ::p4::config::v1::KeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::KeyValuePairList* Arena::CreateMaybeMessage< ::p4::config::v1::KeyValuePairList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::KeyValuePairList >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Expression* Arena::CreateMaybeMessage< ::p4::config::v1::Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ExpressionList* Arena::CreateMaybeMessage< ::p4::config::v1::ExpressionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ExpressionList >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::StructuredAnnotation* Arena::CreateMaybeMessage< ::p4::config::v1::StructuredAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::StructuredAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::SourceLocation* Arena::CreateMaybeMessage< ::p4::config::v1::SourceLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::SourceLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4EnumTypeSpec_Member* Arena::CreateMaybeMessage< ::p4::config::v1::P4EnumTypeSpec_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4EnumTypeSpec_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4EnumTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4EnumTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4EnumTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4SerializableEnumTypeSpec_Member* Arena::CreateMaybeMessage< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4SerializableEnumTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4SerializableEnumTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4SerializableEnumTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4ErrorTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4ErrorTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4ErrorTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4NewTypeTranslation_SdnString* Arena::CreateMaybeMessage< ::p4::config::v1::P4NewTypeTranslation_SdnString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4NewTypeTranslation_SdnString >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4NewTypeTranslation* Arena::CreateMaybeMessage< ::p4::config::v1::P4NewTypeTranslation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4NewTypeTranslation >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4NewTypeSpec* Arena::CreateMaybeMessage< ::p4::config::v1::P4NewTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4NewTypeSpec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
