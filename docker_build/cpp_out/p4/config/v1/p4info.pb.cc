// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/config/v1/p4info.proto

#include "p4/config/v1/p4info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace p4 {
namespace config {
namespace v1 {
constexpr P4Info::P4Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tables_()
  , actions_()
  , action_profiles_()
  , counters_()
  , direct_counters_()
  , meters_()
  , direct_meters_()
  , controller_packet_metadata_()
  , value_sets_()
  , registers_()
  , digests_()
  , externs_()
  , pkg_info_(nullptr)
  , type_info_(nullptr){}
struct P4InfoDefaultTypeInternal {
  constexpr P4InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4InfoDefaultTypeInternal() {}
  union {
    P4Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4InfoDefaultTypeInternal _P4Info_default_instance_;
constexpr Documentation::Documentation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brief_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DocumentationDefaultTypeInternal {
  constexpr DocumentationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentationDefaultTypeInternal() {}
  union {
    Documentation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentationDefaultTypeInternal _Documentation_default_instance_;
constexpr PkgInfo::PkgInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contact_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , doc_(nullptr){}
struct PkgInfoDefaultTypeInternal {
  constexpr PkgInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PkgInfoDefaultTypeInternal() {}
  union {
    PkgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PkgInfoDefaultTypeInternal _PkgInfo_default_instance_;
constexpr P4Ids::P4Ids(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct P4IdsDefaultTypeInternal {
  constexpr P4IdsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P4IdsDefaultTypeInternal() {}
  union {
    P4Ids _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P4IdsDefaultTypeInternal _P4Ids_default_instance_;
constexpr Preamble::Preamble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , doc_(nullptr)
  , id_(0u){}
struct PreambleDefaultTypeInternal {
  constexpr PreambleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreambleDefaultTypeInternal() {}
  union {
    Preamble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreambleDefaultTypeInternal _Preamble_default_instance_;
constexpr Extern::Extern(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instances_()
  , extern_type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extern_type_id_(0u){}
struct ExternDefaultTypeInternal {
  constexpr ExternDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternDefaultTypeInternal() {}
  union {
    Extern _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternDefaultTypeInternal _Extern_default_instance_;
constexpr ExternInstance::ExternInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , info_(nullptr){}
struct ExternInstanceDefaultTypeInternal {
  constexpr ExternInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternInstanceDefaultTypeInternal() {}
  union {
    ExternInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternInstanceDefaultTypeInternal _ExternInstance_default_instance_;
constexpr MatchField::MatchField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , doc_(nullptr)
  , type_name_(nullptr)
  , id_(0u)
  , bitwidth_(0)
  , _oneof_case_{}{}
struct MatchFieldDefaultTypeInternal {
  constexpr MatchFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchFieldDefaultTypeInternal() {}
  union {
    MatchField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchFieldDefaultTypeInternal _MatchField_default_instance_;
constexpr Table::Table(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_fields_()
  , action_refs_()
  , direct_resource_ids_()
  , _direct_resource_ids_cached_byte_size_(0)
  , preamble_(nullptr)
  , other_properties_(nullptr)
  , const_default_action_id_(0u)
  , implementation_id_(0u)
  , size_(int64_t{0})
  , idle_timeout_behavior_(0)

  , is_const_table_(false){}
struct TableDefaultTypeInternal {
  constexpr TableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDefaultTypeInternal _Table_default_instance_;
constexpr ActionRef::ActionRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , id_(0u)
  , scope_(0)
{}
struct ActionRefDefaultTypeInternal {
  constexpr ActionRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionRefDefaultTypeInternal() {}
  union {
    ActionRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionRefDefaultTypeInternal _ActionRef_default_instance_;
constexpr Action_Param::Action_Param(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , doc_(nullptr)
  , type_name_(nullptr)
  , id_(0u)
  , bitwidth_(0){}
struct Action_ParamDefaultTypeInternal {
  constexpr Action_ParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Action_ParamDefaultTypeInternal() {}
  union {
    Action_Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Action_ParamDefaultTypeInternal _Action_Param_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , preamble_(nullptr){}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr ActionProfile::ActionProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_ids_()
  , _table_ids_cached_byte_size_(0)
  , preamble_(nullptr)
  , size_(int64_t{0})
  , with_selector_(false)
  , max_group_size_(0){}
struct ActionProfileDefaultTypeInternal {
  constexpr ActionProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProfileDefaultTypeInternal() {}
  union {
    ActionProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProfileDefaultTypeInternal _ActionProfile_default_instance_;
constexpr CounterSpec::CounterSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
{}
struct CounterSpecDefaultTypeInternal {
  constexpr CounterSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CounterSpecDefaultTypeInternal() {}
  union {
    CounterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CounterSpecDefaultTypeInternal _CounterSpec_default_instance_;
constexpr Counter::Counter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , spec_(nullptr)
  , index_type_name_(nullptr)
  , size_(int64_t{0}){}
struct CounterDefaultTypeInternal {
  constexpr CounterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CounterDefaultTypeInternal() {}
  union {
    Counter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CounterDefaultTypeInternal _Counter_default_instance_;
constexpr DirectCounter::DirectCounter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , spec_(nullptr)
  , direct_table_id_(0u){}
struct DirectCounterDefaultTypeInternal {
  constexpr DirectCounterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectCounterDefaultTypeInternal() {}
  union {
    DirectCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectCounterDefaultTypeInternal _DirectCounter_default_instance_;
constexpr MeterSpec::MeterSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
{}
struct MeterSpecDefaultTypeInternal {
  constexpr MeterSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterSpecDefaultTypeInternal() {}
  union {
    MeterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterSpecDefaultTypeInternal _MeterSpec_default_instance_;
constexpr Meter::Meter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , spec_(nullptr)
  , index_type_name_(nullptr)
  , size_(int64_t{0}){}
struct MeterDefaultTypeInternal {
  constexpr MeterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterDefaultTypeInternal() {}
  union {
    Meter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterDefaultTypeInternal _Meter_default_instance_;
constexpr DirectMeter::DirectMeter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , spec_(nullptr)
  , direct_table_id_(0u){}
struct DirectMeterDefaultTypeInternal {
  constexpr DirectMeterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectMeterDefaultTypeInternal() {}
  union {
    DirectMeter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectMeterDefaultTypeInternal _DirectMeter_default_instance_;
constexpr ControllerPacketMetadata_Metadata::ControllerPacketMetadata_Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , structured_annotations_()
  , annotation_locations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_name_(nullptr)
  , id_(0u)
  , bitwidth_(0){}
struct ControllerPacketMetadata_MetadataDefaultTypeInternal {
  constexpr ControllerPacketMetadata_MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPacketMetadata_MetadataDefaultTypeInternal() {}
  union {
    ControllerPacketMetadata_Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPacketMetadata_MetadataDefaultTypeInternal _ControllerPacketMetadata_Metadata_default_instance_;
constexpr ControllerPacketMetadata::ControllerPacketMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_()
  , preamble_(nullptr){}
struct ControllerPacketMetadataDefaultTypeInternal {
  constexpr ControllerPacketMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPacketMetadataDefaultTypeInternal() {}
  union {
    ControllerPacketMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPacketMetadataDefaultTypeInternal _ControllerPacketMetadata_default_instance_;
constexpr ValueSet::ValueSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_()
  , preamble_(nullptr)
  , size_(0){}
struct ValueSetDefaultTypeInternal {
  constexpr ValueSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueSetDefaultTypeInternal() {}
  union {
    ValueSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueSetDefaultTypeInternal _ValueSet_default_instance_;
constexpr Register::Register(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , type_spec_(nullptr)
  , index_type_name_(nullptr)
  , size_(0){}
struct RegisterDefaultTypeInternal {
  constexpr RegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterDefaultTypeInternal() {}
  union {
    Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterDefaultTypeInternal _Register_default_instance_;
constexpr Digest::Digest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preamble_(nullptr)
  , type_spec_(nullptr){}
struct DigestDefaultTypeInternal {
  constexpr DigestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigestDefaultTypeInternal() {}
  union {
    Digest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigestDefaultTypeInternal _Digest_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace p4
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, pkg_info_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, tables_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, actions_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, action_profiles_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, counters_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, direct_counters_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, meters_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, direct_meters_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, controller_packet_metadata_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, value_sets_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, registers_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, digests_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, externs_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Info, type_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Documentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Documentation, brief_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Documentation, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, version_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, doc_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, arch_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, organization_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, contact_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, url_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::PkgInfo, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::P4Ids, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, alias_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, doc_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Preamble, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Extern, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Extern, extern_type_id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Extern, extern_type_name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Extern, instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ExternInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ExternInstance, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ExternInstance, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, bitwidth_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, doc_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, type_name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, structured_annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MatchField, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, match_fields_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, action_refs_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, const_default_action_id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, implementation_id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, direct_resource_ids_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, size_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, idle_timeout_behavior_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, is_const_table_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Table, other_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, scope_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionRef, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, bitwidth_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, doc_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, type_name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action_Param, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Action, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, table_ids_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, with_selector_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, size_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ActionProfile, max_group_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::CounterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::CounterSpec, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Counter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Counter, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Counter, spec_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Counter, size_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Counter, index_type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectCounter, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectCounter, spec_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectCounter, direct_table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MeterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::MeterSpec, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Meter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Meter, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Meter, spec_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Meter, size_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Meter, index_type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectMeter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectMeter, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectMeter, spec_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::DirectMeter, direct_table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, id_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, annotations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, annotation_locations_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, bitwidth_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, type_name_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata_Metadata, structured_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ControllerPacketMetadata, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ValueSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ValueSet, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ValueSet, match_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::ValueSet, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Register, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Register, type_spec_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Register, size_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Register, index_type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Digest, preamble_),
  PROTOBUF_FIELD_OFFSET(::p4::config::v1::Digest, type_spec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::p4::config::v1::P4Info)},
  { 20, -1, -1, sizeof(::p4::config::v1::Documentation)},
  { 28, -1, -1, sizeof(::p4::config::v1::PkgInfo)},
  { 44, -1, -1, sizeof(::p4::config::v1::P4Ids)},
  { 50, -1, -1, sizeof(::p4::config::v1::Preamble)},
  { 63, -1, -1, sizeof(::p4::config::v1::Extern)},
  { 72, -1, -1, sizeof(::p4::config::v1::ExternInstance)},
  { 80, -1, -1, sizeof(::p4::config::v1::MatchField)},
  { 97, -1, -1, sizeof(::p4::config::v1::Table)},
  { 113, -1, -1, sizeof(::p4::config::v1::ActionRef)},
  { 124, -1, -1, sizeof(::p4::config::v1::Action_Param)},
  { 138, -1, -1, sizeof(::p4::config::v1::Action)},
  { 146, -1, -1, sizeof(::p4::config::v1::ActionProfile)},
  { 157, -1, -1, sizeof(::p4::config::v1::CounterSpec)},
  { 164, -1, -1, sizeof(::p4::config::v1::Counter)},
  { 174, -1, -1, sizeof(::p4::config::v1::DirectCounter)},
  { 183, -1, -1, sizeof(::p4::config::v1::MeterSpec)},
  { 190, -1, -1, sizeof(::p4::config::v1::Meter)},
  { 200, -1, -1, sizeof(::p4::config::v1::DirectMeter)},
  { 209, -1, -1, sizeof(::p4::config::v1::ControllerPacketMetadata_Metadata)},
  { 222, -1, -1, sizeof(::p4::config::v1::ControllerPacketMetadata)},
  { 230, -1, -1, sizeof(::p4::config::v1::ValueSet)},
  { 239, -1, -1, sizeof(::p4::config::v1::Register)},
  { 249, -1, -1, sizeof(::p4::config::v1::Digest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Documentation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_PkgInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_P4Ids_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Preamble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Extern_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ExternInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_MatchField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ActionRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Action_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ActionProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_CounterSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Counter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_DirectCounter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_MeterSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Meter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_DirectMeter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ControllerPacketMetadata_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ControllerPacketMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_ValueSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::p4::config::v1::_Digest_default_instance_),
};

const char descriptor_table_protodef_p4_2fconfig_2fv1_2fp4info_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031p4/config/v1/p4info.proto\022\014p4.config.v"
  "1\032\031google/protobuf/any.proto\032\032p4/config/"
  "v1/p4types.proto\"\210\005\n\006P4Info\022\'\n\010pkg_info\030"
  "\001 \001(\0132\025.p4.config.v1.PkgInfo\022#\n\006tables\030\002"
  " \003(\0132\023.p4.config.v1.Table\022%\n\007actions\030\003 \003"
  "(\0132\024.p4.config.v1.Action\0224\n\017action_profi"
  "les\030\004 \003(\0132\033.p4.config.v1.ActionProfile\022\'"
  "\n\010counters\030\005 \003(\0132\025.p4.config.v1.Counter\022"
  "4\n\017direct_counters\030\006 \003(\0132\033.p4.config.v1."
  "DirectCounter\022#\n\006meters\030\007 \003(\0132\023.p4.confi"
  "g.v1.Meter\0220\n\rdirect_meters\030\010 \003(\0132\031.p4.c"
  "onfig.v1.DirectMeter\022J\n\032controller_packe"
  "t_metadata\030\t \003(\0132&.p4.config.v1.Controll"
  "erPacketMetadata\022*\n\nvalue_sets\030\n \003(\0132\026.p"
  "4.config.v1.ValueSet\022)\n\tregisters\030\013 \003(\0132"
  "\026.p4.config.v1.Register\022%\n\007digests\030\014 \003(\013"
  "2\024.p4.config.v1.Digest\022%\n\007externs\030d \003(\0132"
  "\024.p4.config.v1.Extern\022,\n\ttype_info\030\310\001 \001("
  "\0132\030.p4.config.v1.P4TypeInfo\"3\n\rDocumenta"
  "tion\022\r\n\005brief\030\001 \001(\t\022\023\n\013description\030\002 \001(\t"
  "\"\251\002\n\007PkgInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 "
  "\001(\t\022(\n\003doc\030\003 \001(\0132\033.p4.config.v1.Document"
  "ation\022\023\n\013annotations\030\004 \003(\t\022:\n\024annotation"
  "_locations\030\n \003(\0132\034.p4.config.v1.SourceLo"
  "cation\022\014\n\004arch\030\005 \001(\t\022\024\n\014organization\030\006 \001"
  "(\t\022\017\n\007contact\030\007 \001(\t\022\013\n\003url\030\010 \001(\t\022B\n\026stru"
  "ctured_annotations\030\t \003(\0132\".p4.config.v1."
  "StructuredAnnotation\"\207\002\n\005P4Ids\"\375\001\n\006Prefi"
  "x\022\017\n\013UNSPECIFIED\020\000\022\n\n\006ACTION\020\001\022\t\n\005TABLE\020"
  "\002\022\r\n\tVALUE_SET\020\003\022\025\n\021CONTROLLER_HEADER\020\004\022"
  "\025\n\021PSA_EXTERNS_START\020\020\022\022\n\016ACTION_PROFILE"
  "\020\021\022\013\n\007COUNTER\020\022\022\022\n\016DIRECT_COUNTER\020\023\022\t\n\005M"
  "ETER\020\024\022\020\n\014DIRECT_METER\020\025\022\014\n\010REGISTER\020\026\022\n"
  "\n\006DIGEST\020\027\022\030\n\023OTHER_EXTERNS_START\020\200\001\022\010\n\003"
  "MAX\020\377\001\"\362\001\n\010Preamble\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
  "\002 \001(\t\022\r\n\005alias\030\003 \001(\t\022\023\n\013annotations\030\004 \003("
  "\t\022:\n\024annotation_locations\030\007 \003(\0132\034.p4.con"
  "fig.v1.SourceLocation\022(\n\003doc\030\005 \001(\0132\033.p4."
  "config.v1.Documentation\022B\n\026structured_an"
  "notations\030\006 \003(\0132\".p4.config.v1.Structure"
  "dAnnotation\"k\n\006Extern\022\026\n\016extern_type_id\030"
  "\001 \001(\r\022\030\n\020extern_type_name\030\002 \001(\t\022/\n\tinsta"
  "nces\030\003 \003(\0132\034.p4.config.v1.ExternInstance"
  "\"^\n\016ExternInstance\022(\n\010preamble\030\001 \001(\0132\026.p"
  "4.config.v1.Preamble\022\"\n\004info\030\002 \001(\0132\024.goo"
  "gle.protobuf.Any\"\334\003\n\nMatchField\022\n\n\002id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\022\023\n\013annotations\030\003 \003(\t\022:"
  "\n\024annotation_locations\030\n \003(\0132\034.p4.config"
  ".v1.SourceLocation\022\020\n\010bitwidth\030\004 \001(\005\0228\n\n"
  "match_type\030\005 \001(\0162\".p4.config.v1.MatchFie"
  "ld.MatchTypeH\000\022\032\n\020other_match_type\030\007 \001(\t"
  "H\000\022(\n\003doc\030\006 \001(\0132\033.p4.config.v1.Documenta"
  "tion\022,\n\ttype_name\030\010 \001(\0132\031.p4.config.v1.P"
  "4NamedType\022B\n\026structured_annotations\030\t \003"
  "(\0132\".p4.config.v1.StructuredAnnotation\"V"
  "\n\tMatchType\022\017\n\013UNSPECIFIED\020\000\022\t\n\005EXACT\020\002\022"
  "\007\n\003LPM\020\003\022\013\n\007TERNARY\020\004\022\t\n\005RANGE\020\005\022\014\n\010OPTI"
  "ONAL\020\006B\007\n\005match\"\301\003\n\005Table\022(\n\010preamble\030\001 "
  "\001(\0132\026.p4.config.v1.Preamble\022.\n\014match_fie"
  "lds\030\002 \003(\0132\030.p4.config.v1.MatchField\022,\n\013a"
  "ction_refs\030\003 \003(\0132\027.p4.config.v1.ActionRe"
  "f\022\037\n\027const_default_action_id\030\004 \001(\r\022\031\n\021im"
  "plementation_id\030\006 \001(\r\022\033\n\023direct_resource"
  "_ids\030\007 \003(\r\022\014\n\004size\030\010 \001(\003\022F\n\025idle_timeout"
  "_behavior\030\t \001(\0162\'.p4.config.v1.Table.Idl"
  "eTimeoutBehavior\022\026\n\016is_const_table\030\n \001(\010"
  "\022.\n\020other_properties\030d \001(\0132\024.google.prot"
  "obuf.Any\"9\n\023IdleTimeoutBehavior\022\016\n\nNO_TI"
  "MEOUT\020\000\022\022\n\016NOTIFY_CONTROL\020\001\"\234\002\n\tActionRe"
  "f\022\n\n\002id\030\001 \001(\r\022,\n\005scope\030\003 \001(\0162\035.p4.config"
  ".v1.ActionRef.Scope\022\023\n\013annotations\030\002 \003(\t"
  "\022:\n\024annotation_locations\030\005 \003(\0132\034.p4.conf"
  "ig.v1.SourceLocation\022B\n\026structured_annot"
  "ations\030\004 \003(\0132\".p4.config.v1.StructuredAn"
  "notation\"@\n\005Scope\022\025\n\021TABLE_AND_DEFAULT\020\000"
  "\022\016\n\nTABLE_ONLY\020\001\022\020\n\014DEFAULT_ONLY\020\002\"\201\003\n\006A"
  "ction\022(\n\010preamble\030\001 \001(\0132\026.p4.config.v1.P"
  "reamble\022*\n\006params\030\002 \003(\0132\032.p4.config.v1.A"
  "ction.Param\032\240\002\n\005Param\022\n\n\002id\030\001 \001(\r\022\014\n\004nam"
  "e\030\002 \001(\t\022\023\n\013annotations\030\003 \003(\t\022:\n\024annotati"
  "on_locations\030\010 \003(\0132\034.p4.config.v1.Source"
  "Location\022\020\n\010bitwidth\030\004 \001(\005\022(\n\003doc\030\005 \001(\0132"
  "\033.p4.config.v1.Documentation\022,\n\ttype_nam"
  "e\030\006 \001(\0132\031.p4.config.v1.P4NamedType\022B\n\026st"
  "ructured_annotations\030\007 \003(\0132\".p4.config.v"
  "1.StructuredAnnotation\"\211\001\n\rActionProfile"
  "\022(\n\010preamble\030\001 \001(\0132\026.p4.config.v1.Preamb"
  "le\022\021\n\ttable_ids\030\002 \003(\r\022\025\n\rwith_selector\030\003"
  " \001(\010\022\014\n\004size\030\004 \001(\003\022\026\n\016max_group_size\030\005 \001"
  "(\005\"v\n\013CounterSpec\022,\n\004unit\030\001 \001(\0162\036.p4.con"
  "fig.v1.CounterSpec.Unit\"9\n\004Unit\022\017\n\013UNSPE"
  "CIFIED\020\000\022\t\n\005BYTES\020\001\022\013\n\007PACKETS\020\002\022\010\n\004BOTH"
  "\020\003\"\236\001\n\007Counter\022(\n\010preamble\030\001 \001(\0132\026.p4.co"
  "nfig.v1.Preamble\022\'\n\004spec\030\002 \001(\0132\031.p4.conf"
  "ig.v1.CounterSpec\022\014\n\004size\030\003 \001(\003\0222\n\017index"
  "_type_name\030\004 \001(\0132\031.p4.config.v1.P4NamedT"
  "ype\"{\n\rDirectCounter\022(\n\010preamble\030\001 \001(\0132\026"
  ".p4.config.v1.Preamble\022\'\n\004spec\030\002 \001(\0132\031.p"
  "4.config.v1.CounterSpec\022\027\n\017direct_table_"
  "id\030\003 \001(\r\"h\n\tMeterSpec\022*\n\004unit\030\001 \001(\0162\034.p4"
  ".config.v1.MeterSpec.Unit\"/\n\004Unit\022\017\n\013UNS"
  "PECIFIED\020\000\022\t\n\005BYTES\020\001\022\013\n\007PACKETS\020\002\"\232\001\n\005M"
  "eter\022(\n\010preamble\030\001 \001(\0132\026.p4.config.v1.Pr"
  "eamble\022%\n\004spec\030\002 \001(\0132\027.p4.config.v1.Mete"
  "rSpec\022\014\n\004size\030\003 \001(\003\0222\n\017index_type_name\030\004"
  " \001(\0132\031.p4.config.v1.P4NamedType\"w\n\013Direc"
  "tMeter\022(\n\010preamble\030\001 \001(\0132\026.p4.config.v1."
  "Preamble\022%\n\004spec\030\002 \001(\0132\027.p4.config.v1.Me"
  "terSpec\022\027\n\017direct_table_id\030\003 \001(\r\"\203\003\n\030Con"
  "trollerPacketMetadata\022(\n\010preamble\030\001 \001(\0132"
  "\026.p4.config.v1.Preamble\022A\n\010metadata\030\002 \003("
  "\0132/.p4.config.v1.ControllerPacketMetadat"
  "a.Metadata\032\371\001\n\010Metadata\022\n\n\002id\030\001 \001(\r\022\014\n\004n"
  "ame\030\002 \001(\t\022\023\n\013annotations\030\003 \003(\t\022:\n\024annota"
  "tion_locations\030\007 \003(\0132\034.p4.config.v1.Sour"
  "ceLocation\022\020\n\010bitwidth\030\004 \001(\005\022,\n\ttype_nam"
  "e\030\005 \001(\0132\031.p4.config.v1.P4NamedType\022B\n\026st"
  "ructured_annotations\030\006 \003(\0132\".p4.config.v"
  "1.StructuredAnnotation\"k\n\010ValueSet\022(\n\010pr"
  "eamble\030\001 \001(\0132\026.p4.config.v1.Preamble\022\'\n\005"
  "match\030\002 \003(\0132\030.p4.config.v1.MatchField\022\014\n"
  "\004size\030\003 \001(\005\"\247\001\n\010Register\022(\n\010preamble\030\001 \001"
  "(\0132\026.p4.config.v1.Preamble\022/\n\ttype_spec\030"
  "\002 \001(\0132\034.p4.config.v1.P4DataTypeSpec\022\014\n\004s"
  "ize\030\003 \001(\005\0222\n\017index_type_name\030\004 \001(\0132\031.p4."
  "config.v1.P4NamedType\"c\n\006Digest\022(\n\010pream"
  "ble\030\001 \001(\0132\026.p4.config.v1.Preamble\022/\n\ttyp"
  "e_spec\030\002 \001(\0132\034.p4.config.v1.P4DataTypeSp"
  "ecB-Z+github.com/p4lang/p4runtime/go/p4/"
  "config/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto = {
  false, false, 5177, descriptor_table_protodef_p4_2fconfig_2fv1_2fp4info_2eproto, "p4/config/v1/p4info.proto", 
  &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once, descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_deps, 2, 24,
  schemas, file_default_instances, TableStruct_p4_2fconfig_2fv1_2fp4info_2eproto::offsets,
  file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto, file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto, file_level_service_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter() {
  return &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p4_2fconfig_2fv1_2fp4info_2eproto(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
namespace p4 {
namespace config {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P4Ids_Prefix_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[0];
}
bool P4Ids_Prefix_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 128:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr P4Ids_Prefix P4Ids::UNSPECIFIED;
constexpr P4Ids_Prefix P4Ids::ACTION;
constexpr P4Ids_Prefix P4Ids::TABLE;
constexpr P4Ids_Prefix P4Ids::VALUE_SET;
constexpr P4Ids_Prefix P4Ids::CONTROLLER_HEADER;
constexpr P4Ids_Prefix P4Ids::PSA_EXTERNS_START;
constexpr P4Ids_Prefix P4Ids::ACTION_PROFILE;
constexpr P4Ids_Prefix P4Ids::COUNTER;
constexpr P4Ids_Prefix P4Ids::DIRECT_COUNTER;
constexpr P4Ids_Prefix P4Ids::METER;
constexpr P4Ids_Prefix P4Ids::DIRECT_METER;
constexpr P4Ids_Prefix P4Ids::REGISTER;
constexpr P4Ids_Prefix P4Ids::DIGEST;
constexpr P4Ids_Prefix P4Ids::OTHER_EXTERNS_START;
constexpr P4Ids_Prefix P4Ids::MAX;
constexpr P4Ids_Prefix P4Ids::Prefix_MIN;
constexpr P4Ids_Prefix P4Ids::Prefix_MAX;
constexpr int P4Ids::Prefix_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchField_MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[1];
}
bool MatchField_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MatchField_MatchType MatchField::UNSPECIFIED;
constexpr MatchField_MatchType MatchField::EXACT;
constexpr MatchField_MatchType MatchField::LPM;
constexpr MatchField_MatchType MatchField::TERNARY;
constexpr MatchField_MatchType MatchField::RANGE;
constexpr MatchField_MatchType MatchField::OPTIONAL;
constexpr MatchField_MatchType MatchField::MatchType_MIN;
constexpr MatchField_MatchType MatchField::MatchType_MAX;
constexpr int MatchField::MatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Table_IdleTimeoutBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[2];
}
bool Table_IdleTimeoutBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Table_IdleTimeoutBehavior Table::NO_TIMEOUT;
constexpr Table_IdleTimeoutBehavior Table::NOTIFY_CONTROL;
constexpr Table_IdleTimeoutBehavior Table::IdleTimeoutBehavior_MIN;
constexpr Table_IdleTimeoutBehavior Table::IdleTimeoutBehavior_MAX;
constexpr int Table::IdleTimeoutBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionRef_Scope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[3];
}
bool ActionRef_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionRef_Scope ActionRef::TABLE_AND_DEFAULT;
constexpr ActionRef_Scope ActionRef::TABLE_ONLY;
constexpr ActionRef_Scope ActionRef::DEFAULT_ONLY;
constexpr ActionRef_Scope ActionRef::Scope_MIN;
constexpr ActionRef_Scope ActionRef::Scope_MAX;
constexpr int ActionRef::Scope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterSpec_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[4];
}
bool CounterSpec_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CounterSpec_Unit CounterSpec::UNSPECIFIED;
constexpr CounterSpec_Unit CounterSpec::BYTES;
constexpr CounterSpec_Unit CounterSpec::PACKETS;
constexpr CounterSpec_Unit CounterSpec::BOTH;
constexpr CounterSpec_Unit CounterSpec::Unit_MIN;
constexpr CounterSpec_Unit CounterSpec::Unit_MAX;
constexpr int CounterSpec::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeterSpec_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto);
  return file_level_enum_descriptors_p4_2fconfig_2fv1_2fp4info_2eproto[5];
}
bool MeterSpec_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MeterSpec_Unit MeterSpec::UNSPECIFIED;
constexpr MeterSpec_Unit MeterSpec::BYTES;
constexpr MeterSpec_Unit MeterSpec::PACKETS;
constexpr MeterSpec_Unit MeterSpec::Unit_MIN;
constexpr MeterSpec_Unit MeterSpec::Unit_MAX;
constexpr int MeterSpec::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class P4Info::_Internal {
 public:
  static const ::p4::config::v1::PkgInfo& pkg_info(const P4Info* msg);
  static const ::p4::config::v1::P4TypeInfo& type_info(const P4Info* msg);
};

const ::p4::config::v1::PkgInfo&
P4Info::_Internal::pkg_info(const P4Info* msg) {
  return *msg->pkg_info_;
}
const ::p4::config::v1::P4TypeInfo&
P4Info::_Internal::type_info(const P4Info* msg) {
  return *msg->type_info_;
}
void P4Info::clear_type_info() {
  if (GetArenaForAllocation() == nullptr && type_info_ != nullptr) {
    delete type_info_;
  }
  type_info_ = nullptr;
}
P4Info::P4Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_(arena),
  actions_(arena),
  action_profiles_(arena),
  counters_(arena),
  direct_counters_(arena),
  meters_(arena),
  direct_meters_(arena),
  controller_packet_metadata_(arena),
  value_sets_(arena),
  registers_(arena),
  digests_(arena),
  externs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4Info)
}
P4Info::P4Info(const P4Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tables_(from.tables_),
      actions_(from.actions_),
      action_profiles_(from.action_profiles_),
      counters_(from.counters_),
      direct_counters_(from.direct_counters_),
      meters_(from.meters_),
      direct_meters_(from.direct_meters_),
      controller_packet_metadata_(from.controller_packet_metadata_),
      value_sets_(from.value_sets_),
      registers_(from.registers_),
      digests_(from.digests_),
      externs_(from.externs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pkg_info()) {
    pkg_info_ = new ::p4::config::v1::PkgInfo(*from.pkg_info_);
  } else {
    pkg_info_ = nullptr;
  }
  if (from._internal_has_type_info()) {
    type_info_ = new ::p4::config::v1::P4TypeInfo(*from.type_info_);
  } else {
    type_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4Info)
}

void P4Info::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pkg_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_info_) -
    reinterpret_cast<char*>(&pkg_info_)) + sizeof(type_info_));
}

P4Info::~P4Info() {
  // @@protoc_insertion_point(destructor:p4.config.v1.P4Info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void P4Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pkg_info_;
  if (this != internal_default_instance()) delete type_info_;
}

void P4Info::ArenaDtor(void* object) {
  P4Info* _this = reinterpret_cast< P4Info* >(object);
  (void)_this;
}
void P4Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P4Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P4Info::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.P4Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  actions_.Clear();
  action_profiles_.Clear();
  counters_.Clear();
  direct_counters_.Clear();
  meters_.Clear();
  direct_meters_.Clear();
  controller_packet_metadata_.Clear();
  value_sets_.Clear();
  registers_.Clear();
  digests_.Clear();
  externs_.Clear();
  if (GetArenaForAllocation() == nullptr && pkg_info_ != nullptr) {
    delete pkg_info_;
  }
  pkg_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_info_ != nullptr) {
    delete type_info_;
  }
  type_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P4Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.PkgInfo pkg_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pkg_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Table tables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Action actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ActionProfile action_profiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Counter counters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.DirectCounter direct_counters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_direct_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Meter meters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.DirectMeter direct_meters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_direct_meters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ControllerPacketMetadata controller_packet_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_packet_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ValueSet value_sets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Register registers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Digest digests = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_digests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Extern externs = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_externs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4TypeInfo type_info = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P4Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.P4Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.PkgInfo pkg_info = 1;
  if (this->_internal_has_pkg_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pkg_info(this), target, stream);
  }

  // repeated .p4.config.v1.Table tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tables(i), target, stream);
  }

  // repeated .p4.config.v1.Action actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_actions(i), target, stream);
  }

  // repeated .p4.config.v1.ActionProfile action_profiles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_profiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_action_profiles(i), target, stream);
  }

  // repeated .p4.config.v1.Counter counters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_counters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_counters(i), target, stream);
  }

  // repeated .p4.config.v1.DirectCounter direct_counters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_direct_counters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_direct_counters(i), target, stream);
  }

  // repeated .p4.config.v1.Meter meters = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_meters(i), target, stream);
  }

  // repeated .p4.config.v1.DirectMeter direct_meters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_direct_meters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_direct_meters(i), target, stream);
  }

  // repeated .p4.config.v1.ControllerPacketMetadata controller_packet_metadata = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_packet_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_controller_packet_metadata(i), target, stream);
  }

  // repeated .p4.config.v1.ValueSet value_sets = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_value_sets(i), target, stream);
  }

  // repeated .p4.config.v1.Register registers = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_registers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_registers(i), target, stream);
  }

  // repeated .p4.config.v1.Digest digests = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_digests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_digests(i), target, stream);
  }

  // repeated .p4.config.v1.Extern externs = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_externs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_externs(i), target, stream);
  }

  // .p4.config.v1.P4TypeInfo type_info = 200;
  if (this->_internal_has_type_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::type_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.P4Info)
  return target;
}

size_t P4Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.P4Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.Table tables = 2;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Action actions = 3;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.ActionProfile action_profiles = 4;
  total_size += 1UL * this->_internal_action_profiles_size();
  for (const auto& msg : this->action_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Counter counters = 5;
  total_size += 1UL * this->_internal_counters_size();
  for (const auto& msg : this->counters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.DirectCounter direct_counters = 6;
  total_size += 1UL * this->_internal_direct_counters_size();
  for (const auto& msg : this->direct_counters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Meter meters = 7;
  total_size += 1UL * this->_internal_meters_size();
  for (const auto& msg : this->meters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.DirectMeter direct_meters = 8;
  total_size += 1UL * this->_internal_direct_meters_size();
  for (const auto& msg : this->direct_meters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.ControllerPacketMetadata controller_packet_metadata = 9;
  total_size += 1UL * this->_internal_controller_packet_metadata_size();
  for (const auto& msg : this->controller_packet_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.ValueSet value_sets = 10;
  total_size += 1UL * this->_internal_value_sets_size();
  for (const auto& msg : this->value_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Register registers = 11;
  total_size += 1UL * this->_internal_registers_size();
  for (const auto& msg : this->registers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Digest digests = 12;
  total_size += 1UL * this->_internal_digests_size();
  for (const auto& msg : this->digests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.Extern externs = 100;
  total_size += 2UL * this->_internal_externs_size();
  for (const auto& msg : this->externs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.config.v1.PkgInfo pkg_info = 1;
  if (this->_internal_has_pkg_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pkg_info_);
  }

  // .p4.config.v1.P4TypeInfo type_info = 200;
  if (this->_internal_has_type_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    P4Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4Info::GetClassData() const { return &_class_data_; }

void P4Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<P4Info *>(to)->MergeFrom(
      static_cast<const P4Info &>(from));
}


void P4Info::MergeFrom(const P4Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.P4Info)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  actions_.MergeFrom(from.actions_);
  action_profiles_.MergeFrom(from.action_profiles_);
  counters_.MergeFrom(from.counters_);
  direct_counters_.MergeFrom(from.direct_counters_);
  meters_.MergeFrom(from.meters_);
  direct_meters_.MergeFrom(from.direct_meters_);
  controller_packet_metadata_.MergeFrom(from.controller_packet_metadata_);
  value_sets_.MergeFrom(from.value_sets_);
  registers_.MergeFrom(from.registers_);
  digests_.MergeFrom(from.digests_);
  externs_.MergeFrom(from.externs_);
  if (from._internal_has_pkg_info()) {
    _internal_mutable_pkg_info()->::p4::config::v1::PkgInfo::MergeFrom(from._internal_pkg_info());
  }
  if (from._internal_has_type_info()) {
    _internal_mutable_type_info()->::p4::config::v1::P4TypeInfo::MergeFrom(from._internal_type_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void P4Info::CopyFrom(const P4Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.P4Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Info::IsInitialized() const {
  return true;
}

void P4Info::InternalSwap(P4Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
  actions_.InternalSwap(&other->actions_);
  action_profiles_.InternalSwap(&other->action_profiles_);
  counters_.InternalSwap(&other->counters_);
  direct_counters_.InternalSwap(&other->direct_counters_);
  meters_.InternalSwap(&other->meters_);
  direct_meters_.InternalSwap(&other->direct_meters_);
  controller_packet_metadata_.InternalSwap(&other->controller_packet_metadata_);
  value_sets_.InternalSwap(&other->value_sets_);
  registers_.InternalSwap(&other->registers_);
  digests_.InternalSwap(&other->digests_);
  externs_.InternalSwap(&other->externs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P4Info, type_info_)
      + sizeof(P4Info::type_info_)
      - PROTOBUF_FIELD_OFFSET(P4Info, pkg_info_)>(
          reinterpret_cast<char*>(&pkg_info_),
          reinterpret_cast<char*>(&other->pkg_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P4Info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[0]);
}

// ===================================================================

class Documentation::_Internal {
 public:
};

Documentation::Documentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Documentation)
}
Documentation::Documentation(const Documentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brief().empty()) {
    brief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brief(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Documentation)
}

void Documentation::SharedCtor() {
brief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Documentation::~Documentation() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Documentation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Documentation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  brief_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Documentation::ArenaDtor(void* object) {
  Documentation* _this = reinterpret_cast< Documentation* >(object);
  (void)_this;
}
void Documentation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Documentation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Documentation::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Documentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brief_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Documentation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brief();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Documentation.brief"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Documentation.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Documentation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Documentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brief = 1;
  if (!this->_internal_brief().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brief().data(), static_cast<int>(this->_internal_brief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Documentation.brief");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brief(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Documentation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Documentation)
  return target;
}

size_t Documentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Documentation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brief = 1;
  if (!this->_internal_brief().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brief());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Documentation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Documentation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Documentation::GetClassData() const { return &_class_data_; }

void Documentation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Documentation *>(to)->MergeFrom(
      static_cast<const Documentation &>(from));
}


void Documentation::MergeFrom(const Documentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Documentation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_brief().empty()) {
    _internal_set_brief(from._internal_brief());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Documentation::CopyFrom(const Documentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Documentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Documentation::IsInitialized() const {
  return true;
}

void Documentation::InternalSwap(Documentation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &brief_, lhs_arena,
      &other->brief_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Documentation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[1]);
}

// ===================================================================

class PkgInfo::_Internal {
 public:
  static const ::p4::config::v1::Documentation& doc(const PkgInfo* msg);
};

const ::p4::config::v1::Documentation&
PkgInfo::_Internal::doc(const PkgInfo* msg) {
  return *msg->doc_;
}
void PkgInfo::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void PkgInfo::clear_structured_annotations() {
  structured_annotations_.Clear();
}
PkgInfo::PkgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.PkgInfo)
}
PkgInfo::PkgInfo(const PkgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arch().empty()) {
    arch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arch(), 
      GetArenaForAllocation());
  }
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization().empty()) {
    organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization(), 
      GetArenaForAllocation());
  }
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contact().empty()) {
    contact_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contact(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    doc_ = new ::p4::config::v1::Documentation(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.PkgInfo)
}

void PkgInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
doc_ = nullptr;
}

PkgInfo::~PkgInfo() {
  // @@protoc_insertion_point(destructor:p4.config.v1.PkgInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PkgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete doc_;
}

void PkgInfo::ArenaDtor(void* object) {
  PkgInfo* _this = reinterpret_cast< PkgInfo* >(object);
  (void)_this;
}
void PkgInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PkgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PkgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.PkgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  version_.ClearToEmpty();
  arch_.ClearToEmpty();
  organization_.ClearToEmpty();
  contact_.ClearToEmpty();
  url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PkgInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Documentation doc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string arch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_arch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.arch"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string organization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_organization();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.organization"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contact = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_contact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.contact"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.PkgInfo.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PkgInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.PkgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // .p4.config.v1.Documentation doc = 3;
  if (this->_internal_has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::doc(this), target, stream);
  }

  // repeated string annotations = 4;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.annotations");
    target = stream->WriteString(4, s, target);
  }

  // string arch = 5;
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.arch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_arch(), target);
  }

  // string organization = 6;
  if (!this->_internal_organization().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization().data(), static_cast<int>(this->_internal_organization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.organization");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_organization(), target);
  }

  // string contact = 7;
  if (!this->_internal_contact().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contact().data(), static_cast<int>(this->_internal_contact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.contact");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_contact(), target);
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.PkgInfo.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.PkgInfo)
  return target;
}

size_t PkgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.PkgInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string arch = 5;
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string organization = 6;
  if (!this->_internal_organization().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization());
  }

  // string contact = 7;
  if (!this->_internal_contact().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contact());
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .p4.config.v1.Documentation doc = 3;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PkgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PkgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PkgInfo::GetClassData() const { return &_class_data_; }

void PkgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PkgInfo *>(to)->MergeFrom(
      static_cast<const PkgInfo &>(from));
}


void PkgInfo::MergeFrom(const PkgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.PkgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_arch().empty()) {
    _internal_set_arch(from._internal_arch());
  }
  if (!from._internal_organization().empty()) {
    _internal_set_organization(from._internal_organization());
  }
  if (!from._internal_contact().empty()) {
    _internal_set_contact(from._internal_contact());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_doc()) {
    _internal_mutable_doc()->::p4::config::v1::Documentation::MergeFrom(from._internal_doc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PkgInfo::CopyFrom(const PkgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.PkgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkgInfo::IsInitialized() const {
  return true;
}

void PkgInfo::InternalSwap(PkgInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arch_, lhs_arena,
      &other->arch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_, lhs_arena,
      &other->organization_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contact_, lhs_arena,
      &other->contact_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(doc_, other->doc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PkgInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[2]);
}

// ===================================================================

class P4Ids::_Internal {
 public:
};

P4Ids::P4Ids(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.P4Ids)
}
P4Ids::P4Ids(const P4Ids& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.P4Ids)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData P4Ids::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*P4Ids::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata P4Ids::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[3]);
}

// ===================================================================

class Preamble::_Internal {
 public:
  static const ::p4::config::v1::Documentation& doc(const Preamble* msg);
};

const ::p4::config::v1::Documentation&
Preamble::_Internal::doc(const Preamble* msg) {
  return *msg->doc_;
}
void Preamble::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void Preamble::clear_structured_annotations() {
  structured_annotations_.Clear();
}
Preamble::Preamble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Preamble)
}
Preamble::Preamble(const Preamble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    doc_ = new ::p4::config::v1::Documentation(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Preamble)
}

void Preamble::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&doc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&doc_)) + sizeof(id_));
}

Preamble::~Preamble() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Preamble)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Preamble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete doc_;
}

void Preamble::ArenaDtor(void* object) {
  Preamble* _this = reinterpret_cast< Preamble* >(object);
  (void)_this;
}
void Preamble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preamble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preamble::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Preamble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preamble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Preamble.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Preamble.alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Preamble.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Documentation doc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preamble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Preamble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Preamble.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Preamble.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // repeated string annotations = 4;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Preamble.annotations");
    target = stream->WriteString(4, s, target);
  }

  // .p4.config.v1.Documentation doc = 5;
  if (this->_internal_has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::doc(this), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Preamble)
  return target;
}

size_t Preamble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Preamble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .p4.config.v1.Documentation doc = 5;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Preamble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Preamble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Preamble::GetClassData() const { return &_class_data_; }

void Preamble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Preamble *>(to)->MergeFrom(
      static_cast<const Preamble &>(from));
}


void Preamble::MergeFrom(const Preamble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Preamble)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_alias().empty()) {
    _internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_doc()) {
    _internal_mutable_doc()->::p4::config::v1::Documentation::MergeFrom(from._internal_doc());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Preamble::CopyFrom(const Preamble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Preamble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preamble::IsInitialized() const {
  return true;
}

void Preamble::InternalSwap(Preamble* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alias_, lhs_arena,
      &other->alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Preamble, id_)
      + sizeof(Preamble::id_)
      - PROTOBUF_FIELD_OFFSET(Preamble, doc_)>(
          reinterpret_cast<char*>(&doc_),
          reinterpret_cast<char*>(&other->doc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Preamble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[4]);
}

// ===================================================================

class Extern::_Internal {
 public:
};

Extern::Extern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Extern)
}
Extern::Extern(const Extern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instances_(from.instances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extern_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extern_type_name().empty()) {
    extern_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extern_type_name(), 
      GetArenaForAllocation());
  }
  extern_type_id_ = from.extern_type_id_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Extern)
}

void Extern::SharedCtor() {
extern_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extern_type_id_ = 0u;
}

Extern::~Extern() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Extern)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Extern::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extern_type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Extern::ArenaDtor(void* object) {
  Extern* _this = reinterpret_cast< Extern* >(object);
  (void)_this;
}
void Extern::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extern::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Extern)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instances_.Clear();
  extern_type_name_.ClearToEmpty();
  extern_type_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extern::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extern_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extern_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extern_type_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_extern_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Extern.extern_type_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ExternInstance instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extern::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Extern)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extern_type_id = 1;
  if (this->_internal_extern_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extern_type_id(), target);
  }

  // string extern_type_name = 2;
  if (!this->_internal_extern_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extern_type_name().data(), static_cast<int>(this->_internal_extern_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Extern.extern_type_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extern_type_name(), target);
  }

  // repeated .p4.config.v1.ExternInstance instances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_instances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Extern)
  return target;
}

size_t Extern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Extern)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.ExternInstance instances = 3;
  total_size += 1UL * this->_internal_instances_size();
  for (const auto& msg : this->instances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string extern_type_name = 2;
  if (!this->_internal_extern_type_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extern_type_name());
  }

  // uint32 extern_type_id = 1;
  if (this->_internal_extern_type_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_extern_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extern::GetClassData() const { return &_class_data_; }

void Extern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Extern *>(to)->MergeFrom(
      static_cast<const Extern &>(from));
}


void Extern::MergeFrom(const Extern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Extern)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instances_.MergeFrom(from.instances_);
  if (!from._internal_extern_type_name().empty()) {
    _internal_set_extern_type_name(from._internal_extern_type_name());
  }
  if (from._internal_extern_type_id() != 0) {
    _internal_set_extern_type_id(from._internal_extern_type_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extern::CopyFrom(const Extern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Extern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern::IsInitialized() const {
  return true;
}

void Extern::InternalSwap(Extern* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instances_.InternalSwap(&other->instances_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extern_type_name_, lhs_arena,
      &other->extern_type_name_, rhs_arena
  );
  swap(extern_type_id_, other->extern_type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extern::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[5]);
}

// ===================================================================

class ExternInstance::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const ExternInstance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& info(const ExternInstance* msg);
};

const ::p4::config::v1::Preamble&
ExternInstance::_Internal::preamble(const ExternInstance* msg) {
  return *msg->preamble_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExternInstance::_Internal::info(const ExternInstance* msg) {
  return *msg->info_;
}
void ExternInstance::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
ExternInstance::ExternInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ExternInstance)
}
ExternInstance::ExternInstance(const ExternInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ExternInstance)
}

void ExternInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(info_));
}

ExternInstance::~ExternInstance() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ExternInstance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete info_;
}

void ExternInstance::ArenaDtor(void* object) {
  ExternInstance* _this = reinterpret_cast< ExternInstance* >(object);
  (void)_this;
}
void ExternInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ExternInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ExternInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .google.protobuf.Any info = 2;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ExternInstance)
  return target;
}

size_t ExternInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ExternInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .google.protobuf.Any info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternInstance::GetClassData() const { return &_class_data_; }

void ExternInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExternInstance *>(to)->MergeFrom(
      static_cast<const ExternInstance &>(from));
}


void ExternInstance::MergeFrom(const ExternInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ExternInstance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_info()) {
    _internal_mutable_info()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternInstance::CopyFrom(const ExternInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ExternInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternInstance::IsInitialized() const {
  return true;
}

void ExternInstance::InternalSwap(ExternInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExternInstance, info_)
      + sizeof(ExternInstance::info_)
      - PROTOBUF_FIELD_OFFSET(ExternInstance, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternInstance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[6]);
}

// ===================================================================

class MatchField::_Internal {
 public:
  static const ::p4::config::v1::Documentation& doc(const MatchField* msg);
  static const ::p4::config::v1::P4NamedType& type_name(const MatchField* msg);
};

const ::p4::config::v1::Documentation&
MatchField::_Internal::doc(const MatchField* msg) {
  return *msg->doc_;
}
const ::p4::config::v1::P4NamedType&
MatchField::_Internal::type_name(const MatchField* msg) {
  return *msg->type_name_;
}
void MatchField::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void MatchField::clear_type_name() {
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
}
void MatchField::clear_structured_annotations() {
  structured_annotations_.Clear();
}
MatchField::MatchField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.MatchField)
}
MatchField::MatchField(const MatchField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    doc_ = new ::p4::config::v1::Documentation(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  if (from._internal_has_type_name()) {
    type_name_ = new ::p4::config::v1::P4NamedType(*from.type_name_);
  } else {
    type_name_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  clear_has_match();
  switch (from.match_case()) {
    case kMatchType: {
      _internal_set_match_type(from._internal_match_type());
      break;
    }
    case kOtherMatchType: {
      _internal_set_other_match_type(from._internal_other_match_type());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.MatchField)
}

void MatchField::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&doc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&doc_)) + sizeof(bitwidth_));
clear_has_match();
}

MatchField::~MatchField() {
  // @@protoc_insertion_point(destructor:p4.config.v1.MatchField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete doc_;
  if (this != internal_default_instance()) delete type_name_;
  if (has_match()) {
    clear_match();
  }
}

void MatchField::ArenaDtor(void* object) {
  MatchField* _this = reinterpret_cast< MatchField* >(object);
  (void)_this;
}
void MatchField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchField::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:p4.config.v1.MatchField)
  switch (match_case()) {
    case kMatchType: {
      // No need to clear
      break;
    }
    case kOtherMatchType: {
      match_.other_match_type_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCH_NOT_SET;
}


void MatchField::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.MatchField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitwidth_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  clear_match();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.MatchField.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.MatchField.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 bitwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.MatchField.MatchType match_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::p4::config::v1::MatchField_MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Documentation doc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string other_match_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_other_match_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.MatchField.other_match_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType type_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.MatchField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.MatchField.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.MatchField.annotations");
    target = stream->WriteString(3, s, target);
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bitwidth(), target);
  }

  // .p4.config.v1.MatchField.MatchType match_type = 5;
  if (_internal_has_match_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_match_type(), target);
  }

  // .p4.config.v1.Documentation doc = 6;
  if (this->_internal_has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::doc(this), target, stream);
  }

  // string other_match_type = 7;
  if (_internal_has_other_match_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_match_type().data(), static_cast<int>(this->_internal_other_match_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.MatchField.other_match_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_other_match_type(), target);
  }

  // .p4.config.v1.P4NamedType type_name = 8;
  if (this->_internal_has_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::type_name(this), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.MatchField)
  return target;
}

size_t MatchField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.MatchField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 9;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 10;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.Documentation doc = 6;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  // .p4.config.v1.P4NamedType type_name = 8;
  if (this->_internal_has_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_name_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  switch (match_case()) {
    // .p4.config.v1.MatchField.MatchType match_type = 5;
    case kMatchType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
      break;
    }
    // string other_match_type = 7;
    case kOtherMatchType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_match_type());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchField::GetClassData() const { return &_class_data_; }

void MatchField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchField *>(to)->MergeFrom(
      static_cast<const MatchField &>(from));
}


void MatchField::MergeFrom(const MatchField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.MatchField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_doc()) {
    _internal_mutable_doc()->::p4::config::v1::Documentation::MergeFrom(from._internal_doc());
  }
  if (from._internal_has_type_name()) {
    _internal_mutable_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_type_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  switch (from.match_case()) {
    case kMatchType: {
      _internal_set_match_type(from._internal_match_type());
      break;
    }
    case kOtherMatchType: {
      _internal_set_other_match_type(from._internal_other_match_type());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchField::CopyFrom(const MatchField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.MatchField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchField::IsInitialized() const {
  return true;
}

void MatchField::InternalSwap(MatchField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchField, bitwidth_)
      + sizeof(MatchField::bitwidth_)
      - PROTOBUF_FIELD_OFFSET(MatchField, doc_)>(
          reinterpret_cast<char*>(&doc_),
          reinterpret_cast<char*>(&other->doc_));
  swap(match_, other->match_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[7]);
}

// ===================================================================

class Table::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Table* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& other_properties(const Table* msg);
};

const ::p4::config::v1::Preamble&
Table::_Internal::preamble(const Table* msg) {
  return *msg->preamble_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Table::_Internal::other_properties(const Table* msg) {
  return *msg->other_properties_;
}
void Table::clear_other_properties() {
  if (GetArenaForAllocation() == nullptr && other_properties_ != nullptr) {
    delete other_properties_;
  }
  other_properties_ = nullptr;
}
Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_fields_(arena),
  action_refs_(arena),
  direct_resource_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_fields_(from.match_fields_),
      action_refs_(from.action_refs_),
      direct_resource_ids_(from.direct_resource_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_other_properties()) {
    other_properties_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.other_properties_);
  } else {
    other_properties_ = nullptr;
  }
  ::memcpy(&const_default_action_id_, &from.const_default_action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_const_table_) -
    reinterpret_cast<char*>(&const_default_action_id_)) + sizeof(is_const_table_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Table)
}

void Table::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_const_table_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(is_const_table_));
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Table)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete other_properties_;
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  (void)_this;
}
void Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_fields_.Clear();
  action_refs_.Clear();
  direct_resource_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && other_properties_ != nullptr) {
    delete other_properties_;
  }
  other_properties_ = nullptr;
  ::memset(&const_default_action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_const_table_) -
      reinterpret_cast<char*>(&const_default_action_id_)) + sizeof(is_const_table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.MatchField match_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ActionRef action_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 const_default_action_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          const_default_action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 implementation_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          implementation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 direct_resource_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_direct_resource_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_direct_resource_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Table.IdleTimeoutBehavior idle_timeout_behavior = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_idle_timeout_behavior(static_cast<::p4::config::v1::Table_IdleTimeoutBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_const_table = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_const_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any other_properties = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // repeated .p4.config.v1.MatchField match_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_match_fields(i), target, stream);
  }

  // repeated .p4.config.v1.ActionRef action_refs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_action_refs(i), target, stream);
  }

  // uint32 const_default_action_id = 4;
  if (this->_internal_const_default_action_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_const_default_action_id(), target);
  }

  // uint32 implementation_id = 6;
  if (this->_internal_implementation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_implementation_id(), target);
  }

  // repeated uint32 direct_resource_ids = 7;
  {
    int byte_size = _direct_resource_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_direct_resource_ids(), byte_size, target);
    }
  }

  // int64 size = 8;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_size(), target);
  }

  // .p4.config.v1.Table.IdleTimeoutBehavior idle_timeout_behavior = 9;
  if (this->_internal_idle_timeout_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_idle_timeout_behavior(), target);
  }

  // bool is_const_table = 10;
  if (this->_internal_is_const_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_const_table(), target);
  }

  // .google.protobuf.Any other_properties = 100;
  if (this->_internal_has_other_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::other_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.MatchField match_fields = 2;
  total_size += 1UL * this->_internal_match_fields_size();
  for (const auto& msg : this->match_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.ActionRef action_refs = 3;
  total_size += 1UL * this->_internal_action_refs_size();
  for (const auto& msg : this->action_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 direct_resource_ids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->direct_resource_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _direct_resource_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .google.protobuf.Any other_properties = 100;
  if (this->_internal_has_other_properties()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_properties_);
  }

  // uint32 const_default_action_id = 4;
  if (this->_internal_const_default_action_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_const_default_action_id());
  }

  // uint32 implementation_id = 6;
  if (this->_internal_implementation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_implementation_id());
  }

  // int64 size = 8;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // .p4.config.v1.Table.IdleTimeoutBehavior idle_timeout_behavior = 9;
  if (this->_internal_idle_timeout_behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_idle_timeout_behavior());
  }

  // bool is_const_table = 10;
  if (this->_internal_is_const_table() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Table::GetClassData() const { return &_class_data_; }

void Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Table *>(to)->MergeFrom(
      static_cast<const Table &>(from));
}


void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_fields_.MergeFrom(from.match_fields_);
  action_refs_.MergeFrom(from.action_refs_);
  direct_resource_ids_.MergeFrom(from.direct_resource_ids_);
  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_other_properties()) {
    _internal_mutable_other_properties()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other_properties());
  }
  if (from._internal_const_default_action_id() != 0) {
    _internal_set_const_default_action_id(from._internal_const_default_action_id());
  }
  if (from._internal_implementation_id() != 0) {
    _internal_set_implementation_id(from._internal_implementation_id());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_idle_timeout_behavior() != 0) {
    _internal_set_idle_timeout_behavior(from._internal_idle_timeout_behavior());
  }
  if (from._internal_is_const_table() != 0) {
    _internal_set_is_const_table(from._internal_is_const_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_fields_.InternalSwap(&other->match_fields_);
  action_refs_.InternalSwap(&other->action_refs_);
  direct_resource_ids_.InternalSwap(&other->direct_resource_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Table, is_const_table_)
      + sizeof(Table::is_const_table_)
      - PROTOBUF_FIELD_OFFSET(Table, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[8]);
}

// ===================================================================

class ActionRef::_Internal {
 public:
};

void ActionRef::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void ActionRef::clear_structured_annotations() {
  structured_annotations_.Clear();
}
ActionRef::ActionRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ActionRef)
}
ActionRef::ActionRef(const ActionRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&id_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ActionRef)
}

void ActionRef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&id_)) + sizeof(scope_));
}

ActionRef::~ActionRef() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ActionRef)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionRef::ArenaDtor(void* object) {
  ActionRef* _this = reinterpret_cast< ActionRef* >(object);
  (void)_this;
}
void ActionRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionRef::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ActionRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scope_) -
      reinterpret_cast<char*>(&id_)) + sizeof(scope_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.ActionRef.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.ActionRef.Scope scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scope(static_cast<::p4::config::v1::ActionRef_Scope>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ActionRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated string annotations = 2;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.ActionRef.annotations");
    target = stream->WriteString(2, s, target);
  }

  // .p4.config.v1.ActionRef.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scope(), target);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ActionRef)
  return target;
}

size_t ActionRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ActionRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .p4.config.v1.ActionRef.Scope scope = 3;
  if (this->_internal_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionRef::GetClassData() const { return &_class_data_; }

void ActionRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionRef *>(to)->MergeFrom(
      static_cast<const ActionRef &>(from));
}


void ActionRef::MergeFrom(const ActionRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ActionRef)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_scope() != 0) {
    _internal_set_scope(from._internal_scope());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionRef::CopyFrom(const ActionRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ActionRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRef::IsInitialized() const {
  return true;
}

void ActionRef::InternalSwap(ActionRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionRef, scope_)
      + sizeof(ActionRef::scope_)
      - PROTOBUF_FIELD_OFFSET(ActionRef, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[9]);
}

// ===================================================================

class Action_Param::_Internal {
 public:
  static const ::p4::config::v1::Documentation& doc(const Action_Param* msg);
  static const ::p4::config::v1::P4NamedType& type_name(const Action_Param* msg);
};

const ::p4::config::v1::Documentation&
Action_Param::_Internal::doc(const Action_Param* msg) {
  return *msg->doc_;
}
const ::p4::config::v1::P4NamedType&
Action_Param::_Internal::type_name(const Action_Param* msg) {
  return *msg->type_name_;
}
void Action_Param::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void Action_Param::clear_type_name() {
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
}
void Action_Param::clear_structured_annotations() {
  structured_annotations_.Clear();
}
Action_Param::Action_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Action.Param)
}
Action_Param::Action_Param(const Action_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    doc_ = new ::p4::config::v1::Documentation(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  if (from._internal_has_type_name()) {
    type_name_ = new ::p4::config::v1::P4NamedType(*from.type_name_);
  } else {
    type_name_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Action.Param)
}

void Action_Param::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&doc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&doc_)) + sizeof(bitwidth_));
}

Action_Param::~Action_Param() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Action.Param)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action_Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete doc_;
  if (this != internal_default_instance()) delete type_name_;
}

void Action_Param::ArenaDtor(void* object) {
  Action_Param* _this = reinterpret_cast< Action_Param* >(object);
  (void)_this;
}
void Action_Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitwidth_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Action.Param.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.Action.Param.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 bitwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.Documentation doc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType type_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action_Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Action.Param.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.Action.Param.annotations");
    target = stream->WriteString(3, s, target);
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bitwidth(), target);
  }

  // .p4.config.v1.Documentation doc = 5;
  if (this->_internal_has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::doc(this), target, stream);
  }

  // .p4.config.v1.P4NamedType type_name = 6;
  if (this->_internal_has_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::type_name(this), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Action.Param)
  return target;
}

size_t Action_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Action.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 7;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 8;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.Documentation doc = 5;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  // .p4.config.v1.P4NamedType type_name = 6;
  if (this->_internal_has_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_name_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action_Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action_Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action_Param::GetClassData() const { return &_class_data_; }

void Action_Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action_Param *>(to)->MergeFrom(
      static_cast<const Action_Param &>(from));
}


void Action_Param::MergeFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_doc()) {
    _internal_mutable_doc()->::p4::config::v1::Documentation::MergeFrom(from._internal_doc());
  }
  if (from._internal_has_type_name()) {
    _internal_mutable_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_type_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action_Param::CopyFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Param::IsInitialized() const {
  return true;
}

void Action_Param::InternalSwap(Action_Param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action_Param, bitwidth_)
      + sizeof(Action_Param::bitwidth_)
      - PROTOBUF_FIELD_OFFSET(Action_Param, doc_)>(
          reinterpret_cast<char*>(&doc_),
          reinterpret_cast<char*>(&other->doc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_Param::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[10]);
}

// ===================================================================

class Action::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Action* msg);
};

const ::p4::config::v1::Preamble&
Action::_Internal::preamble(const Action* msg) {
  return *msg->preamble_;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Action)
}

void Action::SharedCtor() {
preamble_ = nullptr;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.Action.Param params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // repeated .p4.config.v1.Action.Param params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.Action.Param params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(preamble_, other->preamble_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[11]);
}

// ===================================================================

class ActionProfile::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const ActionProfile* msg);
};

const ::p4::config::v1::Preamble&
ActionProfile::_Internal::preamble(const ActionProfile* msg) {
  return *msg->preamble_;
}
ActionProfile::ActionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ActionProfile)
}
ActionProfile::ActionProfile(const ActionProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_ids_(from.table_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_group_size_) -
    reinterpret_cast<char*>(&size_)) + sizeof(max_group_size_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ActionProfile)
}

void ActionProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_group_size_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(max_group_size_));
}

ActionProfile::~ActionProfile() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ActionProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
}

void ActionProfile::ArenaDtor(void* object) {
  ActionProfile* _this = reinterpret_cast< ActionProfile* >(object);
  (void)_this;
}
void ActionProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ActionProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_group_size_) -
      reinterpret_cast<char*>(&size_)) + sizeof(max_group_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 table_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_table_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_table_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool with_selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_selector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_group_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_group_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ActionProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // repeated uint32 table_ids = 2;
  {
    int byte_size = _table_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_table_ids(), byte_size, target);
    }
  }

  // bool with_selector = 3;
  if (this->_internal_with_selector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_with_selector(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  // int32 max_group_size = 5;
  if (this->_internal_max_group_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_group_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ActionProfile)
  return target;
}

size_t ActionProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ActionProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 table_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->table_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // bool with_selector = 3;
  if (this->_internal_with_selector() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_group_size = 5;
  if (this->_internal_max_group_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_group_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProfile::GetClassData() const { return &_class_data_; }

void ActionProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProfile *>(to)->MergeFrom(
      static_cast<const ActionProfile &>(from));
}


void ActionProfile::MergeFrom(const ActionProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ActionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_ids_.MergeFrom(from.table_ids_);
  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_with_selector() != 0) {
    _internal_set_with_selector(from._internal_with_selector());
  }
  if (from._internal_max_group_size() != 0) {
    _internal_set_max_group_size(from._internal_max_group_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProfile::CopyFrom(const ActionProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ActionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfile::IsInitialized() const {
  return true;
}

void ActionProfile::InternalSwap(ActionProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_ids_.InternalSwap(&other->table_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProfile, max_group_size_)
      + sizeof(ActionProfile::max_group_size_)
      - PROTOBUF_FIELD_OFFSET(ActionProfile, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[12]);
}

// ===================================================================

class CounterSpec::_Internal {
 public:
};

CounterSpec::CounterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.CounterSpec)
}
CounterSpec::CounterSpec(const CounterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.CounterSpec)
}

void CounterSpec::SharedCtor() {
unit_ = 0;
}

CounterSpec::~CounterSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.CounterSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CounterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CounterSpec::ArenaDtor(void* object) {
  CounterSpec* _this = reinterpret_cast< CounterSpec* >(object);
  (void)_this;
}
void CounterSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CounterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CounterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.CounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.CounterSpec.Unit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::p4::config::v1::CounterSpec_Unit>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CounterSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.CounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.CounterSpec.Unit unit = 1;
  if (this->_internal_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.CounterSpec)
  return target;
}

size_t CounterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.CounterSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.CounterSpec.Unit unit = 1;
  if (this->_internal_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CounterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterSpec::GetClassData() const { return &_class_data_; }

void CounterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CounterSpec *>(to)->MergeFrom(
      static_cast<const CounterSpec &>(from));
}


void CounterSpec::MergeFrom(const CounterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.CounterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterSpec::CopyFrom(const CounterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.CounterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterSpec::IsInitialized() const {
  return true;
}

void CounterSpec::InternalSwap(CounterSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[13]);
}

// ===================================================================

class Counter::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Counter* msg);
  static const ::p4::config::v1::CounterSpec& spec(const Counter* msg);
  static const ::p4::config::v1::P4NamedType& index_type_name(const Counter* msg);
};

const ::p4::config::v1::Preamble&
Counter::_Internal::preamble(const Counter* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::CounterSpec&
Counter::_Internal::spec(const Counter* msg) {
  return *msg->spec_;
}
const ::p4::config::v1::P4NamedType&
Counter::_Internal::index_type_name(const Counter* msg) {
  return *msg->index_type_name_;
}
void Counter::clear_index_type_name() {
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
}
Counter::Counter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Counter)
}
Counter::Counter(const Counter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::p4::config::v1::CounterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_index_type_name()) {
    index_type_name_ = new ::p4::config::v1::P4NamedType(*from.index_type_name_);
  } else {
    index_type_name_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Counter)
}

void Counter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(size_));
}

Counter::~Counter() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Counter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Counter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete index_type_name_;
}

void Counter::ArenaDtor(void* object) {
  Counter* _this = reinterpret_cast< Counter* >(object);
  (void)_this;
}
void Counter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Counter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Counter::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Counter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.CounterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType index_type_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Counter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Counter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.CounterSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::index_type_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Counter)
  return target;
}

size_t Counter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Counter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.CounterSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_type_name_);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Counter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Counter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Counter::GetClassData() const { return &_class_data_; }

void Counter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Counter *>(to)->MergeFrom(
      static_cast<const Counter &>(from));
}


void Counter::MergeFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Counter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::p4::config::v1::CounterSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_index_type_name()) {
    _internal_mutable_index_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_index_type_name());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Counter::CopyFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counter::IsInitialized() const {
  return true;
}

void Counter::InternalSwap(Counter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Counter, size_)
      + sizeof(Counter::size_)
      - PROTOBUF_FIELD_OFFSET(Counter, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Counter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[14]);
}

// ===================================================================

class DirectCounter::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const DirectCounter* msg);
  static const ::p4::config::v1::CounterSpec& spec(const DirectCounter* msg);
};

const ::p4::config::v1::Preamble&
DirectCounter::_Internal::preamble(const DirectCounter* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::CounterSpec&
DirectCounter::_Internal::spec(const DirectCounter* msg) {
  return *msg->spec_;
}
DirectCounter::DirectCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.DirectCounter)
}
DirectCounter::DirectCounter(const DirectCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::p4::config::v1::CounterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  direct_table_id_ = from.direct_table_id_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.DirectCounter)
}

void DirectCounter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direct_table_id_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(direct_table_id_));
}

DirectCounter::~DirectCounter() {
  // @@protoc_insertion_point(destructor:p4.config.v1.DirectCounter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DirectCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete spec_;
}

void DirectCounter::ArenaDtor(void* object) {
  DirectCounter* _this = reinterpret_cast< DirectCounter* >(object);
  (void)_this;
}
void DirectCounter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.DirectCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  direct_table_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.CounterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direct_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          direct_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectCounter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.DirectCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.CounterSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // uint32 direct_table_id = 3;
  if (this->_internal_direct_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direct_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.DirectCounter)
  return target;
}

size_t DirectCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.DirectCounter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.CounterSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // uint32 direct_table_id = 3;
  if (this->_internal_direct_table_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direct_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectCounter::GetClassData() const { return &_class_data_; }

void DirectCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectCounter *>(to)->MergeFrom(
      static_cast<const DirectCounter &>(from));
}


void DirectCounter::MergeFrom(const DirectCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.DirectCounter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::p4::config::v1::CounterSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_direct_table_id() != 0) {
    _internal_set_direct_table_id(from._internal_direct_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectCounter::CopyFrom(const DirectCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.DirectCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectCounter::IsInitialized() const {
  return true;
}

void DirectCounter::InternalSwap(DirectCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectCounter, direct_table_id_)
      + sizeof(DirectCounter::direct_table_id_)
      - PROTOBUF_FIELD_OFFSET(DirectCounter, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectCounter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[15]);
}

// ===================================================================

class MeterSpec::_Internal {
 public:
};

MeterSpec::MeterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.MeterSpec)
}
MeterSpec::MeterSpec(const MeterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.MeterSpec)
}

void MeterSpec::SharedCtor() {
unit_ = 0;
}

MeterSpec::~MeterSpec() {
  // @@protoc_insertion_point(destructor:p4.config.v1.MeterSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeterSpec::ArenaDtor(void* object) {
  MeterSpec* _this = reinterpret_cast< MeterSpec* >(object);
  (void)_this;
}
void MeterSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.MeterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.MeterSpec.Unit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::p4::config::v1::MeterSpec_Unit>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeterSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.MeterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.MeterSpec.Unit unit = 1;
  if (this->_internal_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.MeterSpec)
  return target;
}

size_t MeterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.MeterSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.MeterSpec.Unit unit = 1;
  if (this->_internal_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeterSpec::GetClassData() const { return &_class_data_; }

void MeterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeterSpec *>(to)->MergeFrom(
      static_cast<const MeterSpec &>(from));
}


void MeterSpec::MergeFrom(const MeterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.MeterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeterSpec::CopyFrom(const MeterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.MeterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterSpec::IsInitialized() const {
  return true;
}

void MeterSpec::InternalSwap(MeterSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeterSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[16]);
}

// ===================================================================

class Meter::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Meter* msg);
  static const ::p4::config::v1::MeterSpec& spec(const Meter* msg);
  static const ::p4::config::v1::P4NamedType& index_type_name(const Meter* msg);
};

const ::p4::config::v1::Preamble&
Meter::_Internal::preamble(const Meter* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::MeterSpec&
Meter::_Internal::spec(const Meter* msg) {
  return *msg->spec_;
}
const ::p4::config::v1::P4NamedType&
Meter::_Internal::index_type_name(const Meter* msg) {
  return *msg->index_type_name_;
}
void Meter::clear_index_type_name() {
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
}
Meter::Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Meter)
}
Meter::Meter(const Meter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::p4::config::v1::MeterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_index_type_name()) {
    index_type_name_ = new ::p4::config::v1::P4NamedType(*from.index_type_name_);
  } else {
    index_type_name_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Meter)
}

void Meter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(size_));
}

Meter::~Meter() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Meter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Meter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete index_type_name_;
}

void Meter::ArenaDtor(void* object) {
  Meter* _this = reinterpret_cast< Meter* >(object);
  (void)_this;
}
void Meter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Meter::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.MeterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType index_type_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.MeterSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::index_type_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Meter)
  return target;
}

size_t Meter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Meter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.MeterSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_type_name_);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Meter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Meter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Meter::GetClassData() const { return &_class_data_; }

void Meter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Meter *>(to)->MergeFrom(
      static_cast<const Meter &>(from));
}


void Meter::MergeFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Meter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::p4::config::v1::MeterSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_index_type_name()) {
    _internal_mutable_index_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_index_type_name());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Meter::CopyFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Meter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meter::IsInitialized() const {
  return true;
}

void Meter::InternalSwap(Meter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Meter, size_)
      + sizeof(Meter::size_)
      - PROTOBUF_FIELD_OFFSET(Meter, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Meter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[17]);
}

// ===================================================================

class DirectMeter::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const DirectMeter* msg);
  static const ::p4::config::v1::MeterSpec& spec(const DirectMeter* msg);
};

const ::p4::config::v1::Preamble&
DirectMeter::_Internal::preamble(const DirectMeter* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::MeterSpec&
DirectMeter::_Internal::spec(const DirectMeter* msg) {
  return *msg->spec_;
}
DirectMeter::DirectMeter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.DirectMeter)
}
DirectMeter::DirectMeter(const DirectMeter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::p4::config::v1::MeterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  direct_table_id_ = from.direct_table_id_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.DirectMeter)
}

void DirectMeter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direct_table_id_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(direct_table_id_));
}

DirectMeter::~DirectMeter() {
  // @@protoc_insertion_point(destructor:p4.config.v1.DirectMeter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DirectMeter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete spec_;
}

void DirectMeter::ArenaDtor(void* object) {
  DirectMeter* _this = reinterpret_cast< DirectMeter* >(object);
  (void)_this;
}
void DirectMeter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectMeter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectMeter::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.DirectMeter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  direct_table_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectMeter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.MeterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direct_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          direct_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectMeter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.DirectMeter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.MeterSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // uint32 direct_table_id = 3;
  if (this->_internal_direct_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direct_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.DirectMeter)
  return target;
}

size_t DirectMeter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.DirectMeter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.MeterSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // uint32 direct_table_id = 3;
  if (this->_internal_direct_table_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direct_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectMeter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectMeter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectMeter::GetClassData() const { return &_class_data_; }

void DirectMeter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectMeter *>(to)->MergeFrom(
      static_cast<const DirectMeter &>(from));
}


void DirectMeter::MergeFrom(const DirectMeter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.DirectMeter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::p4::config::v1::MeterSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_direct_table_id() != 0) {
    _internal_set_direct_table_id(from._internal_direct_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectMeter::CopyFrom(const DirectMeter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.DirectMeter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMeter::IsInitialized() const {
  return true;
}

void DirectMeter::InternalSwap(DirectMeter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectMeter, direct_table_id_)
      + sizeof(DirectMeter::direct_table_id_)
      - PROTOBUF_FIELD_OFFSET(DirectMeter, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectMeter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[18]);
}

// ===================================================================

class ControllerPacketMetadata_Metadata::_Internal {
 public:
  static const ::p4::config::v1::P4NamedType& type_name(const ControllerPacketMetadata_Metadata* msg);
};

const ::p4::config::v1::P4NamedType&
ControllerPacketMetadata_Metadata::_Internal::type_name(const ControllerPacketMetadata_Metadata* msg) {
  return *msg->type_name_;
}
void ControllerPacketMetadata_Metadata::clear_annotation_locations() {
  annotation_locations_.Clear();
}
void ControllerPacketMetadata_Metadata::clear_type_name() {
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
}
void ControllerPacketMetadata_Metadata::clear_structured_annotations() {
  structured_annotations_.Clear();
}
ControllerPacketMetadata_Metadata::ControllerPacketMetadata_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  structured_annotations_(arena),
  annotation_locations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ControllerPacketMetadata.Metadata)
}
ControllerPacketMetadata_Metadata::ControllerPacketMetadata_Metadata(const ControllerPacketMetadata_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_),
      structured_annotations_(from.structured_annotations_),
      annotation_locations_(from.annotation_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type_name()) {
    type_name_ = new ::p4::config::v1::P4NamedType(*from.type_name_);
  } else {
    type_name_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ControllerPacketMetadata.Metadata)
}

void ControllerPacketMetadata_Metadata::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitwidth_) -
    reinterpret_cast<char*>(&type_name_)) + sizeof(bitwidth_));
}

ControllerPacketMetadata_Metadata::~ControllerPacketMetadata_Metadata() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ControllerPacketMetadata.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerPacketMetadata_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_name_;
}

void ControllerPacketMetadata_Metadata::ArenaDtor(void* object) {
  ControllerPacketMetadata_Metadata* _this = reinterpret_cast< ControllerPacketMetadata_Metadata* >(object);
  (void)_this;
}
void ControllerPacketMetadata_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerPacketMetadata_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerPacketMetadata_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ControllerPacketMetadata.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  structured_annotations_.Clear();
  annotation_locations_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && type_name_ != nullptr) {
    delete type_name_;
  }
  type_name_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitwidth_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bitwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPacketMetadata_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.ControllerPacketMetadata.Metadata.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "p4.config.v1.ControllerPacketMetadata.Metadata.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 bitwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bitwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType type_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structured_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerPacketMetadata_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ControllerPacketMetadata.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.ControllerPacketMetadata.Metadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p4.config.v1.ControllerPacketMetadata.Metadata.annotations");
    target = stream->WriteString(3, s, target);
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bitwidth(), target);
  }

  // .p4.config.v1.P4NamedType type_name = 5;
  if (this->_internal_has_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::type_name(this), target, stream);
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structured_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_structured_annotations(i), target, stream);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_annotation_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ControllerPacketMetadata.Metadata)
  return target;
}

size_t ControllerPacketMetadata_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ControllerPacketMetadata.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  total_size += 1UL * this->_internal_structured_annotations_size();
  for (const auto& msg : this->structured_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .p4.config.v1.SourceLocation annotation_locations = 7;
  total_size += 1UL * this->_internal_annotation_locations_size();
  for (const auto& msg : this->annotation_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .p4.config.v1.P4NamedType type_name = 5;
  if (this->_internal_has_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_name_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // int32 bitwidth = 4;
  if (this->_internal_bitwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bitwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPacketMetadata_Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerPacketMetadata_Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPacketMetadata_Metadata::GetClassData() const { return &_class_data_; }

void ControllerPacketMetadata_Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerPacketMetadata_Metadata *>(to)->MergeFrom(
      static_cast<const ControllerPacketMetadata_Metadata &>(from));
}


void ControllerPacketMetadata_Metadata::MergeFrom(const ControllerPacketMetadata_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ControllerPacketMetadata.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  structured_annotations_.MergeFrom(from.structured_annotations_);
  annotation_locations_.MergeFrom(from.annotation_locations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_type_name()) {
    _internal_mutable_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_type_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_bitwidth() != 0) {
    _internal_set_bitwidth(from._internal_bitwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPacketMetadata_Metadata::CopyFrom(const ControllerPacketMetadata_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ControllerPacketMetadata.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPacketMetadata_Metadata::IsInitialized() const {
  return true;
}

void ControllerPacketMetadata_Metadata::InternalSwap(ControllerPacketMetadata_Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  structured_annotations_.InternalSwap(&other->structured_annotations_);
  annotation_locations_.InternalSwap(&other->annotation_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerPacketMetadata_Metadata, bitwidth_)
      + sizeof(ControllerPacketMetadata_Metadata::bitwidth_)
      - PROTOBUF_FIELD_OFFSET(ControllerPacketMetadata_Metadata, type_name_)>(
          reinterpret_cast<char*>(&type_name_),
          reinterpret_cast<char*>(&other->type_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPacketMetadata_Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[19]);
}

// ===================================================================

class ControllerPacketMetadata::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const ControllerPacketMetadata* msg);
};

const ::p4::config::v1::Preamble&
ControllerPacketMetadata::_Internal::preamble(const ControllerPacketMetadata* msg) {
  return *msg->preamble_;
}
ControllerPacketMetadata::ControllerPacketMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ControllerPacketMetadata)
}
ControllerPacketMetadata::ControllerPacketMetadata(const ControllerPacketMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ControllerPacketMetadata)
}

void ControllerPacketMetadata::SharedCtor() {
preamble_ = nullptr;
}

ControllerPacketMetadata::~ControllerPacketMetadata() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ControllerPacketMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerPacketMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
}

void ControllerPacketMetadata::ArenaDtor(void* object) {
  ControllerPacketMetadata* _this = reinterpret_cast< ControllerPacketMetadata* >(object);
  (void)_this;
}
void ControllerPacketMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerPacketMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerPacketMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ControllerPacketMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPacketMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.ControllerPacketMetadata.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerPacketMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ControllerPacketMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // repeated .p4.config.v1.ControllerPacketMetadata.Metadata metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ControllerPacketMetadata)
  return target;
}

size_t ControllerPacketMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ControllerPacketMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.ControllerPacketMetadata.Metadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPacketMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerPacketMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPacketMetadata::GetClassData() const { return &_class_data_; }

void ControllerPacketMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerPacketMetadata *>(to)->MergeFrom(
      static_cast<const ControllerPacketMetadata &>(from));
}


void ControllerPacketMetadata::MergeFrom(const ControllerPacketMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ControllerPacketMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPacketMetadata::CopyFrom(const ControllerPacketMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ControllerPacketMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPacketMetadata::IsInitialized() const {
  return true;
}

void ControllerPacketMetadata::InternalSwap(ControllerPacketMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  swap(preamble_, other->preamble_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPacketMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[20]);
}

// ===================================================================

class ValueSet::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const ValueSet* msg);
};

const ::p4::config::v1::Preamble&
ValueSet::_Internal::preamble(const ValueSet* msg) {
  return *msg->preamble_;
}
ValueSet::ValueSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.ValueSet)
}
ValueSet::ValueSet(const ValueSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_(from.match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.ValueSet)
}

void ValueSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(size_));
}

ValueSet::~ValueSet() {
  // @@protoc_insertion_point(destructor:p4.config.v1.ValueSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValueSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
}

void ValueSet::ArenaDtor(void* object) {
  ValueSet* _this = reinterpret_cast< ValueSet* >(object);
  (void)_this;
}
void ValueSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueSet::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.ValueSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .p4.config.v1.MatchField match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.ValueSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // repeated .p4.config.v1.MatchField match = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_match(i), target, stream);
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.ValueSet)
  return target;
}

size_t ValueSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.ValueSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .p4.config.v1.MatchField match = 2;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValueSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueSet::GetClassData() const { return &_class_data_; }

void ValueSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValueSet *>(to)->MergeFrom(
      static_cast<const ValueSet &>(from));
}


void ValueSet::MergeFrom(const ValueSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.ValueSet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueSet::CopyFrom(const ValueSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.ValueSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSet::IsInitialized() const {
  return true;
}

void ValueSet::InternalSwap(ValueSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueSet, size_)
      + sizeof(ValueSet::size_)
      - PROTOBUF_FIELD_OFFSET(ValueSet, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[21]);
}

// ===================================================================

class Register::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Register* msg);
  static const ::p4::config::v1::P4DataTypeSpec& type_spec(const Register* msg);
  static const ::p4::config::v1::P4NamedType& index_type_name(const Register* msg);
};

const ::p4::config::v1::Preamble&
Register::_Internal::preamble(const Register* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::P4DataTypeSpec&
Register::_Internal::type_spec(const Register* msg) {
  return *msg->type_spec_;
}
const ::p4::config::v1::P4NamedType&
Register::_Internal::index_type_name(const Register* msg) {
  return *msg->index_type_name_;
}
void Register::clear_type_spec() {
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
}
void Register::clear_index_type_name() {
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
}
Register::Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Register)
}
Register::Register(const Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_type_spec()) {
    type_spec_ = new ::p4::config::v1::P4DataTypeSpec(*from.type_spec_);
  } else {
    type_spec_ = nullptr;
  }
  if (from._internal_has_index_type_name()) {
    index_type_name_ = new ::p4::config::v1::P4NamedType(*from.index_type_name_);
  } else {
    index_type_name_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Register)
}

void Register::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(size_));
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Register)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete type_spec_;
  if (this != internal_default_instance()) delete index_type_name_;
}

void Register::ArenaDtor(void* object) {
  Register* _this = reinterpret_cast< Register* >(object);
  (void)_this;
}
void Register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && index_type_name_ != nullptr) {
    delete index_type_name_;
  }
  index_type_name_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4DataTypeSpec type_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4NamedType index_type_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_type_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_spec(this), target, stream);
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::index_type_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Register)
  return target;
}

size_t Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_spec_);
  }

  // .p4.config.v1.P4NamedType index_type_name = 4;
  if (this->_internal_has_index_type_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_type_name_);
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Register::GetClassData() const { return &_class_data_; }

void Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Register *>(to)->MergeFrom(
      static_cast<const Register &>(from));
}


void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Register)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_type_spec()) {
    _internal_mutable_type_spec()->::p4::config::v1::P4DataTypeSpec::MergeFrom(from._internal_type_spec());
  }
  if (from._internal_has_index_type_name()) {
    _internal_mutable_index_type_name()->::p4::config::v1::P4NamedType::MergeFrom(from._internal_index_type_name());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  return true;
}

void Register::InternalSwap(Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Register, size_)
      + sizeof(Register::size_)
      - PROTOBUF_FIELD_OFFSET(Register, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Register::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[22]);
}

// ===================================================================

class Digest::_Internal {
 public:
  static const ::p4::config::v1::Preamble& preamble(const Digest* msg);
  static const ::p4::config::v1::P4DataTypeSpec& type_spec(const Digest* msg);
};

const ::p4::config::v1::Preamble&
Digest::_Internal::preamble(const Digest* msg) {
  return *msg->preamble_;
}
const ::p4::config::v1::P4DataTypeSpec&
Digest::_Internal::type_spec(const Digest* msg) {
  return *msg->type_spec_;
}
void Digest::clear_type_spec() {
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
}
Digest::Digest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:p4.config.v1.Digest)
}
Digest::Digest(const Digest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preamble()) {
    preamble_ = new ::p4::config::v1::Preamble(*from.preamble_);
  } else {
    preamble_ = nullptr;
  }
  if (from._internal_has_type_spec()) {
    type_spec_ = new ::p4::config::v1::P4DataTypeSpec(*from.type_spec_);
  } else {
    type_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:p4.config.v1.Digest)
}

void Digest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preamble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_spec_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(type_spec_));
}

Digest::~Digest() {
  // @@protoc_insertion_point(destructor:p4.config.v1.Digest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Digest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preamble_;
  if (this != internal_default_instance()) delete type_spec_;
}

void Digest::ArenaDtor(void* object) {
  Digest* _this = reinterpret_cast< Digest* >(object);
  (void)_this;
}
void Digest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.config.v1.Digest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preamble_ != nullptr) {
    delete preamble_;
  }
  preamble_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Digest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p4.config.v1.Preamble preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preamble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p4.config.v1.P4DataTypeSpec type_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Digest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p4.config.v1.Digest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preamble(this), target, stream);
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p4.config.v1.Digest)
  return target;
}

size_t Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.config.v1.Digest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p4.config.v1.Preamble preamble = 1;
  if (this->_internal_has_preamble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preamble_);
  }

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  if (this->_internal_has_type_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Digest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Digest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Digest::GetClassData() const { return &_class_data_; }

void Digest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Digest *>(to)->MergeFrom(
      static_cast<const Digest &>(from));
}


void Digest::MergeFrom(const Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.config.v1.Digest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preamble()) {
    _internal_mutable_preamble()->::p4::config::v1::Preamble::MergeFrom(from._internal_preamble());
  }
  if (from._internal_has_type_spec()) {
    _internal_mutable_type_spec()->::p4::config::v1::P4DataTypeSpec::MergeFrom(from._internal_type_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Digest::CopyFrom(const Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.config.v1.Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digest::IsInitialized() const {
  return true;
}

void Digest::InternalSwap(Digest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Digest, type_spec_)
      + sizeof(Digest::type_spec_)
      - PROTOBUF_FIELD_OFFSET(Digest, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Digest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_getter, &descriptor_table_p4_2fconfig_2fv1_2fp4info_2eproto_once,
      file_level_metadata_p4_2fconfig_2fv1_2fp4info_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4Info* Arena::CreateMaybeMessage< ::p4::config::v1::P4Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4Info >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Documentation* Arena::CreateMaybeMessage< ::p4::config::v1::Documentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Documentation >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::PkgInfo* Arena::CreateMaybeMessage< ::p4::config::v1::PkgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::PkgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::P4Ids* Arena::CreateMaybeMessage< ::p4::config::v1::P4Ids >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::P4Ids >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Preamble* Arena::CreateMaybeMessage< ::p4::config::v1::Preamble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Preamble >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Extern* Arena::CreateMaybeMessage< ::p4::config::v1::Extern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Extern >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ExternInstance* Arena::CreateMaybeMessage< ::p4::config::v1::ExternInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ExternInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::MatchField* Arena::CreateMaybeMessage< ::p4::config::v1::MatchField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::MatchField >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Table* Arena::CreateMaybeMessage< ::p4::config::v1::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ActionRef* Arena::CreateMaybeMessage< ::p4::config::v1::ActionRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ActionRef >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Action_Param* Arena::CreateMaybeMessage< ::p4::config::v1::Action_Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Action_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Action* Arena::CreateMaybeMessage< ::p4::config::v1::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ActionProfile* Arena::CreateMaybeMessage< ::p4::config::v1::ActionProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ActionProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::CounterSpec* Arena::CreateMaybeMessage< ::p4::config::v1::CounterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::CounterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Counter* Arena::CreateMaybeMessage< ::p4::config::v1::Counter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Counter >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::DirectCounter* Arena::CreateMaybeMessage< ::p4::config::v1::DirectCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::DirectCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::MeterSpec* Arena::CreateMaybeMessage< ::p4::config::v1::MeterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::MeterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Meter* Arena::CreateMaybeMessage< ::p4::config::v1::Meter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Meter >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::DirectMeter* Arena::CreateMaybeMessage< ::p4::config::v1::DirectMeter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::DirectMeter >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ControllerPacketMetadata_Metadata* Arena::CreateMaybeMessage< ::p4::config::v1::ControllerPacketMetadata_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ControllerPacketMetadata_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ControllerPacketMetadata* Arena::CreateMaybeMessage< ::p4::config::v1::ControllerPacketMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ControllerPacketMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::ValueSet* Arena::CreateMaybeMessage< ::p4::config::v1::ValueSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::ValueSet >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Register* Arena::CreateMaybeMessage< ::p4::config::v1::Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Register >(arena);
}
template<> PROTOBUF_NOINLINE ::p4::config::v1::Digest* Arena::CreateMaybeMessage< ::p4::config::v1::Digest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p4::config::v1::Digest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
