// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/config/v1/p4types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p4_2fconfig_2fv1_2fp4types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p4_2fconfig_2fv1_2fp4types_2eproto;
namespace p4 {
namespace config {
namespace v1 {
class Expression;
struct ExpressionDefaultTypeInternal;
extern ExpressionDefaultTypeInternal _Expression_default_instance_;
class ExpressionList;
struct ExpressionListDefaultTypeInternal;
extern ExpressionListDefaultTypeInternal _ExpressionList_default_instance_;
class KeyValuePair;
struct KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class KeyValuePairList;
struct KeyValuePairListDefaultTypeInternal;
extern KeyValuePairListDefaultTypeInternal _KeyValuePairList_default_instance_;
class P4BitTypeSpec;
struct P4BitTypeSpecDefaultTypeInternal;
extern P4BitTypeSpecDefaultTypeInternal _P4BitTypeSpec_default_instance_;
class P4BitstringLikeTypeSpec;
struct P4BitstringLikeTypeSpecDefaultTypeInternal;
extern P4BitstringLikeTypeSpecDefaultTypeInternal _P4BitstringLikeTypeSpec_default_instance_;
class P4BoolType;
struct P4BoolTypeDefaultTypeInternal;
extern P4BoolTypeDefaultTypeInternal _P4BoolType_default_instance_;
class P4DataTypeSpec;
struct P4DataTypeSpecDefaultTypeInternal;
extern P4DataTypeSpecDefaultTypeInternal _P4DataTypeSpec_default_instance_;
class P4EnumTypeSpec;
struct P4EnumTypeSpecDefaultTypeInternal;
extern P4EnumTypeSpecDefaultTypeInternal _P4EnumTypeSpec_default_instance_;
class P4EnumTypeSpec_Member;
struct P4EnumTypeSpec_MemberDefaultTypeInternal;
extern P4EnumTypeSpec_MemberDefaultTypeInternal _P4EnumTypeSpec_Member_default_instance_;
class P4ErrorType;
struct P4ErrorTypeDefaultTypeInternal;
extern P4ErrorTypeDefaultTypeInternal _P4ErrorType_default_instance_;
class P4ErrorTypeSpec;
struct P4ErrorTypeSpecDefaultTypeInternal;
extern P4ErrorTypeSpecDefaultTypeInternal _P4ErrorTypeSpec_default_instance_;
class P4HeaderStackTypeSpec;
struct P4HeaderStackTypeSpecDefaultTypeInternal;
extern P4HeaderStackTypeSpecDefaultTypeInternal _P4HeaderStackTypeSpec_default_instance_;
class P4HeaderTypeSpec;
struct P4HeaderTypeSpecDefaultTypeInternal;
extern P4HeaderTypeSpecDefaultTypeInternal _P4HeaderTypeSpec_default_instance_;
class P4HeaderTypeSpec_Member;
struct P4HeaderTypeSpec_MemberDefaultTypeInternal;
extern P4HeaderTypeSpec_MemberDefaultTypeInternal _P4HeaderTypeSpec_Member_default_instance_;
class P4HeaderUnionStackTypeSpec;
struct P4HeaderUnionStackTypeSpecDefaultTypeInternal;
extern P4HeaderUnionStackTypeSpecDefaultTypeInternal _P4HeaderUnionStackTypeSpec_default_instance_;
class P4HeaderUnionTypeSpec;
struct P4HeaderUnionTypeSpecDefaultTypeInternal;
extern P4HeaderUnionTypeSpecDefaultTypeInternal _P4HeaderUnionTypeSpec_default_instance_;
class P4HeaderUnionTypeSpec_Member;
struct P4HeaderUnionTypeSpec_MemberDefaultTypeInternal;
extern P4HeaderUnionTypeSpec_MemberDefaultTypeInternal _P4HeaderUnionTypeSpec_Member_default_instance_;
class P4IntTypeSpec;
struct P4IntTypeSpecDefaultTypeInternal;
extern P4IntTypeSpecDefaultTypeInternal _P4IntTypeSpec_default_instance_;
class P4NamedType;
struct P4NamedTypeDefaultTypeInternal;
extern P4NamedTypeDefaultTypeInternal _P4NamedType_default_instance_;
class P4NewTypeSpec;
struct P4NewTypeSpecDefaultTypeInternal;
extern P4NewTypeSpecDefaultTypeInternal _P4NewTypeSpec_default_instance_;
class P4NewTypeTranslation;
struct P4NewTypeTranslationDefaultTypeInternal;
extern P4NewTypeTranslationDefaultTypeInternal _P4NewTypeTranslation_default_instance_;
class P4NewTypeTranslation_SdnString;
struct P4NewTypeTranslation_SdnStringDefaultTypeInternal;
extern P4NewTypeTranslation_SdnStringDefaultTypeInternal _P4NewTypeTranslation_SdnString_default_instance_;
class P4SerializableEnumTypeSpec;
struct P4SerializableEnumTypeSpecDefaultTypeInternal;
extern P4SerializableEnumTypeSpecDefaultTypeInternal _P4SerializableEnumTypeSpec_default_instance_;
class P4SerializableEnumTypeSpec_Member;
struct P4SerializableEnumTypeSpec_MemberDefaultTypeInternal;
extern P4SerializableEnumTypeSpec_MemberDefaultTypeInternal _P4SerializableEnumTypeSpec_Member_default_instance_;
class P4StructTypeSpec;
struct P4StructTypeSpecDefaultTypeInternal;
extern P4StructTypeSpecDefaultTypeInternal _P4StructTypeSpec_default_instance_;
class P4StructTypeSpec_Member;
struct P4StructTypeSpec_MemberDefaultTypeInternal;
extern P4StructTypeSpec_MemberDefaultTypeInternal _P4StructTypeSpec_Member_default_instance_;
class P4TupleTypeSpec;
struct P4TupleTypeSpecDefaultTypeInternal;
extern P4TupleTypeSpecDefaultTypeInternal _P4TupleTypeSpec_default_instance_;
class P4TypeInfo;
struct P4TypeInfoDefaultTypeInternal;
extern P4TypeInfoDefaultTypeInternal _P4TypeInfo_default_instance_;
class P4TypeInfo_EnumsEntry_DoNotUse;
struct P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_EnumsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_EnumsEntry_DoNotUse_default_instance_;
class P4TypeInfo_HeaderUnionsEntry_DoNotUse;
struct P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_HeaderUnionsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_HeaderUnionsEntry_DoNotUse_default_instance_;
class P4TypeInfo_HeadersEntry_DoNotUse;
struct P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_HeadersEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_HeadersEntry_DoNotUse_default_instance_;
class P4TypeInfo_NewTypesEntry_DoNotUse;
struct P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_NewTypesEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_NewTypesEntry_DoNotUse_default_instance_;
class P4TypeInfo_SerializableEnumsEntry_DoNotUse;
struct P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_SerializableEnumsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_SerializableEnumsEntry_DoNotUse_default_instance_;
class P4TypeInfo_StructsEntry_DoNotUse;
struct P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal;
extern P4TypeInfo_StructsEntry_DoNotUseDefaultTypeInternal _P4TypeInfo_StructsEntry_DoNotUse_default_instance_;
class P4VarbitTypeSpec;
struct P4VarbitTypeSpecDefaultTypeInternal;
extern P4VarbitTypeSpecDefaultTypeInternal _P4VarbitTypeSpec_default_instance_;
class SourceLocation;
struct SourceLocationDefaultTypeInternal;
extern SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
class StructuredAnnotation;
struct StructuredAnnotationDefaultTypeInternal;
extern StructuredAnnotationDefaultTypeInternal _StructuredAnnotation_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace p4
PROTOBUF_NAMESPACE_OPEN
template<> ::p4::config::v1::Expression* Arena::CreateMaybeMessage<::p4::config::v1::Expression>(Arena*);
template<> ::p4::config::v1::ExpressionList* Arena::CreateMaybeMessage<::p4::config::v1::ExpressionList>(Arena*);
template<> ::p4::config::v1::KeyValuePair* Arena::CreateMaybeMessage<::p4::config::v1::KeyValuePair>(Arena*);
template<> ::p4::config::v1::KeyValuePairList* Arena::CreateMaybeMessage<::p4::config::v1::KeyValuePairList>(Arena*);
template<> ::p4::config::v1::P4BitTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4BitTypeSpec>(Arena*);
template<> ::p4::config::v1::P4BitstringLikeTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4BitstringLikeTypeSpec>(Arena*);
template<> ::p4::config::v1::P4BoolType* Arena::CreateMaybeMessage<::p4::config::v1::P4BoolType>(Arena*);
template<> ::p4::config::v1::P4DataTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4DataTypeSpec>(Arena*);
template<> ::p4::config::v1::P4EnumTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4EnumTypeSpec>(Arena*);
template<> ::p4::config::v1::P4EnumTypeSpec_Member* Arena::CreateMaybeMessage<::p4::config::v1::P4EnumTypeSpec_Member>(Arena*);
template<> ::p4::config::v1::P4ErrorType* Arena::CreateMaybeMessage<::p4::config::v1::P4ErrorType>(Arena*);
template<> ::p4::config::v1::P4ErrorTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4ErrorTypeSpec>(Arena*);
template<> ::p4::config::v1::P4HeaderStackTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderStackTypeSpec>(Arena*);
template<> ::p4::config::v1::P4HeaderTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderTypeSpec>(Arena*);
template<> ::p4::config::v1::P4HeaderTypeSpec_Member* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderTypeSpec_Member>(Arena*);
template<> ::p4::config::v1::P4HeaderUnionStackTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderUnionStackTypeSpec>(Arena*);
template<> ::p4::config::v1::P4HeaderUnionTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderUnionTypeSpec>(Arena*);
template<> ::p4::config::v1::P4HeaderUnionTypeSpec_Member* Arena::CreateMaybeMessage<::p4::config::v1::P4HeaderUnionTypeSpec_Member>(Arena*);
template<> ::p4::config::v1::P4IntTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4IntTypeSpec>(Arena*);
template<> ::p4::config::v1::P4NamedType* Arena::CreateMaybeMessage<::p4::config::v1::P4NamedType>(Arena*);
template<> ::p4::config::v1::P4NewTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4NewTypeSpec>(Arena*);
template<> ::p4::config::v1::P4NewTypeTranslation* Arena::CreateMaybeMessage<::p4::config::v1::P4NewTypeTranslation>(Arena*);
template<> ::p4::config::v1::P4NewTypeTranslation_SdnString* Arena::CreateMaybeMessage<::p4::config::v1::P4NewTypeTranslation_SdnString>(Arena*);
template<> ::p4::config::v1::P4SerializableEnumTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4SerializableEnumTypeSpec>(Arena*);
template<> ::p4::config::v1::P4SerializableEnumTypeSpec_Member* Arena::CreateMaybeMessage<::p4::config::v1::P4SerializableEnumTypeSpec_Member>(Arena*);
template<> ::p4::config::v1::P4StructTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4StructTypeSpec>(Arena*);
template<> ::p4::config::v1::P4StructTypeSpec_Member* Arena::CreateMaybeMessage<::p4::config::v1::P4StructTypeSpec_Member>(Arena*);
template<> ::p4::config::v1::P4TupleTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4TupleTypeSpec>(Arena*);
template<> ::p4::config::v1::P4TypeInfo* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_EnumsEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_HeaderUnionsEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_HeadersEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_NewTypesEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_SerializableEnumsEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse* Arena::CreateMaybeMessage<::p4::config::v1::P4TypeInfo_StructsEntry_DoNotUse>(Arena*);
template<> ::p4::config::v1::P4VarbitTypeSpec* Arena::CreateMaybeMessage<::p4::config::v1::P4VarbitTypeSpec>(Arena*);
template<> ::p4::config::v1::SourceLocation* Arena::CreateMaybeMessage<::p4::config::v1::SourceLocation>(Arena*);
template<> ::p4::config::v1::StructuredAnnotation* Arena::CreateMaybeMessage<::p4::config::v1::StructuredAnnotation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p4 {
namespace config {
namespace v1 {

// ===================================================================

class P4TypeInfo_StructsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_StructsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4StructTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_StructsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4StructTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_StructsEntry_DoNotUse();
  explicit constexpr P4TypeInfo_StructsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_StructsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_StructsEntry_DoNotUse& other);
  static const P4TypeInfo_StructsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_StructsEntry_DoNotUse*>(&_P4TypeInfo_StructsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.StructsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_HeadersEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4HeaderTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_HeadersEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4HeaderTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_HeadersEntry_DoNotUse();
  explicit constexpr P4TypeInfo_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_HeadersEntry_DoNotUse& other);
  static const P4TypeInfo_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_HeadersEntry_DoNotUse*>(&_P4TypeInfo_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.HeadersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo_HeaderUnionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_HeaderUnionsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4HeaderUnionTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_HeaderUnionsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4HeaderUnionTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_HeaderUnionsEntry_DoNotUse();
  explicit constexpr P4TypeInfo_HeaderUnionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_HeaderUnionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_HeaderUnionsEntry_DoNotUse& other);
  static const P4TypeInfo_HeaderUnionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_HeaderUnionsEntry_DoNotUse*>(&_P4TypeInfo_HeaderUnionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.HeaderUnionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo_EnumsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_EnumsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4EnumTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_EnumsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4EnumTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_EnumsEntry_DoNotUse();
  explicit constexpr P4TypeInfo_EnumsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_EnumsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_EnumsEntry_DoNotUse& other);
  static const P4TypeInfo_EnumsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_EnumsEntry_DoNotUse*>(&_P4TypeInfo_EnumsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.EnumsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo_SerializableEnumsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_SerializableEnumsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4SerializableEnumTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_SerializableEnumsEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4SerializableEnumTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_SerializableEnumsEntry_DoNotUse();
  explicit constexpr P4TypeInfo_SerializableEnumsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_SerializableEnumsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_SerializableEnumsEntry_DoNotUse& other);
  static const P4TypeInfo_SerializableEnumsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_SerializableEnumsEntry_DoNotUse*>(&_P4TypeInfo_SerializableEnumsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.SerializableEnumsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo_NewTypesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_NewTypesEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4NewTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<P4TypeInfo_NewTypesEntry_DoNotUse, 
    std::string, ::p4::config::v1::P4NewTypeSpec,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  P4TypeInfo_NewTypesEntry_DoNotUse();
  explicit constexpr P4TypeInfo_NewTypesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit P4TypeInfo_NewTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const P4TypeInfo_NewTypesEntry_DoNotUse& other);
  static const P4TypeInfo_NewTypesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const P4TypeInfo_NewTypesEntry_DoNotUse*>(&_P4TypeInfo_NewTypesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "p4.config.v1.P4TypeInfo.NewTypesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class P4TypeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4TypeInfo) */ {
 public:
  inline P4TypeInfo() : P4TypeInfo(nullptr) {}
  ~P4TypeInfo() override;
  explicit constexpr P4TypeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4TypeInfo(const P4TypeInfo& from);
  P4TypeInfo(P4TypeInfo&& from) noexcept
    : P4TypeInfo() {
    *this = ::std::move(from);
  }

  inline P4TypeInfo& operator=(const P4TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4TypeInfo& operator=(P4TypeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4TypeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4TypeInfo* internal_default_instance() {
    return reinterpret_cast<const P4TypeInfo*>(
               &_P4TypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(P4TypeInfo& a, P4TypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(P4TypeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4TypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4TypeInfo* New() const final {
    return new P4TypeInfo();
  }

  P4TypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4TypeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4TypeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4TypeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4TypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4TypeInfo";
  }
  protected:
  explicit P4TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStructsFieldNumber = 1,
    kHeadersFieldNumber = 2,
    kHeaderUnionsFieldNumber = 3,
    kEnumsFieldNumber = 4,
    kSerializableEnumsFieldNumber = 6,
    kNewTypesFieldNumber = 7,
    kErrorFieldNumber = 5,
  };
  // map<string, .p4.config.v1.P4StructTypeSpec> structs = 1;
  int structs_size() const;
  private:
  int _internal_structs_size() const;
  public:
  void clear_structs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >&
      _internal_structs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >*
      _internal_mutable_structs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >&
      structs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >*
      mutable_structs();

  // map<string, .p4.config.v1.P4HeaderTypeSpec> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >*
      mutable_headers();

  // map<string, .p4.config.v1.P4HeaderUnionTypeSpec> header_unions = 3;
  int header_unions_size() const;
  private:
  int _internal_header_unions_size() const;
  public:
  void clear_header_unions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >&
      _internal_header_unions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >*
      _internal_mutable_header_unions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >&
      header_unions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >*
      mutable_header_unions();

  // map<string, .p4.config.v1.P4EnumTypeSpec> enums = 4;
  int enums_size() const;
  private:
  int _internal_enums_size() const;
  public:
  void clear_enums();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >&
      _internal_enums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >*
      _internal_mutable_enums();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >&
      enums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >*
      mutable_enums();

  // map<string, .p4.config.v1.P4SerializableEnumTypeSpec> serializable_enums = 6;
  int serializable_enums_size() const;
  private:
  int _internal_serializable_enums_size() const;
  public:
  void clear_serializable_enums();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >&
      _internal_serializable_enums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >*
      _internal_mutable_serializable_enums();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >&
      serializable_enums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >*
      mutable_serializable_enums();

  // map<string, .p4.config.v1.P4NewTypeSpec> new_types = 7;
  int new_types_size() const;
  private:
  int _internal_new_types_size() const;
  public:
  void clear_new_types();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >&
      _internal_new_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >*
      _internal_mutable_new_types();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >&
      new_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >*
      mutable_new_types();

  // .p4.config.v1.P4ErrorTypeSpec error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::p4::config::v1::P4ErrorTypeSpec& error() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4ErrorTypeSpec* release_error();
  ::p4::config::v1::P4ErrorTypeSpec* mutable_error();
  void set_allocated_error(::p4::config::v1::P4ErrorTypeSpec* error);
  private:
  const ::p4::config::v1::P4ErrorTypeSpec& _internal_error() const;
  ::p4::config::v1::P4ErrorTypeSpec* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::p4::config::v1::P4ErrorTypeSpec* error);
  ::p4::config::v1::P4ErrorTypeSpec* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4TypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_StructsEntry_DoNotUse,
      std::string, ::p4::config::v1::P4StructTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> structs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_HeadersEntry_DoNotUse,
      std::string, ::p4::config::v1::P4HeaderTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_HeaderUnionsEntry_DoNotUse,
      std::string, ::p4::config::v1::P4HeaderUnionTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> header_unions_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_EnumsEntry_DoNotUse,
      std::string, ::p4::config::v1::P4EnumTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> enums_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_SerializableEnumsEntry_DoNotUse,
      std::string, ::p4::config::v1::P4SerializableEnumTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> serializable_enums_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      P4TypeInfo_NewTypesEntry_DoNotUse,
      std::string, ::p4::config::v1::P4NewTypeSpec,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> new_types_;
  ::p4::config::v1::P4ErrorTypeSpec* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4DataTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4DataTypeSpec) */ {
 public:
  inline P4DataTypeSpec() : P4DataTypeSpec(nullptr) {}
  ~P4DataTypeSpec() override;
  explicit constexpr P4DataTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4DataTypeSpec(const P4DataTypeSpec& from);
  P4DataTypeSpec(P4DataTypeSpec&& from) noexcept
    : P4DataTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4DataTypeSpec& operator=(const P4DataTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4DataTypeSpec& operator=(P4DataTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4DataTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  enum TypeSpecCase {
    kBitstring = 1,
    kBool = 2,
    kTuple = 3,
    kStruct = 4,
    kHeader = 5,
    kHeaderUnion = 6,
    kHeaderStack = 7,
    kHeaderUnionStack = 8,
    kEnum = 9,
    kError = 10,
    kSerializableEnum = 11,
    kNewType = 12,
    TYPE_SPEC_NOT_SET = 0,
  };

  static inline const P4DataTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4DataTypeSpec*>(
               &_P4DataTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(P4DataTypeSpec& a, P4DataTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4DataTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4DataTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4DataTypeSpec* New() const final {
    return new P4DataTypeSpec();
  }

  P4DataTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4DataTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4DataTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4DataTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4DataTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4DataTypeSpec";
  }
  protected:
  explicit P4DataTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitstringFieldNumber = 1,
    kBoolFieldNumber = 2,
    kTupleFieldNumber = 3,
    kStructFieldNumber = 4,
    kHeaderFieldNumber = 5,
    kHeaderUnionFieldNumber = 6,
    kHeaderStackFieldNumber = 7,
    kHeaderUnionStackFieldNumber = 8,
    kEnumFieldNumber = 9,
    kErrorFieldNumber = 10,
    kSerializableEnumFieldNumber = 11,
    kNewTypeFieldNumber = 12,
  };
  // .p4.config.v1.P4BitstringLikeTypeSpec bitstring = 1;
  bool has_bitstring() const;
  private:
  bool _internal_has_bitstring() const;
  public:
  void clear_bitstring();
  const ::p4::config::v1::P4BitstringLikeTypeSpec& bitstring() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4BitstringLikeTypeSpec* release_bitstring();
  ::p4::config::v1::P4BitstringLikeTypeSpec* mutable_bitstring();
  void set_allocated_bitstring(::p4::config::v1::P4BitstringLikeTypeSpec* bitstring);
  private:
  const ::p4::config::v1::P4BitstringLikeTypeSpec& _internal_bitstring() const;
  ::p4::config::v1::P4BitstringLikeTypeSpec* _internal_mutable_bitstring();
  public:
  void unsafe_arena_set_allocated_bitstring(
      ::p4::config::v1::P4BitstringLikeTypeSpec* bitstring);
  ::p4::config::v1::P4BitstringLikeTypeSpec* unsafe_arena_release_bitstring();

  // .p4.config.v1.P4BoolType bool = 2;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  const ::p4::config::v1::P4BoolType& bool_() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4BoolType* release_bool_();
  ::p4::config::v1::P4BoolType* mutable_bool_();
  void set_allocated_bool_(::p4::config::v1::P4BoolType* bool_);
  private:
  const ::p4::config::v1::P4BoolType& _internal_bool_() const;
  ::p4::config::v1::P4BoolType* _internal_mutable_bool_();
  public:
  void unsafe_arena_set_allocated_bool_(
      ::p4::config::v1::P4BoolType* bool_);
  ::p4::config::v1::P4BoolType* unsafe_arena_release_bool_();

  // .p4.config.v1.P4TupleTypeSpec tuple = 3;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::p4::config::v1::P4TupleTypeSpec& tuple() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4TupleTypeSpec* release_tuple();
  ::p4::config::v1::P4TupleTypeSpec* mutable_tuple();
  void set_allocated_tuple(::p4::config::v1::P4TupleTypeSpec* tuple);
  private:
  const ::p4::config::v1::P4TupleTypeSpec& _internal_tuple() const;
  ::p4::config::v1::P4TupleTypeSpec* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::p4::config::v1::P4TupleTypeSpec* tuple);
  ::p4::config::v1::P4TupleTypeSpec* unsafe_arena_release_tuple();

  // .p4.config.v1.P4NamedType struct = 4;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::p4::config::v1::P4NamedType& struct_() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_struct_();
  ::p4::config::v1::P4NamedType* mutable_struct_();
  void set_allocated_struct_(::p4::config::v1::P4NamedType* struct_);
  private:
  const ::p4::config::v1::P4NamedType& _internal_struct_() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::p4::config::v1::P4NamedType* struct_);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_struct_();

  // .p4.config.v1.P4NamedType header = 5;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::p4::config::v1::P4NamedType& header() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_header();
  ::p4::config::v1::P4NamedType* mutable_header();
  void set_allocated_header(::p4::config::v1::P4NamedType* header);
  private:
  const ::p4::config::v1::P4NamedType& _internal_header() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::p4::config::v1::P4NamedType* header);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_header();

  // .p4.config.v1.P4NamedType header_union = 6;
  bool has_header_union() const;
  private:
  bool _internal_has_header_union() const;
  public:
  void clear_header_union();
  const ::p4::config::v1::P4NamedType& header_union() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_header_union();
  ::p4::config::v1::P4NamedType* mutable_header_union();
  void set_allocated_header_union(::p4::config::v1::P4NamedType* header_union);
  private:
  const ::p4::config::v1::P4NamedType& _internal_header_union() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_header_union();
  public:
  void unsafe_arena_set_allocated_header_union(
      ::p4::config::v1::P4NamedType* header_union);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_header_union();

  // .p4.config.v1.P4HeaderStackTypeSpec header_stack = 7;
  bool has_header_stack() const;
  private:
  bool _internal_has_header_stack() const;
  public:
  void clear_header_stack();
  const ::p4::config::v1::P4HeaderStackTypeSpec& header_stack() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4HeaderStackTypeSpec* release_header_stack();
  ::p4::config::v1::P4HeaderStackTypeSpec* mutable_header_stack();
  void set_allocated_header_stack(::p4::config::v1::P4HeaderStackTypeSpec* header_stack);
  private:
  const ::p4::config::v1::P4HeaderStackTypeSpec& _internal_header_stack() const;
  ::p4::config::v1::P4HeaderStackTypeSpec* _internal_mutable_header_stack();
  public:
  void unsafe_arena_set_allocated_header_stack(
      ::p4::config::v1::P4HeaderStackTypeSpec* header_stack);
  ::p4::config::v1::P4HeaderStackTypeSpec* unsafe_arena_release_header_stack();

  // .p4.config.v1.P4HeaderUnionStackTypeSpec header_union_stack = 8;
  bool has_header_union_stack() const;
  private:
  bool _internal_has_header_union_stack() const;
  public:
  void clear_header_union_stack();
  const ::p4::config::v1::P4HeaderUnionStackTypeSpec& header_union_stack() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4HeaderUnionStackTypeSpec* release_header_union_stack();
  ::p4::config::v1::P4HeaderUnionStackTypeSpec* mutable_header_union_stack();
  void set_allocated_header_union_stack(::p4::config::v1::P4HeaderUnionStackTypeSpec* header_union_stack);
  private:
  const ::p4::config::v1::P4HeaderUnionStackTypeSpec& _internal_header_union_stack() const;
  ::p4::config::v1::P4HeaderUnionStackTypeSpec* _internal_mutable_header_union_stack();
  public:
  void unsafe_arena_set_allocated_header_union_stack(
      ::p4::config::v1::P4HeaderUnionStackTypeSpec* header_union_stack);
  ::p4::config::v1::P4HeaderUnionStackTypeSpec* unsafe_arena_release_header_union_stack();

  // .p4.config.v1.P4NamedType enum = 9;
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  const ::p4::config::v1::P4NamedType& enum_() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_enum_();
  ::p4::config::v1::P4NamedType* mutable_enum_();
  void set_allocated_enum_(::p4::config::v1::P4NamedType* enum_);
  private:
  const ::p4::config::v1::P4NamedType& _internal_enum_() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_enum_();
  public:
  void unsafe_arena_set_allocated_enum_(
      ::p4::config::v1::P4NamedType* enum_);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_enum_();

  // .p4.config.v1.P4ErrorType error = 10;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::p4::config::v1::P4ErrorType& error() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4ErrorType* release_error();
  ::p4::config::v1::P4ErrorType* mutable_error();
  void set_allocated_error(::p4::config::v1::P4ErrorType* error);
  private:
  const ::p4::config::v1::P4ErrorType& _internal_error() const;
  ::p4::config::v1::P4ErrorType* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::p4::config::v1::P4ErrorType* error);
  ::p4::config::v1::P4ErrorType* unsafe_arena_release_error();

  // .p4.config.v1.P4NamedType serializable_enum = 11;
  bool has_serializable_enum() const;
  private:
  bool _internal_has_serializable_enum() const;
  public:
  void clear_serializable_enum();
  const ::p4::config::v1::P4NamedType& serializable_enum() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_serializable_enum();
  ::p4::config::v1::P4NamedType* mutable_serializable_enum();
  void set_allocated_serializable_enum(::p4::config::v1::P4NamedType* serializable_enum);
  private:
  const ::p4::config::v1::P4NamedType& _internal_serializable_enum() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_serializable_enum();
  public:
  void unsafe_arena_set_allocated_serializable_enum(
      ::p4::config::v1::P4NamedType* serializable_enum);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_serializable_enum();

  // .p4.config.v1.P4NamedType new_type = 12;
  bool has_new_type() const;
  private:
  bool _internal_has_new_type() const;
  public:
  void clear_new_type();
  const ::p4::config::v1::P4NamedType& new_type() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_new_type();
  ::p4::config::v1::P4NamedType* mutable_new_type();
  void set_allocated_new_type(::p4::config::v1::P4NamedType* new_type);
  private:
  const ::p4::config::v1::P4NamedType& _internal_new_type() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_new_type();
  public:
  void unsafe_arena_set_allocated_new_type(
      ::p4::config::v1::P4NamedType* new_type);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_new_type();

  void clear_type_spec();
  TypeSpecCase type_spec_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.P4DataTypeSpec)
 private:
  class _Internal;
  void set_has_bitstring();
  void set_has_bool_();
  void set_has_tuple();
  void set_has_struct_();
  void set_has_header();
  void set_has_header_union();
  void set_has_header_stack();
  void set_has_header_union_stack();
  void set_has_enum_();
  void set_has_error();
  void set_has_serializable_enum();
  void set_has_new_type();

  inline bool has_type_spec() const;
  inline void clear_has_type_spec();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeSpecUnion {
    constexpr TypeSpecUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::p4::config::v1::P4BitstringLikeTypeSpec* bitstring_;
    ::p4::config::v1::P4BoolType* bool__;
    ::p4::config::v1::P4TupleTypeSpec* tuple_;
    ::p4::config::v1::P4NamedType* struct__;
    ::p4::config::v1::P4NamedType* header_;
    ::p4::config::v1::P4NamedType* header_union_;
    ::p4::config::v1::P4HeaderStackTypeSpec* header_stack_;
    ::p4::config::v1::P4HeaderUnionStackTypeSpec* header_union_stack_;
    ::p4::config::v1::P4NamedType* enum__;
    ::p4::config::v1::P4ErrorType* error_;
    ::p4::config::v1::P4NamedType* serializable_enum_;
    ::p4::config::v1::P4NamedType* new_type_;
  } type_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4NamedType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4NamedType) */ {
 public:
  inline P4NamedType() : P4NamedType(nullptr) {}
  ~P4NamedType() override;
  explicit constexpr P4NamedType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4NamedType(const P4NamedType& from);
  P4NamedType(P4NamedType&& from) noexcept
    : P4NamedType() {
    *this = ::std::move(from);
  }

  inline P4NamedType& operator=(const P4NamedType& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4NamedType& operator=(P4NamedType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4NamedType& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4NamedType* internal_default_instance() {
    return reinterpret_cast<const P4NamedType*>(
               &_P4NamedType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(P4NamedType& a, P4NamedType& b) {
    a.Swap(&b);
  }
  inline void Swap(P4NamedType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4NamedType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4NamedType* New() const final {
    return new P4NamedType();
  }

  P4NamedType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4NamedType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4NamedType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4NamedType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4NamedType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4NamedType";
  }
  protected:
  explicit P4NamedType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4NamedType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4BoolType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:p4.config.v1.P4BoolType) */ {
 public:
  inline P4BoolType() : P4BoolType(nullptr) {}
  explicit constexpr P4BoolType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4BoolType(const P4BoolType& from);
  P4BoolType(P4BoolType&& from) noexcept
    : P4BoolType() {
    *this = ::std::move(from);
  }

  inline P4BoolType& operator=(const P4BoolType& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4BoolType& operator=(P4BoolType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4BoolType& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4BoolType* internal_default_instance() {
    return reinterpret_cast<const P4BoolType*>(
               &_P4BoolType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(P4BoolType& a, P4BoolType& b) {
    a.Swap(&b);
  }
  inline void Swap(P4BoolType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4BoolType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4BoolType* New() const final {
    return new P4BoolType();
  }

  P4BoolType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4BoolType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const P4BoolType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const P4BoolType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4BoolType";
  }
  protected:
  explicit P4BoolType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4BoolType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4ErrorType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:p4.config.v1.P4ErrorType) */ {
 public:
  inline P4ErrorType() : P4ErrorType(nullptr) {}
  explicit constexpr P4ErrorType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4ErrorType(const P4ErrorType& from);
  P4ErrorType(P4ErrorType&& from) noexcept
    : P4ErrorType() {
    *this = ::std::move(from);
  }

  inline P4ErrorType& operator=(const P4ErrorType& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4ErrorType& operator=(P4ErrorType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4ErrorType& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4ErrorType* internal_default_instance() {
    return reinterpret_cast<const P4ErrorType*>(
               &_P4ErrorType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(P4ErrorType& a, P4ErrorType& b) {
    a.Swap(&b);
  }
  inline void Swap(P4ErrorType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4ErrorType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4ErrorType* New() const final {
    return new P4ErrorType();
  }

  P4ErrorType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4ErrorType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const P4ErrorType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const P4ErrorType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4ErrorType";
  }
  protected:
  explicit P4ErrorType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4ErrorType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4BitstringLikeTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4BitstringLikeTypeSpec) */ {
 public:
  inline P4BitstringLikeTypeSpec() : P4BitstringLikeTypeSpec(nullptr) {}
  ~P4BitstringLikeTypeSpec() override;
  explicit constexpr P4BitstringLikeTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4BitstringLikeTypeSpec(const P4BitstringLikeTypeSpec& from);
  P4BitstringLikeTypeSpec(P4BitstringLikeTypeSpec&& from) noexcept
    : P4BitstringLikeTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4BitstringLikeTypeSpec& operator=(const P4BitstringLikeTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4BitstringLikeTypeSpec& operator=(P4BitstringLikeTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4BitstringLikeTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  enum TypeSpecCase {
    kBit = 1,
    kInt = 2,
    kVarbit = 3,
    TYPE_SPEC_NOT_SET = 0,
  };

  static inline const P4BitstringLikeTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4BitstringLikeTypeSpec*>(
               &_P4BitstringLikeTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(P4BitstringLikeTypeSpec& a, P4BitstringLikeTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4BitstringLikeTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4BitstringLikeTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4BitstringLikeTypeSpec* New() const final {
    return new P4BitstringLikeTypeSpec();
  }

  P4BitstringLikeTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4BitstringLikeTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4BitstringLikeTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4BitstringLikeTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4BitstringLikeTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4BitstringLikeTypeSpec";
  }
  protected:
  explicit P4BitstringLikeTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 4,
    kAnnotationLocationsFieldNumber = 5,
    kStructuredAnnotationsFieldNumber = 6,
    kBitFieldNumber = 1,
    kIntFieldNumber = 2,
    kVarbitFieldNumber = 3,
  };
  // repeated string annotations = 4;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // .p4.config.v1.P4BitTypeSpec bit = 1;
  bool has_bit() const;
  private:
  bool _internal_has_bit() const;
  public:
  void clear_bit();
  const ::p4::config::v1::P4BitTypeSpec& bit() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4BitTypeSpec* release_bit();
  ::p4::config::v1::P4BitTypeSpec* mutable_bit();
  void set_allocated_bit(::p4::config::v1::P4BitTypeSpec* bit);
  private:
  const ::p4::config::v1::P4BitTypeSpec& _internal_bit() const;
  ::p4::config::v1::P4BitTypeSpec* _internal_mutable_bit();
  public:
  void unsafe_arena_set_allocated_bit(
      ::p4::config::v1::P4BitTypeSpec* bit);
  ::p4::config::v1::P4BitTypeSpec* unsafe_arena_release_bit();

  // .p4.config.v1.P4IntTypeSpec int = 2;
  bool has_int_() const;
  private:
  bool _internal_has_int_() const;
  public:
  void clear_int_();
  const ::p4::config::v1::P4IntTypeSpec& int_() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4IntTypeSpec* release_int_();
  ::p4::config::v1::P4IntTypeSpec* mutable_int_();
  void set_allocated_int_(::p4::config::v1::P4IntTypeSpec* int_);
  private:
  const ::p4::config::v1::P4IntTypeSpec& _internal_int_() const;
  ::p4::config::v1::P4IntTypeSpec* _internal_mutable_int_();
  public:
  void unsafe_arena_set_allocated_int_(
      ::p4::config::v1::P4IntTypeSpec* int_);
  ::p4::config::v1::P4IntTypeSpec* unsafe_arena_release_int_();

  // .p4.config.v1.P4VarbitTypeSpec varbit = 3;
  bool has_varbit() const;
  private:
  bool _internal_has_varbit() const;
  public:
  void clear_varbit();
  const ::p4::config::v1::P4VarbitTypeSpec& varbit() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4VarbitTypeSpec* release_varbit();
  ::p4::config::v1::P4VarbitTypeSpec* mutable_varbit();
  void set_allocated_varbit(::p4::config::v1::P4VarbitTypeSpec* varbit);
  private:
  const ::p4::config::v1::P4VarbitTypeSpec& _internal_varbit() const;
  ::p4::config::v1::P4VarbitTypeSpec* _internal_mutable_varbit();
  public:
  void unsafe_arena_set_allocated_varbit(
      ::p4::config::v1::P4VarbitTypeSpec* varbit);
  ::p4::config::v1::P4VarbitTypeSpec* unsafe_arena_release_varbit();

  void clear_type_spec();
  TypeSpecCase type_spec_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.P4BitstringLikeTypeSpec)
 private:
  class _Internal;
  void set_has_bit();
  void set_has_int_();
  void set_has_varbit();

  inline bool has_type_spec() const;
  inline void clear_has_type_spec();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  union TypeSpecUnion {
    constexpr TypeSpecUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::p4::config::v1::P4BitTypeSpec* bit_;
    ::p4::config::v1::P4IntTypeSpec* int__;
    ::p4::config::v1::P4VarbitTypeSpec* varbit_;
  } type_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4BitTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4BitTypeSpec) */ {
 public:
  inline P4BitTypeSpec() : P4BitTypeSpec(nullptr) {}
  ~P4BitTypeSpec() override;
  explicit constexpr P4BitTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4BitTypeSpec(const P4BitTypeSpec& from);
  P4BitTypeSpec(P4BitTypeSpec&& from) noexcept
    : P4BitTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4BitTypeSpec& operator=(const P4BitTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4BitTypeSpec& operator=(P4BitTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4BitTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4BitTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4BitTypeSpec*>(
               &_P4BitTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(P4BitTypeSpec& a, P4BitTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4BitTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4BitTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4BitTypeSpec* New() const final {
    return new P4BitTypeSpec();
  }

  P4BitTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4BitTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4BitTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4BitTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4BitTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4BitTypeSpec";
  }
  protected:
  explicit P4BitTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitwidthFieldNumber = 1,
  };
  // int32 bitwidth = 1;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4BitTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4IntTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4IntTypeSpec) */ {
 public:
  inline P4IntTypeSpec() : P4IntTypeSpec(nullptr) {}
  ~P4IntTypeSpec() override;
  explicit constexpr P4IntTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4IntTypeSpec(const P4IntTypeSpec& from);
  P4IntTypeSpec(P4IntTypeSpec&& from) noexcept
    : P4IntTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4IntTypeSpec& operator=(const P4IntTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4IntTypeSpec& operator=(P4IntTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4IntTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4IntTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4IntTypeSpec*>(
               &_P4IntTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(P4IntTypeSpec& a, P4IntTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4IntTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4IntTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4IntTypeSpec* New() const final {
    return new P4IntTypeSpec();
  }

  P4IntTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4IntTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4IntTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4IntTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4IntTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4IntTypeSpec";
  }
  protected:
  explicit P4IntTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitwidthFieldNumber = 1,
  };
  // int32 bitwidth = 1;
  void clear_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth() const;
  void set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitwidth() const;
  void _internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4IntTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4VarbitTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4VarbitTypeSpec) */ {
 public:
  inline P4VarbitTypeSpec() : P4VarbitTypeSpec(nullptr) {}
  ~P4VarbitTypeSpec() override;
  explicit constexpr P4VarbitTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4VarbitTypeSpec(const P4VarbitTypeSpec& from);
  P4VarbitTypeSpec(P4VarbitTypeSpec&& from) noexcept
    : P4VarbitTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4VarbitTypeSpec& operator=(const P4VarbitTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4VarbitTypeSpec& operator=(P4VarbitTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4VarbitTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4VarbitTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4VarbitTypeSpec*>(
               &_P4VarbitTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(P4VarbitTypeSpec& a, P4VarbitTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4VarbitTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4VarbitTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4VarbitTypeSpec* New() const final {
    return new P4VarbitTypeSpec();
  }

  P4VarbitTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4VarbitTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4VarbitTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4VarbitTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4VarbitTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4VarbitTypeSpec";
  }
  protected:
  explicit P4VarbitTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBitwidthFieldNumber = 1,
  };
  // int32 max_bitwidth = 1;
  void clear_max_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 max_bitwidth() const;
  void set_max_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_bitwidth() const;
  void _internal_set_max_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4VarbitTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_bitwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4TupleTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4TupleTypeSpec) */ {
 public:
  inline P4TupleTypeSpec() : P4TupleTypeSpec(nullptr) {}
  ~P4TupleTypeSpec() override;
  explicit constexpr P4TupleTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4TupleTypeSpec(const P4TupleTypeSpec& from);
  P4TupleTypeSpec(P4TupleTypeSpec&& from) noexcept
    : P4TupleTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4TupleTypeSpec& operator=(const P4TupleTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4TupleTypeSpec& operator=(P4TupleTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4TupleTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4TupleTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4TupleTypeSpec*>(
               &_P4TupleTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(P4TupleTypeSpec& a, P4TupleTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4TupleTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4TupleTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4TupleTypeSpec* New() const final {
    return new P4TupleTypeSpec();
  }

  P4TupleTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4TupleTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4TupleTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4TupleTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4TupleTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4TupleTypeSpec";
  }
  protected:
  explicit P4TupleTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .p4.config.v1.P4DataTypeSpec members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4DataTypeSpec* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4DataTypeSpec >*
      mutable_members();
  private:
  const ::p4::config::v1::P4DataTypeSpec& _internal_members(int index) const;
  ::p4::config::v1::P4DataTypeSpec* _internal_add_members();
  public:
  const ::p4::config::v1::P4DataTypeSpec& members(int index) const;
  ::p4::config::v1::P4DataTypeSpec* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4DataTypeSpec >&
      members() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4TupleTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4DataTypeSpec > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4StructTypeSpec_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4StructTypeSpec.Member) */ {
 public:
  inline P4StructTypeSpec_Member() : P4StructTypeSpec_Member(nullptr) {}
  ~P4StructTypeSpec_Member() override;
  explicit constexpr P4StructTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4StructTypeSpec_Member(const P4StructTypeSpec_Member& from);
  P4StructTypeSpec_Member(P4StructTypeSpec_Member&& from) noexcept
    : P4StructTypeSpec_Member() {
    *this = ::std::move(from);
  }

  inline P4StructTypeSpec_Member& operator=(const P4StructTypeSpec_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4StructTypeSpec_Member& operator=(P4StructTypeSpec_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4StructTypeSpec_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4StructTypeSpec_Member* internal_default_instance() {
    return reinterpret_cast<const P4StructTypeSpec_Member*>(
               &_P4StructTypeSpec_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(P4StructTypeSpec_Member& a, P4StructTypeSpec_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(P4StructTypeSpec_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4StructTypeSpec_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4StructTypeSpec_Member* New() const final {
    return new P4StructTypeSpec_Member();
  }

  P4StructTypeSpec_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4StructTypeSpec_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4StructTypeSpec_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4StructTypeSpec_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4StructTypeSpec_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4StructTypeSpec.Member";
  }
  protected:
  explicit P4StructTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeSpecFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.P4DataTypeSpec type_spec = 2;
  bool has_type_spec() const;
  private:
  bool _internal_has_type_spec() const;
  public:
  void clear_type_spec();
  const ::p4::config::v1::P4DataTypeSpec& type_spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4DataTypeSpec* release_type_spec();
  ::p4::config::v1::P4DataTypeSpec* mutable_type_spec();
  void set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec);
  private:
  const ::p4::config::v1::P4DataTypeSpec& _internal_type_spec() const;
  ::p4::config::v1::P4DataTypeSpec* _internal_mutable_type_spec();
  public:
  void unsafe_arena_set_allocated_type_spec(
      ::p4::config::v1::P4DataTypeSpec* type_spec);
  ::p4::config::v1::P4DataTypeSpec* unsafe_arena_release_type_spec();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4StructTypeSpec.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::P4DataTypeSpec* type_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4StructTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4StructTypeSpec) */ {
 public:
  inline P4StructTypeSpec() : P4StructTypeSpec(nullptr) {}
  ~P4StructTypeSpec() override;
  explicit constexpr P4StructTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4StructTypeSpec(const P4StructTypeSpec& from);
  P4StructTypeSpec(P4StructTypeSpec&& from) noexcept
    : P4StructTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4StructTypeSpec& operator=(const P4StructTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4StructTypeSpec& operator=(P4StructTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4StructTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4StructTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4StructTypeSpec*>(
               &_P4StructTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(P4StructTypeSpec& a, P4StructTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4StructTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4StructTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4StructTypeSpec* New() const final {
    return new P4StructTypeSpec();
  }

  P4StructTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4StructTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4StructTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4StructTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4StructTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4StructTypeSpec";
  }
  protected:
  explicit P4StructTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4StructTypeSpec_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kAnnotationsFieldNumber = 2,
    kAnnotationLocationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
  };
  // repeated .p4.config.v1.P4StructTypeSpec.Member members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4StructTypeSpec_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4StructTypeSpec_Member >*
      mutable_members();
  private:
  const ::p4::config::v1::P4StructTypeSpec_Member& _internal_members(int index) const;
  ::p4::config::v1::P4StructTypeSpec_Member* _internal_add_members();
  public:
  const ::p4::config::v1::P4StructTypeSpec_Member& members(int index) const;
  ::p4::config::v1::P4StructTypeSpec_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4StructTypeSpec_Member >&
      members() const;

  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4StructTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4StructTypeSpec_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderTypeSpec_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderTypeSpec.Member) */ {
 public:
  inline P4HeaderTypeSpec_Member() : P4HeaderTypeSpec_Member(nullptr) {}
  ~P4HeaderTypeSpec_Member() override;
  explicit constexpr P4HeaderTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderTypeSpec_Member(const P4HeaderTypeSpec_Member& from);
  P4HeaderTypeSpec_Member(P4HeaderTypeSpec_Member&& from) noexcept
    : P4HeaderTypeSpec_Member() {
    *this = ::std::move(from);
  }

  inline P4HeaderTypeSpec_Member& operator=(const P4HeaderTypeSpec_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderTypeSpec_Member& operator=(P4HeaderTypeSpec_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderTypeSpec_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderTypeSpec_Member* internal_default_instance() {
    return reinterpret_cast<const P4HeaderTypeSpec_Member*>(
               &_P4HeaderTypeSpec_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(P4HeaderTypeSpec_Member& a, P4HeaderTypeSpec_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderTypeSpec_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderTypeSpec_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderTypeSpec_Member* New() const final {
    return new P4HeaderTypeSpec_Member();
  }

  P4HeaderTypeSpec_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderTypeSpec_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderTypeSpec_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderTypeSpec_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderTypeSpec_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderTypeSpec.Member";
  }
  protected:
  explicit P4HeaderTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeSpecFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.P4BitstringLikeTypeSpec type_spec = 2;
  bool has_type_spec() const;
  private:
  bool _internal_has_type_spec() const;
  public:
  void clear_type_spec();
  const ::p4::config::v1::P4BitstringLikeTypeSpec& type_spec() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4BitstringLikeTypeSpec* release_type_spec();
  ::p4::config::v1::P4BitstringLikeTypeSpec* mutable_type_spec();
  void set_allocated_type_spec(::p4::config::v1::P4BitstringLikeTypeSpec* type_spec);
  private:
  const ::p4::config::v1::P4BitstringLikeTypeSpec& _internal_type_spec() const;
  ::p4::config::v1::P4BitstringLikeTypeSpec* _internal_mutable_type_spec();
  public:
  void unsafe_arena_set_allocated_type_spec(
      ::p4::config::v1::P4BitstringLikeTypeSpec* type_spec);
  ::p4::config::v1::P4BitstringLikeTypeSpec* unsafe_arena_release_type_spec();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderTypeSpec.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::P4BitstringLikeTypeSpec* type_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderTypeSpec) */ {
 public:
  inline P4HeaderTypeSpec() : P4HeaderTypeSpec(nullptr) {}
  ~P4HeaderTypeSpec() override;
  explicit constexpr P4HeaderTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderTypeSpec(const P4HeaderTypeSpec& from);
  P4HeaderTypeSpec(P4HeaderTypeSpec&& from) noexcept
    : P4HeaderTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4HeaderTypeSpec& operator=(const P4HeaderTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderTypeSpec& operator=(P4HeaderTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4HeaderTypeSpec*>(
               &_P4HeaderTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(P4HeaderTypeSpec& a, P4HeaderTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderTypeSpec* New() const final {
    return new P4HeaderTypeSpec();
  }

  P4HeaderTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderTypeSpec";
  }
  protected:
  explicit P4HeaderTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4HeaderTypeSpec_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kAnnotationsFieldNumber = 2,
    kAnnotationLocationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
  };
  // repeated .p4.config.v1.P4HeaderTypeSpec.Member members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4HeaderTypeSpec_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderTypeSpec_Member >*
      mutable_members();
  private:
  const ::p4::config::v1::P4HeaderTypeSpec_Member& _internal_members(int index) const;
  ::p4::config::v1::P4HeaderTypeSpec_Member* _internal_add_members();
  public:
  const ::p4::config::v1::P4HeaderTypeSpec_Member& members(int index) const;
  ::p4::config::v1::P4HeaderTypeSpec_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderTypeSpec_Member >&
      members() const;

  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderTypeSpec_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderUnionTypeSpec_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderUnionTypeSpec.Member) */ {
 public:
  inline P4HeaderUnionTypeSpec_Member() : P4HeaderUnionTypeSpec_Member(nullptr) {}
  ~P4HeaderUnionTypeSpec_Member() override;
  explicit constexpr P4HeaderUnionTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderUnionTypeSpec_Member(const P4HeaderUnionTypeSpec_Member& from);
  P4HeaderUnionTypeSpec_Member(P4HeaderUnionTypeSpec_Member&& from) noexcept
    : P4HeaderUnionTypeSpec_Member() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnionTypeSpec_Member& operator=(const P4HeaderUnionTypeSpec_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderUnionTypeSpec_Member& operator=(P4HeaderUnionTypeSpec_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderUnionTypeSpec_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderUnionTypeSpec_Member* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnionTypeSpec_Member*>(
               &_P4HeaderUnionTypeSpec_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(P4HeaderUnionTypeSpec_Member& a, P4HeaderUnionTypeSpec_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderUnionTypeSpec_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderUnionTypeSpec_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnionTypeSpec_Member* New() const final {
    return new P4HeaderUnionTypeSpec_Member();
  }

  P4HeaderUnionTypeSpec_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnionTypeSpec_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderUnionTypeSpec_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderUnionTypeSpec_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnionTypeSpec_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderUnionTypeSpec.Member";
  }
  protected:
  explicit P4HeaderUnionTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.P4NamedType header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::p4::config::v1::P4NamedType& header() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_header();
  ::p4::config::v1::P4NamedType* mutable_header();
  void set_allocated_header(::p4::config::v1::P4NamedType* header);
  private:
  const ::p4::config::v1::P4NamedType& _internal_header() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::p4::config::v1::P4NamedType* header);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderUnionTypeSpec.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::P4NamedType* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderUnionTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderUnionTypeSpec) */ {
 public:
  inline P4HeaderUnionTypeSpec() : P4HeaderUnionTypeSpec(nullptr) {}
  ~P4HeaderUnionTypeSpec() override;
  explicit constexpr P4HeaderUnionTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderUnionTypeSpec(const P4HeaderUnionTypeSpec& from);
  P4HeaderUnionTypeSpec(P4HeaderUnionTypeSpec&& from) noexcept
    : P4HeaderUnionTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnionTypeSpec& operator=(const P4HeaderUnionTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderUnionTypeSpec& operator=(P4HeaderUnionTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderUnionTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderUnionTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnionTypeSpec*>(
               &_P4HeaderUnionTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(P4HeaderUnionTypeSpec& a, P4HeaderUnionTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderUnionTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderUnionTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnionTypeSpec* New() const final {
    return new P4HeaderUnionTypeSpec();
  }

  P4HeaderUnionTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnionTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderUnionTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderUnionTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnionTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderUnionTypeSpec";
  }
  protected:
  explicit P4HeaderUnionTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4HeaderUnionTypeSpec_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kAnnotationsFieldNumber = 2,
    kAnnotationLocationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
  };
  // repeated .p4.config.v1.P4HeaderUnionTypeSpec.Member members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4HeaderUnionTypeSpec_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >*
      mutable_members();
  private:
  const ::p4::config::v1::P4HeaderUnionTypeSpec_Member& _internal_members(int index) const;
  ::p4::config::v1::P4HeaderUnionTypeSpec_Member* _internal_add_members();
  public:
  const ::p4::config::v1::P4HeaderUnionTypeSpec_Member& members(int index) const;
  ::p4::config::v1::P4HeaderUnionTypeSpec_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >&
      members() const;

  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.SourceLocation annotation_locations = 3;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderUnionTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderUnionTypeSpec_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderStackTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderStackTypeSpec) */ {
 public:
  inline P4HeaderStackTypeSpec() : P4HeaderStackTypeSpec(nullptr) {}
  ~P4HeaderStackTypeSpec() override;
  explicit constexpr P4HeaderStackTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderStackTypeSpec(const P4HeaderStackTypeSpec& from);
  P4HeaderStackTypeSpec(P4HeaderStackTypeSpec&& from) noexcept
    : P4HeaderStackTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4HeaderStackTypeSpec& operator=(const P4HeaderStackTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderStackTypeSpec& operator=(P4HeaderStackTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderStackTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderStackTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4HeaderStackTypeSpec*>(
               &_P4HeaderStackTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(P4HeaderStackTypeSpec& a, P4HeaderStackTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderStackTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderStackTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderStackTypeSpec* New() const final {
    return new P4HeaderStackTypeSpec();
  }

  P4HeaderStackTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderStackTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderStackTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderStackTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderStackTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderStackTypeSpec";
  }
  protected:
  explicit P4HeaderStackTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .p4.config.v1.P4NamedType header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::p4::config::v1::P4NamedType& header() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_header();
  ::p4::config::v1::P4NamedType* mutable_header();
  void set_allocated_header(::p4::config::v1::P4NamedType* header);
  private:
  const ::p4::config::v1::P4NamedType& _internal_header() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::p4::config::v1::P4NamedType* header);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_header();

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderStackTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::P4NamedType* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4HeaderUnionStackTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4HeaderUnionStackTypeSpec) */ {
 public:
  inline P4HeaderUnionStackTypeSpec() : P4HeaderUnionStackTypeSpec(nullptr) {}
  ~P4HeaderUnionStackTypeSpec() override;
  explicit constexpr P4HeaderUnionStackTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4HeaderUnionStackTypeSpec(const P4HeaderUnionStackTypeSpec& from);
  P4HeaderUnionStackTypeSpec(P4HeaderUnionStackTypeSpec&& from) noexcept
    : P4HeaderUnionStackTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnionStackTypeSpec& operator=(const P4HeaderUnionStackTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4HeaderUnionStackTypeSpec& operator=(P4HeaderUnionStackTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4HeaderUnionStackTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4HeaderUnionStackTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnionStackTypeSpec*>(
               &_P4HeaderUnionStackTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(P4HeaderUnionStackTypeSpec& a, P4HeaderUnionStackTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4HeaderUnionStackTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4HeaderUnionStackTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnionStackTypeSpec* New() const final {
    return new P4HeaderUnionStackTypeSpec();
  }

  P4HeaderUnionStackTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnionStackTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4HeaderUnionStackTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4HeaderUnionStackTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnionStackTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4HeaderUnionStackTypeSpec";
  }
  protected:
  explicit P4HeaderUnionStackTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderUnionFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .p4.config.v1.P4NamedType header_union = 1;
  bool has_header_union() const;
  private:
  bool _internal_has_header_union() const;
  public:
  void clear_header_union();
  const ::p4::config::v1::P4NamedType& header_union() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NamedType* release_header_union();
  ::p4::config::v1::P4NamedType* mutable_header_union();
  void set_allocated_header_union(::p4::config::v1::P4NamedType* header_union);
  private:
  const ::p4::config::v1::P4NamedType& _internal_header_union() const;
  ::p4::config::v1::P4NamedType* _internal_mutable_header_union();
  public:
  void unsafe_arena_set_allocated_header_union(
      ::p4::config::v1::P4NamedType* header_union);
  ::p4::config::v1::P4NamedType* unsafe_arena_release_header_union();

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4HeaderUnionStackTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::p4::config::v1::P4NamedType* header_union_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {}
  ~KeyValuePair() override;
  explicit constexpr KeyValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return new KeyValuePair();
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValuePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyValuePair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .p4.config.v1.Expression value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::p4::config::v1::Expression& value() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::Expression* release_value();
  ::p4::config::v1::Expression* mutable_value();
  void set_allocated_value(::p4::config::v1::Expression* value);
  private:
  const ::p4::config::v1::Expression& _internal_value() const;
  ::p4::config::v1::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::p4::config::v1::Expression* value);
  ::p4::config::v1::Expression* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:p4.config.v1.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::p4::config::v1::Expression* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePairList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.KeyValuePairList) */ {
 public:
  inline KeyValuePairList() : KeyValuePairList(nullptr) {}
  ~KeyValuePairList() override;
  explicit constexpr KeyValuePairList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValuePairList(const KeyValuePairList& from);
  KeyValuePairList(KeyValuePairList&& from) noexcept
    : KeyValuePairList() {
    *this = ::std::move(from);
  }

  inline KeyValuePairList& operator=(const KeyValuePairList& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePairList& operator=(KeyValuePairList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValuePairList& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePairList* internal_default_instance() {
    return reinterpret_cast<const KeyValuePairList*>(
               &_KeyValuePairList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(KeyValuePairList& a, KeyValuePairList& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePairList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePairList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePairList* New() const final {
    return new KeyValuePairList();
  }

  KeyValuePairList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePairList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValuePairList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyValuePairList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePairList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.KeyValuePairList";
  }
  protected:
  explicit KeyValuePairList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvPairsFieldNumber = 1,
  };
  // repeated .p4.config.v1.KeyValuePair kv_pairs = 1;
  int kv_pairs_size() const;
  private:
  int _internal_kv_pairs_size() const;
  public:
  void clear_kv_pairs();
  ::p4::config::v1::KeyValuePair* mutable_kv_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::KeyValuePair >*
      mutable_kv_pairs();
  private:
  const ::p4::config::v1::KeyValuePair& _internal_kv_pairs(int index) const;
  ::p4::config::v1::KeyValuePair* _internal_add_kv_pairs();
  public:
  const ::p4::config::v1::KeyValuePair& kv_pairs(int index) const;
  ::p4::config::v1::KeyValuePair* add_kv_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::KeyValuePair >&
      kv_pairs() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.KeyValuePairList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::KeyValuePair > kv_pairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class Expression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.Expression) */ {
 public:
  inline Expression() : Expression(nullptr) {}
  ~Expression() override;
  explicit constexpr Expression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression(const Expression& from);
  Expression(Expression&& from) noexcept
    : Expression() {
    *this = ::std::move(from);
  }

  inline Expression& operator=(const Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression& operator=(Expression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kInt64Value = 2,
    kBoolValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Expression* internal_default_instance() {
    return reinterpret_cast<const Expression*>(
               &_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Expression& a, Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression* New() const final {
    return new Expression();
  }

  Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expression& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.Expression";
  }
  protected:
  explicit Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kBoolValueFieldNumber = 3,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 3;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.Expression)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int64_value();
  void set_has_bool_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    bool bool_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class ExpressionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.ExpressionList) */ {
 public:
  inline ExpressionList() : ExpressionList(nullptr) {}
  ~ExpressionList() override;
  explicit constexpr ExpressionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpressionList(const ExpressionList& from);
  ExpressionList(ExpressionList&& from) noexcept
    : ExpressionList() {
    *this = ::std::move(from);
  }

  inline ExpressionList& operator=(const ExpressionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpressionList& operator=(ExpressionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpressionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpressionList* internal_default_instance() {
    return reinterpret_cast<const ExpressionList*>(
               &_ExpressionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ExpressionList& a, ExpressionList& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpressionList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpressionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpressionList* New() const final {
    return new ExpressionList();
  }

  ExpressionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpressionList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpressionList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpressionList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.ExpressionList";
  }
  protected:
  explicit ExpressionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 1,
  };
  // repeated .p4.config.v1.Expression expressions = 1;
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;
  public:
  void clear_expressions();
  ::p4::config::v1::Expression* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Expression >*
      mutable_expressions();
  private:
  const ::p4::config::v1::Expression& _internal_expressions(int index) const;
  ::p4::config::v1::Expression* _internal_add_expressions();
  public:
  const ::p4::config::v1::Expression& expressions(int index) const;
  ::p4::config::v1::Expression* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Expression >&
      expressions() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.ExpressionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Expression > expressions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class StructuredAnnotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.StructuredAnnotation) */ {
 public:
  inline StructuredAnnotation() : StructuredAnnotation(nullptr) {}
  ~StructuredAnnotation() override;
  explicit constexpr StructuredAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredAnnotation(const StructuredAnnotation& from);
  StructuredAnnotation(StructuredAnnotation&& from) noexcept
    : StructuredAnnotation() {
    *this = ::std::move(from);
  }

  inline StructuredAnnotation& operator=(const StructuredAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredAnnotation& operator=(StructuredAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructuredAnnotation& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kExpressionList = 2,
    kKvPairList = 3,
    BODY_NOT_SET = 0,
  };

  static inline const StructuredAnnotation* internal_default_instance() {
    return reinterpret_cast<const StructuredAnnotation*>(
               &_StructuredAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(StructuredAnnotation& a, StructuredAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(StructuredAnnotation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructuredAnnotation* New() const final {
    return new StructuredAnnotation();
  }

  StructuredAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructuredAnnotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructuredAnnotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StructuredAnnotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructuredAnnotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.StructuredAnnotation";
  }
  protected:
  explicit StructuredAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSourceLocationFieldNumber = 4,
    kExpressionListFieldNumber = 2,
    kKvPairListFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .p4.config.v1.SourceLocation source_location = 4;
  bool has_source_location() const;
  private:
  bool _internal_has_source_location() const;
  public:
  void clear_source_location();
  const ::p4::config::v1::SourceLocation& source_location() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::SourceLocation* release_source_location();
  ::p4::config::v1::SourceLocation* mutable_source_location();
  void set_allocated_source_location(::p4::config::v1::SourceLocation* source_location);
  private:
  const ::p4::config::v1::SourceLocation& _internal_source_location() const;
  ::p4::config::v1::SourceLocation* _internal_mutable_source_location();
  public:
  void unsafe_arena_set_allocated_source_location(
      ::p4::config::v1::SourceLocation* source_location);
  ::p4::config::v1::SourceLocation* unsafe_arena_release_source_location();

  // .p4.config.v1.ExpressionList expression_list = 2;
  bool has_expression_list() const;
  private:
  bool _internal_has_expression_list() const;
  public:
  void clear_expression_list();
  const ::p4::config::v1::ExpressionList& expression_list() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::ExpressionList* release_expression_list();
  ::p4::config::v1::ExpressionList* mutable_expression_list();
  void set_allocated_expression_list(::p4::config::v1::ExpressionList* expression_list);
  private:
  const ::p4::config::v1::ExpressionList& _internal_expression_list() const;
  ::p4::config::v1::ExpressionList* _internal_mutable_expression_list();
  public:
  void unsafe_arena_set_allocated_expression_list(
      ::p4::config::v1::ExpressionList* expression_list);
  ::p4::config::v1::ExpressionList* unsafe_arena_release_expression_list();

  // .p4.config.v1.KeyValuePairList kv_pair_list = 3;
  bool has_kv_pair_list() const;
  private:
  bool _internal_has_kv_pair_list() const;
  public:
  void clear_kv_pair_list();
  const ::p4::config::v1::KeyValuePairList& kv_pair_list() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::KeyValuePairList* release_kv_pair_list();
  ::p4::config::v1::KeyValuePairList* mutable_kv_pair_list();
  void set_allocated_kv_pair_list(::p4::config::v1::KeyValuePairList* kv_pair_list);
  private:
  const ::p4::config::v1::KeyValuePairList& _internal_kv_pair_list() const;
  ::p4::config::v1::KeyValuePairList* _internal_mutable_kv_pair_list();
  public:
  void unsafe_arena_set_allocated_kv_pair_list(
      ::p4::config::v1::KeyValuePairList* kv_pair_list);
  ::p4::config::v1::KeyValuePairList* unsafe_arena_release_kv_pair_list();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.StructuredAnnotation)
 private:
  class _Internal;
  void set_has_expression_list();
  void set_has_kv_pair_list();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::p4::config::v1::SourceLocation* source_location_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::p4::config::v1::ExpressionList* expression_list_;
    ::p4::config::v1::KeyValuePairList* kv_pair_list_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class SourceLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.SourceLocation) */ {
 public:
  inline SourceLocation() : SourceLocation(nullptr) {}
  ~SourceLocation() override;
  explicit constexpr SourceLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceLocation(const SourceLocation& from);
  SourceLocation(SourceLocation&& from) noexcept
    : SourceLocation() {
    *this = ::std::move(from);
  }

  inline SourceLocation& operator=(const SourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceLocation& operator=(SourceLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceLocation* internal_default_instance() {
    return reinterpret_cast<const SourceLocation*>(
               &_SourceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SourceLocation& a, SourceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceLocation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceLocation* New() const final {
    return new SourceLocation();
  }

  SourceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SourceLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.SourceLocation";
  }
  protected:
  explicit SourceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kLineFieldNumber = 2,
    kColumnFieldNumber = 3,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // int32 line = 2;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 column = 3;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::int32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.SourceLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  ::PROTOBUF_NAMESPACE_ID::int32 column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4EnumTypeSpec_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4EnumTypeSpec.Member) */ {
 public:
  inline P4EnumTypeSpec_Member() : P4EnumTypeSpec_Member(nullptr) {}
  ~P4EnumTypeSpec_Member() override;
  explicit constexpr P4EnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4EnumTypeSpec_Member(const P4EnumTypeSpec_Member& from);
  P4EnumTypeSpec_Member(P4EnumTypeSpec_Member&& from) noexcept
    : P4EnumTypeSpec_Member() {
    *this = ::std::move(from);
  }

  inline P4EnumTypeSpec_Member& operator=(const P4EnumTypeSpec_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4EnumTypeSpec_Member& operator=(P4EnumTypeSpec_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4EnumTypeSpec_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4EnumTypeSpec_Member* internal_default_instance() {
    return reinterpret_cast<const P4EnumTypeSpec_Member*>(
               &_P4EnumTypeSpec_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(P4EnumTypeSpec_Member& a, P4EnumTypeSpec_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(P4EnumTypeSpec_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4EnumTypeSpec_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4EnumTypeSpec_Member* New() const final {
    return new P4EnumTypeSpec_Member();
  }

  P4EnumTypeSpec_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4EnumTypeSpec_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4EnumTypeSpec_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4EnumTypeSpec_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4EnumTypeSpec_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4EnumTypeSpec.Member";
  }
  protected:
  explicit P4EnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kStructuredAnnotationsFieldNumber = 3,
    kAnnotationLocationsFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4EnumTypeSpec.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4EnumTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4EnumTypeSpec) */ {
 public:
  inline P4EnumTypeSpec() : P4EnumTypeSpec(nullptr) {}
  ~P4EnumTypeSpec() override;
  explicit constexpr P4EnumTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4EnumTypeSpec(const P4EnumTypeSpec& from);
  P4EnumTypeSpec(P4EnumTypeSpec&& from) noexcept
    : P4EnumTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4EnumTypeSpec& operator=(const P4EnumTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4EnumTypeSpec& operator=(P4EnumTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4EnumTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4EnumTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4EnumTypeSpec*>(
               &_P4EnumTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(P4EnumTypeSpec& a, P4EnumTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4EnumTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4EnumTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4EnumTypeSpec* New() const final {
    return new P4EnumTypeSpec();
  }

  P4EnumTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4EnumTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4EnumTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4EnumTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4EnumTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4EnumTypeSpec";
  }
  protected:
  explicit P4EnumTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4EnumTypeSpec_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kAnnotationsFieldNumber = 2,
    kStructuredAnnotationsFieldNumber = 3,
    kAnnotationLocationsFieldNumber = 4,
  };
  // repeated .p4.config.v1.P4EnumTypeSpec.Member members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4EnumTypeSpec_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4EnumTypeSpec_Member >*
      mutable_members();
  private:
  const ::p4::config::v1::P4EnumTypeSpec_Member& _internal_members(int index) const;
  ::p4::config::v1::P4EnumTypeSpec_Member* _internal_add_members();
  public:
  const ::p4::config::v1::P4EnumTypeSpec_Member& members(int index) const;
  ::p4::config::v1::P4EnumTypeSpec_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4EnumTypeSpec_Member >&
      members() const;

  // repeated string annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 4;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4EnumTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4EnumTypeSpec_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4SerializableEnumTypeSpec_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4SerializableEnumTypeSpec.Member) */ {
 public:
  inline P4SerializableEnumTypeSpec_Member() : P4SerializableEnumTypeSpec_Member(nullptr) {}
  ~P4SerializableEnumTypeSpec_Member() override;
  explicit constexpr P4SerializableEnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4SerializableEnumTypeSpec_Member(const P4SerializableEnumTypeSpec_Member& from);
  P4SerializableEnumTypeSpec_Member(P4SerializableEnumTypeSpec_Member&& from) noexcept
    : P4SerializableEnumTypeSpec_Member() {
    *this = ::std::move(from);
  }

  inline P4SerializableEnumTypeSpec_Member& operator=(const P4SerializableEnumTypeSpec_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4SerializableEnumTypeSpec_Member& operator=(P4SerializableEnumTypeSpec_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4SerializableEnumTypeSpec_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4SerializableEnumTypeSpec_Member* internal_default_instance() {
    return reinterpret_cast<const P4SerializableEnumTypeSpec_Member*>(
               &_P4SerializableEnumTypeSpec_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(P4SerializableEnumTypeSpec_Member& a, P4SerializableEnumTypeSpec_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(P4SerializableEnumTypeSpec_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4SerializableEnumTypeSpec_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4SerializableEnumTypeSpec_Member* New() const final {
    return new P4SerializableEnumTypeSpec_Member();
  }

  P4SerializableEnumTypeSpec_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4SerializableEnumTypeSpec_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4SerializableEnumTypeSpec_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4SerializableEnumTypeSpec_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4SerializableEnumTypeSpec_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4SerializableEnumTypeSpec.Member";
  }
  protected:
  explicit P4SerializableEnumTypeSpec_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
    kAnnotationLocationsFieldNumber = 5,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4SerializableEnumTypeSpec.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4SerializableEnumTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4SerializableEnumTypeSpec) */ {
 public:
  inline P4SerializableEnumTypeSpec() : P4SerializableEnumTypeSpec(nullptr) {}
  ~P4SerializableEnumTypeSpec() override;
  explicit constexpr P4SerializableEnumTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4SerializableEnumTypeSpec(const P4SerializableEnumTypeSpec& from);
  P4SerializableEnumTypeSpec(P4SerializableEnumTypeSpec&& from) noexcept
    : P4SerializableEnumTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4SerializableEnumTypeSpec& operator=(const P4SerializableEnumTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4SerializableEnumTypeSpec& operator=(P4SerializableEnumTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4SerializableEnumTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4SerializableEnumTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4SerializableEnumTypeSpec*>(
               &_P4SerializableEnumTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(P4SerializableEnumTypeSpec& a, P4SerializableEnumTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4SerializableEnumTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4SerializableEnumTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4SerializableEnumTypeSpec* New() const final {
    return new P4SerializableEnumTypeSpec();
  }

  P4SerializableEnumTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4SerializableEnumTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4SerializableEnumTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4SerializableEnumTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4SerializableEnumTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4SerializableEnumTypeSpec";
  }
  protected:
  explicit P4SerializableEnumTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4SerializableEnumTypeSpec_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
    kAnnotationLocationsFieldNumber = 5,
    kUnderlyingTypeFieldNumber = 1,
  };
  // repeated .p4.config.v1.P4SerializableEnumTypeSpec.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::p4::config::v1::P4SerializableEnumTypeSpec_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >*
      mutable_members();
  private:
  const ::p4::config::v1::P4SerializableEnumTypeSpec_Member& _internal_members(int index) const;
  ::p4::config::v1::P4SerializableEnumTypeSpec_Member* _internal_add_members();
  public:
  const ::p4::config::v1::P4SerializableEnumTypeSpec_Member& members(int index) const;
  ::p4::config::v1::P4SerializableEnumTypeSpec_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >&
      members() const;

  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // .p4.config.v1.P4BitTypeSpec underlying_type = 1;
  bool has_underlying_type() const;
  private:
  bool _internal_has_underlying_type() const;
  public:
  void clear_underlying_type();
  const ::p4::config::v1::P4BitTypeSpec& underlying_type() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4BitTypeSpec* release_underlying_type();
  ::p4::config::v1::P4BitTypeSpec* mutable_underlying_type();
  void set_allocated_underlying_type(::p4::config::v1::P4BitTypeSpec* underlying_type);
  private:
  const ::p4::config::v1::P4BitTypeSpec& _internal_underlying_type() const;
  ::p4::config::v1::P4BitTypeSpec* _internal_mutable_underlying_type();
  public:
  void unsafe_arena_set_allocated_underlying_type(
      ::p4::config::v1::P4BitTypeSpec* underlying_type);
  ::p4::config::v1::P4BitTypeSpec* unsafe_arena_release_underlying_type();

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4SerializableEnumTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4SerializableEnumTypeSpec_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  ::p4::config::v1::P4BitTypeSpec* underlying_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4ErrorTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4ErrorTypeSpec) */ {
 public:
  inline P4ErrorTypeSpec() : P4ErrorTypeSpec(nullptr) {}
  ~P4ErrorTypeSpec() override;
  explicit constexpr P4ErrorTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4ErrorTypeSpec(const P4ErrorTypeSpec& from);
  P4ErrorTypeSpec(P4ErrorTypeSpec&& from) noexcept
    : P4ErrorTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4ErrorTypeSpec& operator=(const P4ErrorTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4ErrorTypeSpec& operator=(P4ErrorTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4ErrorTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4ErrorTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4ErrorTypeSpec*>(
               &_P4ErrorTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(P4ErrorTypeSpec& a, P4ErrorTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4ErrorTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4ErrorTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4ErrorTypeSpec* New() const final {
    return new P4ErrorTypeSpec();
  }

  P4ErrorTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4ErrorTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4ErrorTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4ErrorTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4ErrorTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4ErrorTypeSpec";
  }
  protected:
  explicit P4ErrorTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated string members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4ErrorTypeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4NewTypeTranslation_SdnString final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:p4.config.v1.P4NewTypeTranslation.SdnString) */ {
 public:
  inline P4NewTypeTranslation_SdnString() : P4NewTypeTranslation_SdnString(nullptr) {}
  explicit constexpr P4NewTypeTranslation_SdnString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4NewTypeTranslation_SdnString(const P4NewTypeTranslation_SdnString& from);
  P4NewTypeTranslation_SdnString(P4NewTypeTranslation_SdnString&& from) noexcept
    : P4NewTypeTranslation_SdnString() {
    *this = ::std::move(from);
  }

  inline P4NewTypeTranslation_SdnString& operator=(const P4NewTypeTranslation_SdnString& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4NewTypeTranslation_SdnString& operator=(P4NewTypeTranslation_SdnString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4NewTypeTranslation_SdnString& default_instance() {
    return *internal_default_instance();
  }
  static inline const P4NewTypeTranslation_SdnString* internal_default_instance() {
    return reinterpret_cast<const P4NewTypeTranslation_SdnString*>(
               &_P4NewTypeTranslation_SdnString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(P4NewTypeTranslation_SdnString& a, P4NewTypeTranslation_SdnString& b) {
    a.Swap(&b);
  }
  inline void Swap(P4NewTypeTranslation_SdnString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4NewTypeTranslation_SdnString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4NewTypeTranslation_SdnString* New() const final {
    return new P4NewTypeTranslation_SdnString();
  }

  P4NewTypeTranslation_SdnString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4NewTypeTranslation_SdnString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const P4NewTypeTranslation_SdnString& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const P4NewTypeTranslation_SdnString& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4NewTypeTranslation.SdnString";
  }
  protected:
  explicit P4NewTypeTranslation_SdnString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:p4.config.v1.P4NewTypeTranslation.SdnString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4NewTypeTranslation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4NewTypeTranslation) */ {
 public:
  inline P4NewTypeTranslation() : P4NewTypeTranslation(nullptr) {}
  ~P4NewTypeTranslation() override;
  explicit constexpr P4NewTypeTranslation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4NewTypeTranslation(const P4NewTypeTranslation& from);
  P4NewTypeTranslation(P4NewTypeTranslation&& from) noexcept
    : P4NewTypeTranslation() {
    *this = ::std::move(from);
  }

  inline P4NewTypeTranslation& operator=(const P4NewTypeTranslation& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4NewTypeTranslation& operator=(P4NewTypeTranslation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4NewTypeTranslation& default_instance() {
    return *internal_default_instance();
  }
  enum SdnTypeCase {
    kSdnBitwidth = 2,
    kSdnString = 3,
    SDN_TYPE_NOT_SET = 0,
  };

  static inline const P4NewTypeTranslation* internal_default_instance() {
    return reinterpret_cast<const P4NewTypeTranslation*>(
               &_P4NewTypeTranslation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(P4NewTypeTranslation& a, P4NewTypeTranslation& b) {
    a.Swap(&b);
  }
  inline void Swap(P4NewTypeTranslation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4NewTypeTranslation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4NewTypeTranslation* New() const final {
    return new P4NewTypeTranslation();
  }

  P4NewTypeTranslation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4NewTypeTranslation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4NewTypeTranslation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4NewTypeTranslation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4NewTypeTranslation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4NewTypeTranslation";
  }
  protected:
  explicit P4NewTypeTranslation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef P4NewTypeTranslation_SdnString SdnString;

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kSdnBitwidthFieldNumber = 2,
    kSdnStringFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_MUST_USE_RESULT std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // int32 sdn_bitwidth = 2;
  bool has_sdn_bitwidth() const;
  private:
  bool _internal_has_sdn_bitwidth() const;
  public:
  void clear_sdn_bitwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 sdn_bitwidth() const;
  void set_sdn_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sdn_bitwidth() const;
  void _internal_set_sdn_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .p4.config.v1.P4NewTypeTranslation.SdnString sdn_string = 3;
  bool has_sdn_string() const;
  private:
  bool _internal_has_sdn_string() const;
  public:
  void clear_sdn_string();
  const ::p4::config::v1::P4NewTypeTranslation_SdnString& sdn_string() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NewTypeTranslation_SdnString* release_sdn_string();
  ::p4::config::v1::P4NewTypeTranslation_SdnString* mutable_sdn_string();
  void set_allocated_sdn_string(::p4::config::v1::P4NewTypeTranslation_SdnString* sdn_string);
  private:
  const ::p4::config::v1::P4NewTypeTranslation_SdnString& _internal_sdn_string() const;
  ::p4::config::v1::P4NewTypeTranslation_SdnString* _internal_mutable_sdn_string();
  public:
  void unsafe_arena_set_allocated_sdn_string(
      ::p4::config::v1::P4NewTypeTranslation_SdnString* sdn_string);
  ::p4::config::v1::P4NewTypeTranslation_SdnString* unsafe_arena_release_sdn_string();

  void clear_sdn_type();
  SdnTypeCase sdn_type_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.P4NewTypeTranslation)
 private:
  class _Internal;
  void set_has_sdn_bitwidth();
  void set_has_sdn_string();

  inline bool has_sdn_type() const;
  inline void clear_has_sdn_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  union SdnTypeUnion {
    constexpr SdnTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 sdn_bitwidth_;
    ::p4::config::v1::P4NewTypeTranslation_SdnString* sdn_string_;
  } sdn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// -------------------------------------------------------------------

class P4NewTypeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p4.config.v1.P4NewTypeSpec) */ {
 public:
  inline P4NewTypeSpec() : P4NewTypeSpec(nullptr) {}
  ~P4NewTypeSpec() override;
  explicit constexpr P4NewTypeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P4NewTypeSpec(const P4NewTypeSpec& from);
  P4NewTypeSpec(P4NewTypeSpec&& from) noexcept
    : P4NewTypeSpec() {
    *this = ::std::move(from);
  }

  inline P4NewTypeSpec& operator=(const P4NewTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline P4NewTypeSpec& operator=(P4NewTypeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P4NewTypeSpec& default_instance() {
    return *internal_default_instance();
  }
  enum RepresentationCase {
    kOriginalType = 1,
    kTranslatedType = 2,
    REPRESENTATION_NOT_SET = 0,
  };

  static inline const P4NewTypeSpec* internal_default_instance() {
    return reinterpret_cast<const P4NewTypeSpec*>(
               &_P4NewTypeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(P4NewTypeSpec& a, P4NewTypeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(P4NewTypeSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P4NewTypeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P4NewTypeSpec* New() const final {
    return new P4NewTypeSpec();
  }

  P4NewTypeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P4NewTypeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P4NewTypeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const P4NewTypeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4NewTypeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p4.config.v1.P4NewTypeSpec";
  }
  protected:
  explicit P4NewTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kStructuredAnnotationsFieldNumber = 4,
    kAnnotationLocationsFieldNumber = 5,
    kOriginalTypeFieldNumber = 1,
    kTranslatedTypeFieldNumber = 2,
  };
  // repeated string annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  const std::string& annotations(int index) const;
  std::string* mutable_annotations(int index);
  void set_annotations(int index, const std::string& value);
  void set_annotations(int index, std::string&& value);
  void set_annotations(int index, const char* value);
  void set_annotations(int index, const char* value, size_t size);
  std::string* add_annotations();
  void add_annotations(const std::string& value);
  void add_annotations(std::string&& value);
  void add_annotations(const char* value);
  void add_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotations();
  private:
  const std::string& _internal_annotations(int index) const;
  std::string* _internal_add_annotations();
  public:

  // repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
  int structured_annotations_size() const;
  private:
  int _internal_structured_annotations_size() const;
  public:
  void clear_structured_annotations();
  ::p4::config::v1::StructuredAnnotation* mutable_structured_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
      mutable_structured_annotations();
  private:
  const ::p4::config::v1::StructuredAnnotation& _internal_structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* _internal_add_structured_annotations();
  public:
  const ::p4::config::v1::StructuredAnnotation& structured_annotations(int index) const;
  ::p4::config::v1::StructuredAnnotation* add_structured_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
      structured_annotations() const;

  // repeated .p4.config.v1.SourceLocation annotation_locations = 5;
  int annotation_locations_size() const;
  private:
  int _internal_annotation_locations_size() const;
  public:
  void clear_annotation_locations();
  ::p4::config::v1::SourceLocation* mutable_annotation_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
      mutable_annotation_locations();
  private:
  const ::p4::config::v1::SourceLocation& _internal_annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* _internal_add_annotation_locations();
  public:
  const ::p4::config::v1::SourceLocation& annotation_locations(int index) const;
  ::p4::config::v1::SourceLocation* add_annotation_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
      annotation_locations() const;

  // .p4.config.v1.P4DataTypeSpec original_type = 1;
  bool has_original_type() const;
  private:
  bool _internal_has_original_type() const;
  public:
  void clear_original_type();
  const ::p4::config::v1::P4DataTypeSpec& original_type() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4DataTypeSpec* release_original_type();
  ::p4::config::v1::P4DataTypeSpec* mutable_original_type();
  void set_allocated_original_type(::p4::config::v1::P4DataTypeSpec* original_type);
  private:
  const ::p4::config::v1::P4DataTypeSpec& _internal_original_type() const;
  ::p4::config::v1::P4DataTypeSpec* _internal_mutable_original_type();
  public:
  void unsafe_arena_set_allocated_original_type(
      ::p4::config::v1::P4DataTypeSpec* original_type);
  ::p4::config::v1::P4DataTypeSpec* unsafe_arena_release_original_type();

  // .p4.config.v1.P4NewTypeTranslation translated_type = 2;
  bool has_translated_type() const;
  private:
  bool _internal_has_translated_type() const;
  public:
  void clear_translated_type();
  const ::p4::config::v1::P4NewTypeTranslation& translated_type() const;
  PROTOBUF_MUST_USE_RESULT ::p4::config::v1::P4NewTypeTranslation* release_translated_type();
  ::p4::config::v1::P4NewTypeTranslation* mutable_translated_type();
  void set_allocated_translated_type(::p4::config::v1::P4NewTypeTranslation* translated_type);
  private:
  const ::p4::config::v1::P4NewTypeTranslation& _internal_translated_type() const;
  ::p4::config::v1::P4NewTypeTranslation* _internal_mutable_translated_type();
  public:
  void unsafe_arena_set_allocated_translated_type(
      ::p4::config::v1::P4NewTypeTranslation* translated_type);
  ::p4::config::v1::P4NewTypeTranslation* unsafe_arena_release_translated_type();

  void clear_representation();
  RepresentationCase representation_case() const;
  // @@protoc_insertion_point(class_scope:p4.config.v1.P4NewTypeSpec)
 private:
  class _Internal;
  void set_has_original_type();
  void set_has_translated_type();

  inline bool has_representation() const;
  inline void clear_has_representation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation > structured_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation > annotation_locations_;
  union RepresentationUnion {
    constexpr RepresentationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::p4::config::v1::P4DataTypeSpec* original_type_;
    ::p4::config::v1::P4NewTypeTranslation* translated_type_;
  } representation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_p4_2fconfig_2fv1_2fp4types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// P4TypeInfo

// map<string, .p4.config.v1.P4StructTypeSpec> structs = 1;
inline int P4TypeInfo::_internal_structs_size() const {
  return structs_.size();
}
inline int P4TypeInfo::structs_size() const {
  return _internal_structs_size();
}
inline void P4TypeInfo::clear_structs() {
  structs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >&
P4TypeInfo::_internal_structs() const {
  return structs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >&
P4TypeInfo::structs() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.structs)
  return _internal_structs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >*
P4TypeInfo::_internal_mutable_structs() {
  return structs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4StructTypeSpec >*
P4TypeInfo::mutable_structs() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.structs)
  return _internal_mutable_structs();
}

// map<string, .p4.config.v1.P4HeaderTypeSpec> headers = 2;
inline int P4TypeInfo::_internal_headers_size() const {
  return headers_.size();
}
inline int P4TypeInfo::headers_size() const {
  return _internal_headers_size();
}
inline void P4TypeInfo::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >&
P4TypeInfo::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >&
P4TypeInfo::headers() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >*
P4TypeInfo::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderTypeSpec >*
P4TypeInfo::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.headers)
  return _internal_mutable_headers();
}

// map<string, .p4.config.v1.P4HeaderUnionTypeSpec> header_unions = 3;
inline int P4TypeInfo::_internal_header_unions_size() const {
  return header_unions_.size();
}
inline int P4TypeInfo::header_unions_size() const {
  return _internal_header_unions_size();
}
inline void P4TypeInfo::clear_header_unions() {
  header_unions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >&
P4TypeInfo::_internal_header_unions() const {
  return header_unions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >&
P4TypeInfo::header_unions() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.header_unions)
  return _internal_header_unions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >*
P4TypeInfo::_internal_mutable_header_unions() {
  return header_unions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4HeaderUnionTypeSpec >*
P4TypeInfo::mutable_header_unions() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.header_unions)
  return _internal_mutable_header_unions();
}

// map<string, .p4.config.v1.P4EnumTypeSpec> enums = 4;
inline int P4TypeInfo::_internal_enums_size() const {
  return enums_.size();
}
inline int P4TypeInfo::enums_size() const {
  return _internal_enums_size();
}
inline void P4TypeInfo::clear_enums() {
  enums_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >&
P4TypeInfo::_internal_enums() const {
  return enums_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >&
P4TypeInfo::enums() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.enums)
  return _internal_enums();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >*
P4TypeInfo::_internal_mutable_enums() {
  return enums_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4EnumTypeSpec >*
P4TypeInfo::mutable_enums() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.enums)
  return _internal_mutable_enums();
}

// .p4.config.v1.P4ErrorTypeSpec error = 5;
inline bool P4TypeInfo::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool P4TypeInfo::has_error() const {
  return _internal_has_error();
}
inline void P4TypeInfo::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::p4::config::v1::P4ErrorTypeSpec& P4TypeInfo::_internal_error() const {
  const ::p4::config::v1::P4ErrorTypeSpec* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4ErrorTypeSpec&>(
      ::p4::config::v1::_P4ErrorTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4ErrorTypeSpec& P4TypeInfo::error() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4TypeInfo.error)
  return _internal_error();
}
inline void P4TypeInfo::unsafe_arena_set_allocated_error(
    ::p4::config::v1::P4ErrorTypeSpec* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4TypeInfo.error)
}
inline ::p4::config::v1::P4ErrorTypeSpec* P4TypeInfo::release_error() {
  
  ::p4::config::v1::P4ErrorTypeSpec* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4ErrorTypeSpec* P4TypeInfo::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4TypeInfo.error)
  
  ::p4::config::v1::P4ErrorTypeSpec* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4ErrorTypeSpec* P4TypeInfo::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4ErrorTypeSpec>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::p4::config::v1::P4ErrorTypeSpec* P4TypeInfo::mutable_error() {
  ::p4::config::v1::P4ErrorTypeSpec* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4TypeInfo.error)
  return _msg;
}
inline void P4TypeInfo::set_allocated_error(::p4::config::v1::P4ErrorTypeSpec* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4ErrorTypeSpec>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4TypeInfo.error)
}

// map<string, .p4.config.v1.P4SerializableEnumTypeSpec> serializable_enums = 6;
inline int P4TypeInfo::_internal_serializable_enums_size() const {
  return serializable_enums_.size();
}
inline int P4TypeInfo::serializable_enums_size() const {
  return _internal_serializable_enums_size();
}
inline void P4TypeInfo::clear_serializable_enums() {
  serializable_enums_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >&
P4TypeInfo::_internal_serializable_enums() const {
  return serializable_enums_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >&
P4TypeInfo::serializable_enums() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.serializable_enums)
  return _internal_serializable_enums();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >*
P4TypeInfo::_internal_mutable_serializable_enums() {
  return serializable_enums_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4SerializableEnumTypeSpec >*
P4TypeInfo::mutable_serializable_enums() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.serializable_enums)
  return _internal_mutable_serializable_enums();
}

// map<string, .p4.config.v1.P4NewTypeSpec> new_types = 7;
inline int P4TypeInfo::_internal_new_types_size() const {
  return new_types_.size();
}
inline int P4TypeInfo::new_types_size() const {
  return _internal_new_types_size();
}
inline void P4TypeInfo::clear_new_types() {
  new_types_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >&
P4TypeInfo::_internal_new_types() const {
  return new_types_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >&
P4TypeInfo::new_types() const {
  // @@protoc_insertion_point(field_map:p4.config.v1.P4TypeInfo.new_types)
  return _internal_new_types();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >*
P4TypeInfo::_internal_mutable_new_types() {
  return new_types_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::p4::config::v1::P4NewTypeSpec >*
P4TypeInfo::mutable_new_types() {
  // @@protoc_insertion_point(field_mutable_map:p4.config.v1.P4TypeInfo.new_types)
  return _internal_mutable_new_types();
}

// -------------------------------------------------------------------

// P4DataTypeSpec

// .p4.config.v1.P4BitstringLikeTypeSpec bitstring = 1;
inline bool P4DataTypeSpec::_internal_has_bitstring() const {
  return type_spec_case() == kBitstring;
}
inline bool P4DataTypeSpec::has_bitstring() const {
  return _internal_has_bitstring();
}
inline void P4DataTypeSpec::set_has_bitstring() {
  _oneof_case_[0] = kBitstring;
}
inline void P4DataTypeSpec::clear_bitstring() {
  if (_internal_has_bitstring()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.bitstring_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4DataTypeSpec::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.bitstring)
  if (_internal_has_bitstring()) {
    clear_has_type_spec();
      ::p4::config::v1::P4BitstringLikeTypeSpec* temp = type_spec_.bitstring_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.bitstring_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4BitstringLikeTypeSpec& P4DataTypeSpec::_internal_bitstring() const {
  return _internal_has_bitstring()
      ? *type_spec_.bitstring_
      : reinterpret_cast< ::p4::config::v1::P4BitstringLikeTypeSpec&>(::p4::config::v1::_P4BitstringLikeTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4BitstringLikeTypeSpec& P4DataTypeSpec::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.bitstring)
  return _internal_bitstring();
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4DataTypeSpec::unsafe_arena_release_bitstring() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.bitstring)
  if (_internal_has_bitstring()) {
    clear_has_type_spec();
    ::p4::config::v1::P4BitstringLikeTypeSpec* temp = type_spec_.bitstring_;
    type_spec_.bitstring_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_bitstring(::p4::config::v1::P4BitstringLikeTypeSpec* bitstring) {
  clear_type_spec();
  if (bitstring) {
    set_has_bitstring();
    type_spec_.bitstring_ = bitstring;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.bitstring)
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4DataTypeSpec::_internal_mutable_bitstring() {
  if (!_internal_has_bitstring()) {
    clear_type_spec();
    set_has_bitstring();
    type_spec_.bitstring_ = CreateMaybeMessage< ::p4::config::v1::P4BitstringLikeTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.bitstring_;
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4DataTypeSpec::mutable_bitstring() {
  ::p4::config::v1::P4BitstringLikeTypeSpec* _msg = _internal_mutable_bitstring();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.bitstring)
  return _msg;
}

// .p4.config.v1.P4BoolType bool = 2;
inline bool P4DataTypeSpec::_internal_has_bool_() const {
  return type_spec_case() == kBool;
}
inline bool P4DataTypeSpec::has_bool_() const {
  return _internal_has_bool_();
}
inline void P4DataTypeSpec::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void P4DataTypeSpec::clear_bool_() {
  if (_internal_has_bool_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.bool__;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4BoolType* P4DataTypeSpec::release_bool_() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.bool)
  if (_internal_has_bool_()) {
    clear_has_type_spec();
      ::p4::config::v1::P4BoolType* temp = type_spec_.bool__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4BoolType& P4DataTypeSpec::_internal_bool_() const {
  return _internal_has_bool_()
      ? *type_spec_.bool__
      : reinterpret_cast< ::p4::config::v1::P4BoolType&>(::p4::config::v1::_P4BoolType_default_instance_);
}
inline const ::p4::config::v1::P4BoolType& P4DataTypeSpec::bool_() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.bool)
  return _internal_bool_();
}
inline ::p4::config::v1::P4BoolType* P4DataTypeSpec::unsafe_arena_release_bool_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.bool)
  if (_internal_has_bool_()) {
    clear_has_type_spec();
    ::p4::config::v1::P4BoolType* temp = type_spec_.bool__;
    type_spec_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_bool_(::p4::config::v1::P4BoolType* bool_) {
  clear_type_spec();
  if (bool_) {
    set_has_bool_();
    type_spec_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.bool)
}
inline ::p4::config::v1::P4BoolType* P4DataTypeSpec::_internal_mutable_bool_() {
  if (!_internal_has_bool_()) {
    clear_type_spec();
    set_has_bool_();
    type_spec_.bool__ = CreateMaybeMessage< ::p4::config::v1::P4BoolType >(GetArenaForAllocation());
  }
  return type_spec_.bool__;
}
inline ::p4::config::v1::P4BoolType* P4DataTypeSpec::mutable_bool_() {
  ::p4::config::v1::P4BoolType* _msg = _internal_mutable_bool_();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.bool)
  return _msg;
}

// .p4.config.v1.P4TupleTypeSpec tuple = 3;
inline bool P4DataTypeSpec::_internal_has_tuple() const {
  return type_spec_case() == kTuple;
}
inline bool P4DataTypeSpec::has_tuple() const {
  return _internal_has_tuple();
}
inline void P4DataTypeSpec::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
inline void P4DataTypeSpec::clear_tuple() {
  if (_internal_has_tuple()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.tuple_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4TupleTypeSpec* P4DataTypeSpec::release_tuple() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.tuple)
  if (_internal_has_tuple()) {
    clear_has_type_spec();
      ::p4::config::v1::P4TupleTypeSpec* temp = type_spec_.tuple_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4TupleTypeSpec& P4DataTypeSpec::_internal_tuple() const {
  return _internal_has_tuple()
      ? *type_spec_.tuple_
      : reinterpret_cast< ::p4::config::v1::P4TupleTypeSpec&>(::p4::config::v1::_P4TupleTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4TupleTypeSpec& P4DataTypeSpec::tuple() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.tuple)
  return _internal_tuple();
}
inline ::p4::config::v1::P4TupleTypeSpec* P4DataTypeSpec::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.tuple)
  if (_internal_has_tuple()) {
    clear_has_type_spec();
    ::p4::config::v1::P4TupleTypeSpec* temp = type_spec_.tuple_;
    type_spec_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_tuple(::p4::config::v1::P4TupleTypeSpec* tuple) {
  clear_type_spec();
  if (tuple) {
    set_has_tuple();
    type_spec_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.tuple)
}
inline ::p4::config::v1::P4TupleTypeSpec* P4DataTypeSpec::_internal_mutable_tuple() {
  if (!_internal_has_tuple()) {
    clear_type_spec();
    set_has_tuple();
    type_spec_.tuple_ = CreateMaybeMessage< ::p4::config::v1::P4TupleTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.tuple_;
}
inline ::p4::config::v1::P4TupleTypeSpec* P4DataTypeSpec::mutable_tuple() {
  ::p4::config::v1::P4TupleTypeSpec* _msg = _internal_mutable_tuple();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.tuple)
  return _msg;
}

// .p4.config.v1.P4NamedType struct = 4;
inline bool P4DataTypeSpec::_internal_has_struct_() const {
  return type_spec_case() == kStruct;
}
inline bool P4DataTypeSpec::has_struct_() const {
  return _internal_has_struct_();
}
inline void P4DataTypeSpec::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void P4DataTypeSpec::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.struct__;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_struct_() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.struct)
  if (_internal_has_struct_()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_struct_() const {
  return _internal_has_struct_()
      ? *type_spec_.struct__
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::struct_() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.struct)
  return _internal_struct_();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.struct)
  if (_internal_has_struct_()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.struct__;
    type_spec_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_struct_(::p4::config::v1::P4NamedType* struct_) {
  clear_type_spec();
  if (struct_) {
    set_has_struct_();
    type_spec_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.struct)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_type_spec();
    set_has_struct_();
    type_spec_.struct__ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.struct__;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_struct_() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.struct)
  return _msg;
}

// .p4.config.v1.P4NamedType header = 5;
inline bool P4DataTypeSpec::_internal_has_header() const {
  return type_spec_case() == kHeader;
}
inline bool P4DataTypeSpec::has_header() const {
  return _internal_has_header();
}
inline void P4DataTypeSpec::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void P4DataTypeSpec::clear_header() {
  if (_internal_has_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.header_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_header() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.header)
  if (_internal_has_header()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_header() const {
  return _internal_has_header()
      ? *type_spec_.header_
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::header() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.header)
  return _internal_header();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.header)
  if (_internal_has_header()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.header_;
    type_spec_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_header(::p4::config::v1::P4NamedType* header) {
  clear_type_spec();
  if (header) {
    set_has_header();
    type_spec_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.header)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_type_spec();
    set_has_header();
    type_spec_.header_ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.header_;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_header() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.header)
  return _msg;
}

// .p4.config.v1.P4NamedType header_union = 6;
inline bool P4DataTypeSpec::_internal_has_header_union() const {
  return type_spec_case() == kHeaderUnion;
}
inline bool P4DataTypeSpec::has_header_union() const {
  return _internal_has_header_union();
}
inline void P4DataTypeSpec::set_has_header_union() {
  _oneof_case_[0] = kHeaderUnion;
}
inline void P4DataTypeSpec::clear_header_union() {
  if (_internal_has_header_union()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.header_union_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_header_union() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.header_union)
  if (_internal_has_header_union()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.header_union_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.header_union_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_header_union() const {
  return _internal_has_header_union()
      ? *type_spec_.header_union_
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::header_union() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.header_union)
  return _internal_header_union();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_header_union() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.header_union)
  if (_internal_has_header_union()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.header_union_;
    type_spec_.header_union_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_header_union(::p4::config::v1::P4NamedType* header_union) {
  clear_type_spec();
  if (header_union) {
    set_has_header_union();
    type_spec_.header_union_ = header_union;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.header_union)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_header_union() {
  if (!_internal_has_header_union()) {
    clear_type_spec();
    set_has_header_union();
    type_spec_.header_union_ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.header_union_;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_header_union() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_header_union();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.header_union)
  return _msg;
}

// .p4.config.v1.P4HeaderStackTypeSpec header_stack = 7;
inline bool P4DataTypeSpec::_internal_has_header_stack() const {
  return type_spec_case() == kHeaderStack;
}
inline bool P4DataTypeSpec::has_header_stack() const {
  return _internal_has_header_stack();
}
inline void P4DataTypeSpec::set_has_header_stack() {
  _oneof_case_[0] = kHeaderStack;
}
inline void P4DataTypeSpec::clear_header_stack() {
  if (_internal_has_header_stack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.header_stack_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4HeaderStackTypeSpec* P4DataTypeSpec::release_header_stack() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.header_stack)
  if (_internal_has_header_stack()) {
    clear_has_type_spec();
      ::p4::config::v1::P4HeaderStackTypeSpec* temp = type_spec_.header_stack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.header_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4HeaderStackTypeSpec& P4DataTypeSpec::_internal_header_stack() const {
  return _internal_has_header_stack()
      ? *type_spec_.header_stack_
      : reinterpret_cast< ::p4::config::v1::P4HeaderStackTypeSpec&>(::p4::config::v1::_P4HeaderStackTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4HeaderStackTypeSpec& P4DataTypeSpec::header_stack() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.header_stack)
  return _internal_header_stack();
}
inline ::p4::config::v1::P4HeaderStackTypeSpec* P4DataTypeSpec::unsafe_arena_release_header_stack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.header_stack)
  if (_internal_has_header_stack()) {
    clear_has_type_spec();
    ::p4::config::v1::P4HeaderStackTypeSpec* temp = type_spec_.header_stack_;
    type_spec_.header_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_header_stack(::p4::config::v1::P4HeaderStackTypeSpec* header_stack) {
  clear_type_spec();
  if (header_stack) {
    set_has_header_stack();
    type_spec_.header_stack_ = header_stack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.header_stack)
}
inline ::p4::config::v1::P4HeaderStackTypeSpec* P4DataTypeSpec::_internal_mutable_header_stack() {
  if (!_internal_has_header_stack()) {
    clear_type_spec();
    set_has_header_stack();
    type_spec_.header_stack_ = CreateMaybeMessage< ::p4::config::v1::P4HeaderStackTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.header_stack_;
}
inline ::p4::config::v1::P4HeaderStackTypeSpec* P4DataTypeSpec::mutable_header_stack() {
  ::p4::config::v1::P4HeaderStackTypeSpec* _msg = _internal_mutable_header_stack();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.header_stack)
  return _msg;
}

// .p4.config.v1.P4HeaderUnionStackTypeSpec header_union_stack = 8;
inline bool P4DataTypeSpec::_internal_has_header_union_stack() const {
  return type_spec_case() == kHeaderUnionStack;
}
inline bool P4DataTypeSpec::has_header_union_stack() const {
  return _internal_has_header_union_stack();
}
inline void P4DataTypeSpec::set_has_header_union_stack() {
  _oneof_case_[0] = kHeaderUnionStack;
}
inline void P4DataTypeSpec::clear_header_union_stack() {
  if (_internal_has_header_union_stack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.header_union_stack_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4HeaderUnionStackTypeSpec* P4DataTypeSpec::release_header_union_stack() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.header_union_stack)
  if (_internal_has_header_union_stack()) {
    clear_has_type_spec();
      ::p4::config::v1::P4HeaderUnionStackTypeSpec* temp = type_spec_.header_union_stack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.header_union_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4HeaderUnionStackTypeSpec& P4DataTypeSpec::_internal_header_union_stack() const {
  return _internal_has_header_union_stack()
      ? *type_spec_.header_union_stack_
      : reinterpret_cast< ::p4::config::v1::P4HeaderUnionStackTypeSpec&>(::p4::config::v1::_P4HeaderUnionStackTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4HeaderUnionStackTypeSpec& P4DataTypeSpec::header_union_stack() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.header_union_stack)
  return _internal_header_union_stack();
}
inline ::p4::config::v1::P4HeaderUnionStackTypeSpec* P4DataTypeSpec::unsafe_arena_release_header_union_stack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.header_union_stack)
  if (_internal_has_header_union_stack()) {
    clear_has_type_spec();
    ::p4::config::v1::P4HeaderUnionStackTypeSpec* temp = type_spec_.header_union_stack_;
    type_spec_.header_union_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_header_union_stack(::p4::config::v1::P4HeaderUnionStackTypeSpec* header_union_stack) {
  clear_type_spec();
  if (header_union_stack) {
    set_has_header_union_stack();
    type_spec_.header_union_stack_ = header_union_stack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.header_union_stack)
}
inline ::p4::config::v1::P4HeaderUnionStackTypeSpec* P4DataTypeSpec::_internal_mutable_header_union_stack() {
  if (!_internal_has_header_union_stack()) {
    clear_type_spec();
    set_has_header_union_stack();
    type_spec_.header_union_stack_ = CreateMaybeMessage< ::p4::config::v1::P4HeaderUnionStackTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.header_union_stack_;
}
inline ::p4::config::v1::P4HeaderUnionStackTypeSpec* P4DataTypeSpec::mutable_header_union_stack() {
  ::p4::config::v1::P4HeaderUnionStackTypeSpec* _msg = _internal_mutable_header_union_stack();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.header_union_stack)
  return _msg;
}

// .p4.config.v1.P4NamedType enum = 9;
inline bool P4DataTypeSpec::_internal_has_enum_() const {
  return type_spec_case() == kEnum;
}
inline bool P4DataTypeSpec::has_enum_() const {
  return _internal_has_enum_();
}
inline void P4DataTypeSpec::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void P4DataTypeSpec::clear_enum_() {
  if (_internal_has_enum_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.enum__;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_enum_() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.enum)
  if (_internal_has_enum_()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.enum__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_enum_() const {
  return _internal_has_enum_()
      ? *type_spec_.enum__
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::enum_() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.enum)
  return _internal_enum_();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.enum)
  if (_internal_has_enum_()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.enum__;
    type_spec_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_enum_(::p4::config::v1::P4NamedType* enum_) {
  clear_type_spec();
  if (enum_) {
    set_has_enum_();
    type_spec_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.enum)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_type_spec();
    set_has_enum_();
    type_spec_.enum__ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.enum__;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_enum_() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.enum)
  return _msg;
}

// .p4.config.v1.P4ErrorType error = 10;
inline bool P4DataTypeSpec::_internal_has_error() const {
  return type_spec_case() == kError;
}
inline bool P4DataTypeSpec::has_error() const {
  return _internal_has_error();
}
inline void P4DataTypeSpec::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void P4DataTypeSpec::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.error_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4ErrorType* P4DataTypeSpec::release_error() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.error)
  if (_internal_has_error()) {
    clear_has_type_spec();
      ::p4::config::v1::P4ErrorType* temp = type_spec_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4ErrorType& P4DataTypeSpec::_internal_error() const {
  return _internal_has_error()
      ? *type_spec_.error_
      : reinterpret_cast< ::p4::config::v1::P4ErrorType&>(::p4::config::v1::_P4ErrorType_default_instance_);
}
inline const ::p4::config::v1::P4ErrorType& P4DataTypeSpec::error() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.error)
  return _internal_error();
}
inline ::p4::config::v1::P4ErrorType* P4DataTypeSpec::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.error)
  if (_internal_has_error()) {
    clear_has_type_spec();
    ::p4::config::v1::P4ErrorType* temp = type_spec_.error_;
    type_spec_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_error(::p4::config::v1::P4ErrorType* error) {
  clear_type_spec();
  if (error) {
    set_has_error();
    type_spec_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.error)
}
inline ::p4::config::v1::P4ErrorType* P4DataTypeSpec::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_type_spec();
    set_has_error();
    type_spec_.error_ = CreateMaybeMessage< ::p4::config::v1::P4ErrorType >(GetArenaForAllocation());
  }
  return type_spec_.error_;
}
inline ::p4::config::v1::P4ErrorType* P4DataTypeSpec::mutable_error() {
  ::p4::config::v1::P4ErrorType* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.error)
  return _msg;
}

// .p4.config.v1.P4NamedType serializable_enum = 11;
inline bool P4DataTypeSpec::_internal_has_serializable_enum() const {
  return type_spec_case() == kSerializableEnum;
}
inline bool P4DataTypeSpec::has_serializable_enum() const {
  return _internal_has_serializable_enum();
}
inline void P4DataTypeSpec::set_has_serializable_enum() {
  _oneof_case_[0] = kSerializableEnum;
}
inline void P4DataTypeSpec::clear_serializable_enum() {
  if (_internal_has_serializable_enum()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.serializable_enum_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_serializable_enum() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.serializable_enum)
  if (_internal_has_serializable_enum()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.serializable_enum_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.serializable_enum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_serializable_enum() const {
  return _internal_has_serializable_enum()
      ? *type_spec_.serializable_enum_
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::serializable_enum() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.serializable_enum)
  return _internal_serializable_enum();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_serializable_enum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.serializable_enum)
  if (_internal_has_serializable_enum()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.serializable_enum_;
    type_spec_.serializable_enum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_serializable_enum(::p4::config::v1::P4NamedType* serializable_enum) {
  clear_type_spec();
  if (serializable_enum) {
    set_has_serializable_enum();
    type_spec_.serializable_enum_ = serializable_enum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.serializable_enum)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_serializable_enum() {
  if (!_internal_has_serializable_enum()) {
    clear_type_spec();
    set_has_serializable_enum();
    type_spec_.serializable_enum_ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.serializable_enum_;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_serializable_enum() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_serializable_enum();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.serializable_enum)
  return _msg;
}

// .p4.config.v1.P4NamedType new_type = 12;
inline bool P4DataTypeSpec::_internal_has_new_type() const {
  return type_spec_case() == kNewType;
}
inline bool P4DataTypeSpec::has_new_type() const {
  return _internal_has_new_type();
}
inline void P4DataTypeSpec::set_has_new_type() {
  _oneof_case_[0] = kNewType;
}
inline void P4DataTypeSpec::clear_new_type() {
  if (_internal_has_new_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.new_type_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::release_new_type() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4DataTypeSpec.new_type)
  if (_internal_has_new_type()) {
    clear_has_type_spec();
      ::p4::config::v1::P4NamedType* temp = type_spec_.new_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.new_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::_internal_new_type() const {
  return _internal_has_new_type()
      ? *type_spec_.new_type_
      : reinterpret_cast< ::p4::config::v1::P4NamedType&>(::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4DataTypeSpec::new_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4DataTypeSpec.new_type)
  return _internal_new_type();
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::unsafe_arena_release_new_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4DataTypeSpec.new_type)
  if (_internal_has_new_type()) {
    clear_has_type_spec();
    ::p4::config::v1::P4NamedType* temp = type_spec_.new_type_;
    type_spec_.new_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4DataTypeSpec::unsafe_arena_set_allocated_new_type(::p4::config::v1::P4NamedType* new_type) {
  clear_type_spec();
  if (new_type) {
    set_has_new_type();
    type_spec_.new_type_ = new_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4DataTypeSpec.new_type)
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::_internal_mutable_new_type() {
  if (!_internal_has_new_type()) {
    clear_type_spec();
    set_has_new_type();
    type_spec_.new_type_ = CreateMaybeMessage< ::p4::config::v1::P4NamedType >(GetArenaForAllocation());
  }
  return type_spec_.new_type_;
}
inline ::p4::config::v1::P4NamedType* P4DataTypeSpec::mutable_new_type() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_new_type();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4DataTypeSpec.new_type)
  return _msg;
}

inline bool P4DataTypeSpec::has_type_spec() const {
  return type_spec_case() != TYPE_SPEC_NOT_SET;
}
inline void P4DataTypeSpec::clear_has_type_spec() {
  _oneof_case_[0] = TYPE_SPEC_NOT_SET;
}
inline P4DataTypeSpec::TypeSpecCase P4DataTypeSpec::type_spec_case() const {
  return P4DataTypeSpec::TypeSpecCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// P4NamedType

// string name = 1;
inline void P4NamedType::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4NamedType::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NamedType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4NamedType::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4NamedType.name)
}
inline std::string* P4NamedType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NamedType.name)
  return _s;
}
inline const std::string& P4NamedType::_internal_name() const {
  return name_.Get();
}
inline void P4NamedType::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4NamedType::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4NamedType::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4NamedType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4NamedType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4NamedType.name)
}

// -------------------------------------------------------------------

// P4BoolType

// -------------------------------------------------------------------

// P4ErrorType

// -------------------------------------------------------------------

// P4BitstringLikeTypeSpec

// .p4.config.v1.P4BitTypeSpec bit = 1;
inline bool P4BitstringLikeTypeSpec::_internal_has_bit() const {
  return type_spec_case() == kBit;
}
inline bool P4BitstringLikeTypeSpec::has_bit() const {
  return _internal_has_bit();
}
inline void P4BitstringLikeTypeSpec::set_has_bit() {
  _oneof_case_[0] = kBit;
}
inline void P4BitstringLikeTypeSpec::clear_bit() {
  if (_internal_has_bit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.bit_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4BitTypeSpec* P4BitstringLikeTypeSpec::release_bit() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4BitstringLikeTypeSpec.bit)
  if (_internal_has_bit()) {
    clear_has_type_spec();
      ::p4::config::v1::P4BitTypeSpec* temp = type_spec_.bit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.bit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4BitTypeSpec& P4BitstringLikeTypeSpec::_internal_bit() const {
  return _internal_has_bit()
      ? *type_spec_.bit_
      : reinterpret_cast< ::p4::config::v1::P4BitTypeSpec&>(::p4::config::v1::_P4BitTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4BitTypeSpec& P4BitstringLikeTypeSpec::bit() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.bit)
  return _internal_bit();
}
inline ::p4::config::v1::P4BitTypeSpec* P4BitstringLikeTypeSpec::unsafe_arena_release_bit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4BitstringLikeTypeSpec.bit)
  if (_internal_has_bit()) {
    clear_has_type_spec();
    ::p4::config::v1::P4BitTypeSpec* temp = type_spec_.bit_;
    type_spec_.bit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4BitstringLikeTypeSpec::unsafe_arena_set_allocated_bit(::p4::config::v1::P4BitTypeSpec* bit) {
  clear_type_spec();
  if (bit) {
    set_has_bit();
    type_spec_.bit_ = bit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.bit)
}
inline ::p4::config::v1::P4BitTypeSpec* P4BitstringLikeTypeSpec::_internal_mutable_bit() {
  if (!_internal_has_bit()) {
    clear_type_spec();
    set_has_bit();
    type_spec_.bit_ = CreateMaybeMessage< ::p4::config::v1::P4BitTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.bit_;
}
inline ::p4::config::v1::P4BitTypeSpec* P4BitstringLikeTypeSpec::mutable_bit() {
  ::p4::config::v1::P4BitTypeSpec* _msg = _internal_mutable_bit();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.bit)
  return _msg;
}

// .p4.config.v1.P4IntTypeSpec int = 2;
inline bool P4BitstringLikeTypeSpec::_internal_has_int_() const {
  return type_spec_case() == kInt;
}
inline bool P4BitstringLikeTypeSpec::has_int_() const {
  return _internal_has_int_();
}
inline void P4BitstringLikeTypeSpec::set_has_int_() {
  _oneof_case_[0] = kInt;
}
inline void P4BitstringLikeTypeSpec::clear_int_() {
  if (_internal_has_int_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.int__;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4IntTypeSpec* P4BitstringLikeTypeSpec::release_int_() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4BitstringLikeTypeSpec.int)
  if (_internal_has_int_()) {
    clear_has_type_spec();
      ::p4::config::v1::P4IntTypeSpec* temp = type_spec_.int__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.int__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4IntTypeSpec& P4BitstringLikeTypeSpec::_internal_int_() const {
  return _internal_has_int_()
      ? *type_spec_.int__
      : reinterpret_cast< ::p4::config::v1::P4IntTypeSpec&>(::p4::config::v1::_P4IntTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4IntTypeSpec& P4BitstringLikeTypeSpec::int_() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.int)
  return _internal_int_();
}
inline ::p4::config::v1::P4IntTypeSpec* P4BitstringLikeTypeSpec::unsafe_arena_release_int_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4BitstringLikeTypeSpec.int)
  if (_internal_has_int_()) {
    clear_has_type_spec();
    ::p4::config::v1::P4IntTypeSpec* temp = type_spec_.int__;
    type_spec_.int__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4BitstringLikeTypeSpec::unsafe_arena_set_allocated_int_(::p4::config::v1::P4IntTypeSpec* int_) {
  clear_type_spec();
  if (int_) {
    set_has_int_();
    type_spec_.int__ = int_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.int)
}
inline ::p4::config::v1::P4IntTypeSpec* P4BitstringLikeTypeSpec::_internal_mutable_int_() {
  if (!_internal_has_int_()) {
    clear_type_spec();
    set_has_int_();
    type_spec_.int__ = CreateMaybeMessage< ::p4::config::v1::P4IntTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.int__;
}
inline ::p4::config::v1::P4IntTypeSpec* P4BitstringLikeTypeSpec::mutable_int_() {
  ::p4::config::v1::P4IntTypeSpec* _msg = _internal_mutable_int_();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.int)
  return _msg;
}

// .p4.config.v1.P4VarbitTypeSpec varbit = 3;
inline bool P4BitstringLikeTypeSpec::_internal_has_varbit() const {
  return type_spec_case() == kVarbit;
}
inline bool P4BitstringLikeTypeSpec::has_varbit() const {
  return _internal_has_varbit();
}
inline void P4BitstringLikeTypeSpec::set_has_varbit() {
  _oneof_case_[0] = kVarbit;
}
inline void P4BitstringLikeTypeSpec::clear_varbit() {
  if (_internal_has_varbit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_spec_.varbit_;
    }
    clear_has_type_spec();
  }
}
inline ::p4::config::v1::P4VarbitTypeSpec* P4BitstringLikeTypeSpec::release_varbit() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
  if (_internal_has_varbit()) {
    clear_has_type_spec();
      ::p4::config::v1::P4VarbitTypeSpec* temp = type_spec_.varbit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_spec_.varbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4VarbitTypeSpec& P4BitstringLikeTypeSpec::_internal_varbit() const {
  return _internal_has_varbit()
      ? *type_spec_.varbit_
      : reinterpret_cast< ::p4::config::v1::P4VarbitTypeSpec&>(::p4::config::v1::_P4VarbitTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4VarbitTypeSpec& P4BitstringLikeTypeSpec::varbit() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
  return _internal_varbit();
}
inline ::p4::config::v1::P4VarbitTypeSpec* P4BitstringLikeTypeSpec::unsafe_arena_release_varbit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
  if (_internal_has_varbit()) {
    clear_has_type_spec();
    ::p4::config::v1::P4VarbitTypeSpec* temp = type_spec_.varbit_;
    type_spec_.varbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4BitstringLikeTypeSpec::unsafe_arena_set_allocated_varbit(::p4::config::v1::P4VarbitTypeSpec* varbit) {
  clear_type_spec();
  if (varbit) {
    set_has_varbit();
    type_spec_.varbit_ = varbit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
}
inline ::p4::config::v1::P4VarbitTypeSpec* P4BitstringLikeTypeSpec::_internal_mutable_varbit() {
  if (!_internal_has_varbit()) {
    clear_type_spec();
    set_has_varbit();
    type_spec_.varbit_ = CreateMaybeMessage< ::p4::config::v1::P4VarbitTypeSpec >(GetArenaForAllocation());
  }
  return type_spec_.varbit_;
}
inline ::p4::config::v1::P4VarbitTypeSpec* P4BitstringLikeTypeSpec::mutable_varbit() {
  ::p4::config::v1::P4VarbitTypeSpec* _msg = _internal_mutable_varbit();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.varbit)
  return _msg;
}

// repeated string annotations = 4;
inline int P4BitstringLikeTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4BitstringLikeTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4BitstringLikeTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4BitstringLikeTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
  return _s;
}
inline const std::string& P4BitstringLikeTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4BitstringLikeTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4BitstringLikeTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4BitstringLikeTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline std::string* P4BitstringLikeTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4BitstringLikeTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline void P4BitstringLikeTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4BitstringLikeTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4BitstringLikeTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4BitstringLikeTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 5;
inline int P4BitstringLikeTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4BitstringLikeTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4BitstringLikeTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4BitstringLikeTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4BitstringLikeTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4BitstringLikeTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4BitstringLikeTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4BitstringLikeTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4BitstringLikeTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4BitstringLikeTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4BitstringLikeTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4BitstringLikeTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4BitstringLikeTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 6;
inline int P4BitstringLikeTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4BitstringLikeTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4BitstringLikeTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4BitstringLikeTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4BitstringLikeTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4BitstringLikeTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4BitstringLikeTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4BitstringLikeTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4BitstringLikeTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitstringLikeTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4BitstringLikeTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4BitstringLikeTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4BitstringLikeTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4BitstringLikeTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4BitstringLikeTypeSpec.structured_annotations)
  return structured_annotations_;
}

inline bool P4BitstringLikeTypeSpec::has_type_spec() const {
  return type_spec_case() != TYPE_SPEC_NOT_SET;
}
inline void P4BitstringLikeTypeSpec::clear_has_type_spec() {
  _oneof_case_[0] = TYPE_SPEC_NOT_SET;
}
inline P4BitstringLikeTypeSpec::TypeSpecCase P4BitstringLikeTypeSpec::type_spec_case() const {
  return P4BitstringLikeTypeSpec::TypeSpecCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// P4BitTypeSpec

// int32 bitwidth = 1;
inline void P4BitTypeSpec::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4BitTypeSpec::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4BitTypeSpec::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4BitTypeSpec.bitwidth)
  return _internal_bitwidth();
}
inline void P4BitTypeSpec::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void P4BitTypeSpec::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4BitTypeSpec.bitwidth)
}

// -------------------------------------------------------------------

// P4IntTypeSpec

// int32 bitwidth = 1;
inline void P4IntTypeSpec::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4IntTypeSpec::_internal_bitwidth() const {
  return bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4IntTypeSpec::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4IntTypeSpec.bitwidth)
  return _internal_bitwidth();
}
inline void P4IntTypeSpec::_internal_set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bitwidth_ = value;
}
inline void P4IntTypeSpec::set_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4IntTypeSpec.bitwidth)
}

// -------------------------------------------------------------------

// P4VarbitTypeSpec

// int32 max_bitwidth = 1;
inline void P4VarbitTypeSpec::clear_max_bitwidth() {
  max_bitwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4VarbitTypeSpec::_internal_max_bitwidth() const {
  return max_bitwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4VarbitTypeSpec::max_bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4VarbitTypeSpec.max_bitwidth)
  return _internal_max_bitwidth();
}
inline void P4VarbitTypeSpec::_internal_set_max_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_bitwidth_ = value;
}
inline void P4VarbitTypeSpec::set_max_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4VarbitTypeSpec.max_bitwidth)
}

// -------------------------------------------------------------------

// P4TupleTypeSpec

// repeated .p4.config.v1.P4DataTypeSpec members = 1;
inline int P4TupleTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4TupleTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4TupleTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4DataTypeSpec* P4TupleTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4TupleTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4DataTypeSpec >*
P4TupleTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4TupleTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4DataTypeSpec& P4TupleTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4DataTypeSpec& P4TupleTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4TupleTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4DataTypeSpec* P4TupleTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4DataTypeSpec* P4TupleTypeSpec::add_members() {
  ::p4::config::v1::P4DataTypeSpec* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4TupleTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4DataTypeSpec >&
P4TupleTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4TupleTypeSpec.members)
  return members_;
}

// -------------------------------------------------------------------

// P4StructTypeSpec_Member

// string name = 1;
inline void P4StructTypeSpec_Member::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4StructTypeSpec_Member::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.Member.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4StructTypeSpec_Member::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4StructTypeSpec.Member.name)
}
inline std::string* P4StructTypeSpec_Member::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.Member.name)
  return _s;
}
inline const std::string& P4StructTypeSpec_Member::_internal_name() const {
  return name_.Get();
}
inline void P4StructTypeSpec_Member::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4StructTypeSpec_Member::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4StructTypeSpec_Member::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4StructTypeSpec.Member.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4StructTypeSpec_Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4StructTypeSpec.Member.name)
}

// .p4.config.v1.P4DataTypeSpec type_spec = 2;
inline bool P4StructTypeSpec_Member::_internal_has_type_spec() const {
  return this != internal_default_instance() && type_spec_ != nullptr;
}
inline bool P4StructTypeSpec_Member::has_type_spec() const {
  return _internal_has_type_spec();
}
inline void P4StructTypeSpec_Member::clear_type_spec() {
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
}
inline const ::p4::config::v1::P4DataTypeSpec& P4StructTypeSpec_Member::_internal_type_spec() const {
  const ::p4::config::v1::P4DataTypeSpec* p = type_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4DataTypeSpec&>(
      ::p4::config::v1::_P4DataTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4DataTypeSpec& P4StructTypeSpec_Member::type_spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.Member.type_spec)
  return _internal_type_spec();
}
inline void P4StructTypeSpec_Member::unsafe_arena_set_allocated_type_spec(
    ::p4::config::v1::P4DataTypeSpec* type_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  type_spec_ = type_spec;
  if (type_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4StructTypeSpec.Member.type_spec)
}
inline ::p4::config::v1::P4DataTypeSpec* P4StructTypeSpec_Member::release_type_spec() {
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* P4StructTypeSpec_Member::unsafe_arena_release_type_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4StructTypeSpec.Member.type_spec)
  
  ::p4::config::v1::P4DataTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4DataTypeSpec* P4StructTypeSpec_Member::_internal_mutable_type_spec() {
  
  if (type_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4DataTypeSpec>(GetArenaForAllocation());
    type_spec_ = p;
  }
  return type_spec_;
}
inline ::p4::config::v1::P4DataTypeSpec* P4StructTypeSpec_Member::mutable_type_spec() {
  ::p4::config::v1::P4DataTypeSpec* _msg = _internal_mutable_type_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.Member.type_spec)
  return _msg;
}
inline void P4StructTypeSpec_Member::set_allocated_type_spec(::p4::config::v1::P4DataTypeSpec* type_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete type_spec_;
  }
  if (type_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4DataTypeSpec>::GetOwningArena(type_spec);
    if (message_arena != submessage_arena) {
      type_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec, submessage_arena);
    }
    
  } else {
    
  }
  type_spec_ = type_spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4StructTypeSpec.Member.type_spec)
}

// -------------------------------------------------------------------

// P4StructTypeSpec

// repeated .p4.config.v1.P4StructTypeSpec.Member members = 1;
inline int P4StructTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4StructTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4StructTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4StructTypeSpec_Member* P4StructTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4StructTypeSpec_Member >*
P4StructTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4StructTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4StructTypeSpec_Member& P4StructTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4StructTypeSpec_Member& P4StructTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4StructTypeSpec_Member* P4StructTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4StructTypeSpec_Member* P4StructTypeSpec::add_members() {
  ::p4::config::v1::P4StructTypeSpec_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4StructTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4StructTypeSpec_Member >&
P4StructTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4StructTypeSpec.members)
  return members_;
}

// repeated string annotations = 2;
inline int P4StructTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4StructTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4StructTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4StructTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4StructTypeSpec.annotations)
  return _s;
}
inline const std::string& P4StructTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4StructTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4StructTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4StructTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4StructTypeSpec.annotations)
}
inline std::string* P4StructTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4StructTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4StructTypeSpec.annotations)
}
inline void P4StructTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4StructTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4StructTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4StructTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4StructTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4StructTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 3;
inline int P4StructTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4StructTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4StructTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4StructTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4StructTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4StructTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4StructTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4StructTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4StructTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4StructTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4StructTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4StructTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4StructTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4StructTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4StructTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4StructTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4StructTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4StructTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4StructTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4StructTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4StructTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4StructTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4StructTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4StructTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4StructTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4StructTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4StructTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4StructTypeSpec.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4HeaderTypeSpec_Member

// string name = 1;
inline void P4HeaderTypeSpec_Member::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4HeaderTypeSpec_Member::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.Member.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4HeaderTypeSpec_Member::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderTypeSpec.Member.name)
}
inline std::string* P4HeaderTypeSpec_Member::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.Member.name)
  return _s;
}
inline const std::string& P4HeaderTypeSpec_Member::_internal_name() const {
  return name_.Get();
}
inline void P4HeaderTypeSpec_Member::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4HeaderTypeSpec_Member::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4HeaderTypeSpec_Member::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderTypeSpec.Member.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4HeaderTypeSpec_Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderTypeSpec.Member.name)
}

// .p4.config.v1.P4BitstringLikeTypeSpec type_spec = 2;
inline bool P4HeaderTypeSpec_Member::_internal_has_type_spec() const {
  return this != internal_default_instance() && type_spec_ != nullptr;
}
inline bool P4HeaderTypeSpec_Member::has_type_spec() const {
  return _internal_has_type_spec();
}
inline void P4HeaderTypeSpec_Member::clear_type_spec() {
  if (GetArenaForAllocation() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
}
inline const ::p4::config::v1::P4BitstringLikeTypeSpec& P4HeaderTypeSpec_Member::_internal_type_spec() const {
  const ::p4::config::v1::P4BitstringLikeTypeSpec* p = type_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4BitstringLikeTypeSpec&>(
      ::p4::config::v1::_P4BitstringLikeTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4BitstringLikeTypeSpec& P4HeaderTypeSpec_Member::type_spec() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.Member.type_spec)
  return _internal_type_spec();
}
inline void P4HeaderTypeSpec_Member::unsafe_arena_set_allocated_type_spec(
    ::p4::config::v1::P4BitstringLikeTypeSpec* type_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_spec_);
  }
  type_spec_ = type_spec;
  if (type_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4HeaderTypeSpec.Member.type_spec)
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4HeaderTypeSpec_Member::release_type_spec() {
  
  ::p4::config::v1::P4BitstringLikeTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4HeaderTypeSpec_Member::unsafe_arena_release_type_spec() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderTypeSpec.Member.type_spec)
  
  ::p4::config::v1::P4BitstringLikeTypeSpec* temp = type_spec_;
  type_spec_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4HeaderTypeSpec_Member::_internal_mutable_type_spec() {
  
  if (type_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4BitstringLikeTypeSpec>(GetArenaForAllocation());
    type_spec_ = p;
  }
  return type_spec_;
}
inline ::p4::config::v1::P4BitstringLikeTypeSpec* P4HeaderTypeSpec_Member::mutable_type_spec() {
  ::p4::config::v1::P4BitstringLikeTypeSpec* _msg = _internal_mutable_type_spec();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.Member.type_spec)
  return _msg;
}
inline void P4HeaderTypeSpec_Member::set_allocated_type_spec(::p4::config::v1::P4BitstringLikeTypeSpec* type_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete type_spec_;
  }
  if (type_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4BitstringLikeTypeSpec>::GetOwningArena(type_spec);
    if (message_arena != submessage_arena) {
      type_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec, submessage_arena);
    }
    
  } else {
    
  }
  type_spec_ = type_spec;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderTypeSpec.Member.type_spec)
}

// -------------------------------------------------------------------

// P4HeaderTypeSpec

// repeated .p4.config.v1.P4HeaderTypeSpec.Member members = 1;
inline int P4HeaderTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4HeaderTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4HeaderTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4HeaderTypeSpec_Member* P4HeaderTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderTypeSpec_Member >*
P4HeaderTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4HeaderTypeSpec_Member& P4HeaderTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4HeaderTypeSpec_Member& P4HeaderTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4HeaderTypeSpec_Member* P4HeaderTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4HeaderTypeSpec_Member* P4HeaderTypeSpec::add_members() {
  ::p4::config::v1::P4HeaderTypeSpec_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderTypeSpec_Member >&
P4HeaderTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderTypeSpec.members)
  return members_;
}

// repeated string annotations = 2;
inline int P4HeaderTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4HeaderTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4HeaderTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4HeaderTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4HeaderTypeSpec.annotations)
  return _s;
}
inline const std::string& P4HeaderTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4HeaderTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4HeaderTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4HeaderTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline std::string* P4HeaderTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4HeaderTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline void P4HeaderTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4HeaderTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4HeaderTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4HeaderTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 3;
inline int P4HeaderTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4HeaderTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4HeaderTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4HeaderTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4HeaderTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4HeaderTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4HeaderTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4HeaderTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4HeaderTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4HeaderTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4HeaderTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4HeaderTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4HeaderTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4HeaderTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4HeaderTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4HeaderTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4HeaderTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderTypeSpec.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4HeaderUnionTypeSpec_Member

// string name = 1;
inline void P4HeaderUnionTypeSpec_Member::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4HeaderUnionTypeSpec_Member::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.Member.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4HeaderUnionTypeSpec_Member::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderUnionTypeSpec.Member.name)
}
inline std::string* P4HeaderUnionTypeSpec_Member::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.Member.name)
  return _s;
}
inline const std::string& P4HeaderUnionTypeSpec_Member::_internal_name() const {
  return name_.Get();
}
inline void P4HeaderUnionTypeSpec_Member::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4HeaderUnionTypeSpec_Member::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4HeaderUnionTypeSpec_Member::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderUnionTypeSpec.Member.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4HeaderUnionTypeSpec_Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderUnionTypeSpec.Member.name)
}

// .p4.config.v1.P4NamedType header = 2;
inline bool P4HeaderUnionTypeSpec_Member::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool P4HeaderUnionTypeSpec_Member::has_header() const {
  return _internal_has_header();
}
inline void P4HeaderUnionTypeSpec_Member::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::p4::config::v1::P4NamedType& P4HeaderUnionTypeSpec_Member::_internal_header() const {
  const ::p4::config::v1::P4NamedType* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4HeaderUnionTypeSpec_Member::header() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.Member.header)
  return _internal_header();
}
inline void P4HeaderUnionTypeSpec_Member::unsafe_arena_set_allocated_header(
    ::p4::config::v1::P4NamedType* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4HeaderUnionTypeSpec.Member.header)
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionTypeSpec_Member::release_header() {
  
  ::p4::config::v1::P4NamedType* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionTypeSpec_Member::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderUnionTypeSpec.Member.header)
  
  ::p4::config::v1::P4NamedType* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionTypeSpec_Member::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionTypeSpec_Member::mutable_header() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.Member.header)
  return _msg;
}
inline void P4HeaderUnionTypeSpec_Member::set_allocated_header(::p4::config::v1::P4NamedType* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderUnionTypeSpec.Member.header)
}

// -------------------------------------------------------------------

// P4HeaderUnionTypeSpec

// repeated .p4.config.v1.P4HeaderUnionTypeSpec.Member members = 1;
inline int P4HeaderUnionTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4HeaderUnionTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4HeaderUnionTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4HeaderUnionTypeSpec_Member* P4HeaderUnionTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >*
P4HeaderUnionTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderUnionTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4HeaderUnionTypeSpec_Member& P4HeaderUnionTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4HeaderUnionTypeSpec_Member& P4HeaderUnionTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4HeaderUnionTypeSpec_Member* P4HeaderUnionTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4HeaderUnionTypeSpec_Member* P4HeaderUnionTypeSpec::add_members() {
  ::p4::config::v1::P4HeaderUnionTypeSpec_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderUnionTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4HeaderUnionTypeSpec_Member >&
P4HeaderUnionTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderUnionTypeSpec.members)
  return members_;
}

// repeated string annotations = 2;
inline int P4HeaderUnionTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4HeaderUnionTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4HeaderUnionTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4HeaderUnionTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
  return _s;
}
inline const std::string& P4HeaderUnionTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4HeaderUnionTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4HeaderUnionTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4HeaderUnionTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline std::string* P4HeaderUnionTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4HeaderUnionTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline void P4HeaderUnionTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4HeaderUnionTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4HeaderUnionTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderUnionTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 3;
inline int P4HeaderUnionTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4HeaderUnionTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4HeaderUnionTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4HeaderUnionTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4HeaderUnionTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderUnionTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4HeaderUnionTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4HeaderUnionTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4HeaderUnionTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4HeaderUnionTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderUnionTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4HeaderUnionTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderUnionTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4HeaderUnionTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4HeaderUnionTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4HeaderUnionTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderUnionTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4HeaderUnionTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4HeaderUnionTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4HeaderUnionTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4HeaderUnionTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderUnionTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4HeaderUnionTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4HeaderUnionTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4HeaderUnionTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4HeaderUnionTypeSpec.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4HeaderStackTypeSpec

// .p4.config.v1.P4NamedType header = 1;
inline bool P4HeaderStackTypeSpec::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool P4HeaderStackTypeSpec::has_header() const {
  return _internal_has_header();
}
inline void P4HeaderStackTypeSpec::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::p4::config::v1::P4NamedType& P4HeaderStackTypeSpec::_internal_header() const {
  const ::p4::config::v1::P4NamedType* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4HeaderStackTypeSpec::header() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderStackTypeSpec.header)
  return _internal_header();
}
inline void P4HeaderStackTypeSpec::unsafe_arena_set_allocated_header(
    ::p4::config::v1::P4NamedType* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4HeaderStackTypeSpec.header)
}
inline ::p4::config::v1::P4NamedType* P4HeaderStackTypeSpec::release_header() {
  
  ::p4::config::v1::P4NamedType* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderStackTypeSpec::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderStackTypeSpec.header)
  
  ::p4::config::v1::P4NamedType* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderStackTypeSpec::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::p4::config::v1::P4NamedType* P4HeaderStackTypeSpec::mutable_header() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderStackTypeSpec.header)
  return _msg;
}
inline void P4HeaderStackTypeSpec::set_allocated_header(::p4::config::v1::P4NamedType* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderStackTypeSpec.header)
}

// int32 size = 2;
inline void P4HeaderStackTypeSpec::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4HeaderStackTypeSpec::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4HeaderStackTypeSpec::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderStackTypeSpec.size)
  return _internal_size();
}
inline void P4HeaderStackTypeSpec::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void P4HeaderStackTypeSpec::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderStackTypeSpec.size)
}

// -------------------------------------------------------------------

// P4HeaderUnionStackTypeSpec

// .p4.config.v1.P4NamedType header_union = 1;
inline bool P4HeaderUnionStackTypeSpec::_internal_has_header_union() const {
  return this != internal_default_instance() && header_union_ != nullptr;
}
inline bool P4HeaderUnionStackTypeSpec::has_header_union() const {
  return _internal_has_header_union();
}
inline void P4HeaderUnionStackTypeSpec::clear_header_union() {
  if (GetArenaForAllocation() == nullptr && header_union_ != nullptr) {
    delete header_union_;
  }
  header_union_ = nullptr;
}
inline const ::p4::config::v1::P4NamedType& P4HeaderUnionStackTypeSpec::_internal_header_union() const {
  const ::p4::config::v1::P4NamedType* p = header_union_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4NamedType&>(
      ::p4::config::v1::_P4NamedType_default_instance_);
}
inline const ::p4::config::v1::P4NamedType& P4HeaderUnionStackTypeSpec::header_union() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionStackTypeSpec.header_union)
  return _internal_header_union();
}
inline void P4HeaderUnionStackTypeSpec::unsafe_arena_set_allocated_header_union(
    ::p4::config::v1::P4NamedType* header_union) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_union_);
  }
  header_union_ = header_union;
  if (header_union) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4HeaderUnionStackTypeSpec.header_union)
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionStackTypeSpec::release_header_union() {
  
  ::p4::config::v1::P4NamedType* temp = header_union_;
  header_union_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionStackTypeSpec::unsafe_arena_release_header_union() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4HeaderUnionStackTypeSpec.header_union)
  
  ::p4::config::v1::P4NamedType* temp = header_union_;
  header_union_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionStackTypeSpec::_internal_mutable_header_union() {
  
  if (header_union_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4NamedType>(GetArenaForAllocation());
    header_union_ = p;
  }
  return header_union_;
}
inline ::p4::config::v1::P4NamedType* P4HeaderUnionStackTypeSpec::mutable_header_union() {
  ::p4::config::v1::P4NamedType* _msg = _internal_mutable_header_union();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4HeaderUnionStackTypeSpec.header_union)
  return _msg;
}
inline void P4HeaderUnionStackTypeSpec::set_allocated_header_union(::p4::config::v1::P4NamedType* header_union) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_union_;
  }
  if (header_union) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4NamedType>::GetOwningArena(header_union);
    if (message_arena != submessage_arena) {
      header_union = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_union, submessage_arena);
    }
    
  } else {
    
  }
  header_union_ = header_union;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4HeaderUnionStackTypeSpec.header_union)
}

// int32 size = 2;
inline void P4HeaderUnionStackTypeSpec::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4HeaderUnionStackTypeSpec::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4HeaderUnionStackTypeSpec::size() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4HeaderUnionStackTypeSpec.size)
  return _internal_size();
}
inline void P4HeaderUnionStackTypeSpec::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void P4HeaderUnionStackTypeSpec::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4HeaderUnionStackTypeSpec.size)
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.KeyValuePair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValuePair::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.KeyValuePair.key)
  return _s;
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:p4.config.v1.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.KeyValuePair.key)
}

// .p4.config.v1.Expression value = 2;
inline bool KeyValuePair::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool KeyValuePair::has_value() const {
  return _internal_has_value();
}
inline void KeyValuePair::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::p4::config::v1::Expression& KeyValuePair::_internal_value() const {
  const ::p4::config::v1::Expression* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::Expression&>(
      ::p4::config::v1::_Expression_default_instance_);
}
inline const ::p4::config::v1::Expression& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::unsafe_arena_set_allocated_value(
    ::p4::config::v1::Expression* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.KeyValuePair.value)
}
inline ::p4::config::v1::Expression* KeyValuePair::release_value() {
  
  ::p4::config::v1::Expression* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::Expression* KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:p4.config.v1.KeyValuePair.value)
  
  ::p4::config::v1::Expression* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::p4::config::v1::Expression* KeyValuePair::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::Expression>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::p4::config::v1::Expression* KeyValuePair::mutable_value() {
  ::p4::config::v1::Expression* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.KeyValuePair.value)
  return _msg;
}
inline void KeyValuePair::set_allocated_value(::p4::config::v1::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::Expression>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.KeyValuePair.value)
}

// -------------------------------------------------------------------

// KeyValuePairList

// repeated .p4.config.v1.KeyValuePair kv_pairs = 1;
inline int KeyValuePairList::_internal_kv_pairs_size() const {
  return kv_pairs_.size();
}
inline int KeyValuePairList::kv_pairs_size() const {
  return _internal_kv_pairs_size();
}
inline void KeyValuePairList::clear_kv_pairs() {
  kv_pairs_.Clear();
}
inline ::p4::config::v1::KeyValuePair* KeyValuePairList::mutable_kv_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.KeyValuePairList.kv_pairs)
  return kv_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::KeyValuePair >*
KeyValuePairList::mutable_kv_pairs() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.KeyValuePairList.kv_pairs)
  return &kv_pairs_;
}
inline const ::p4::config::v1::KeyValuePair& KeyValuePairList::_internal_kv_pairs(int index) const {
  return kv_pairs_.Get(index);
}
inline const ::p4::config::v1::KeyValuePair& KeyValuePairList::kv_pairs(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.KeyValuePairList.kv_pairs)
  return _internal_kv_pairs(index);
}
inline ::p4::config::v1::KeyValuePair* KeyValuePairList::_internal_add_kv_pairs() {
  return kv_pairs_.Add();
}
inline ::p4::config::v1::KeyValuePair* KeyValuePairList::add_kv_pairs() {
  ::p4::config::v1::KeyValuePair* _add = _internal_add_kv_pairs();
  // @@protoc_insertion_point(field_add:p4.config.v1.KeyValuePairList.kv_pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::KeyValuePair >&
KeyValuePairList::kv_pairs() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.KeyValuePairList.kv_pairs)
  return kv_pairs_;
}

// -------------------------------------------------------------------

// Expression

// string string_value = 1;
inline bool Expression::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Expression::has_string_value() const {
  return _internal_has_string_value();
}
inline void Expression::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Expression::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Expression::string_value() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Expression.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Expression::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.Expression.string_value)
}
inline std::string* Expression::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.Expression.string_value)
  return _s;
}
inline const std::string& Expression::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Expression::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Expression::release_string_value() {
  // @@protoc_insertion_point(field_release:p4.config.v1.Expression.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Expression::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.Expression.string_value)
}

// int64 int64_value = 2;
inline bool Expression::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool Expression::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void Expression::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void Expression::clear_int64_value() {
  if (_internal_has_int64_value()) {
    value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return value_.int64_value_;
  }
  return int64_t{0};
}
inline void Expression::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression::int64_value() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Expression.int64_value)
  return _internal_int64_value();
}
inline void Expression::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Expression.int64_value)
}

// bool bool_value = 3;
inline bool Expression::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool Expression::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Expression::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Expression::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Expression::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void Expression::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool Expression::bool_value() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.Expression.bool_value)
  return _internal_bool_value();
}
inline void Expression::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.Expression.bool_value)
}

inline bool Expression::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Expression::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Expression::ValueCase Expression::value_case() const {
  return Expression::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExpressionList

// repeated .p4.config.v1.Expression expressions = 1;
inline int ExpressionList::_internal_expressions_size() const {
  return expressions_.size();
}
inline int ExpressionList::expressions_size() const {
  return _internal_expressions_size();
}
inline void ExpressionList::clear_expressions() {
  expressions_.Clear();
}
inline ::p4::config::v1::Expression* ExpressionList::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.ExpressionList.expressions)
  return expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Expression >*
ExpressionList::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.ExpressionList.expressions)
  return &expressions_;
}
inline const ::p4::config::v1::Expression& ExpressionList::_internal_expressions(int index) const {
  return expressions_.Get(index);
}
inline const ::p4::config::v1::Expression& ExpressionList::expressions(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.ExpressionList.expressions)
  return _internal_expressions(index);
}
inline ::p4::config::v1::Expression* ExpressionList::_internal_add_expressions() {
  return expressions_.Add();
}
inline ::p4::config::v1::Expression* ExpressionList::add_expressions() {
  ::p4::config::v1::Expression* _add = _internal_add_expressions();
  // @@protoc_insertion_point(field_add:p4.config.v1.ExpressionList.expressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::Expression >&
ExpressionList::expressions() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.ExpressionList.expressions)
  return expressions_;
}

// -------------------------------------------------------------------

// StructuredAnnotation

// string name = 1;
inline void StructuredAnnotation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StructuredAnnotation::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.StructuredAnnotation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StructuredAnnotation::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.StructuredAnnotation.name)
}
inline std::string* StructuredAnnotation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.StructuredAnnotation.name)
  return _s;
}
inline const std::string& StructuredAnnotation::_internal_name() const {
  return name_.Get();
}
inline void StructuredAnnotation::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StructuredAnnotation::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StructuredAnnotation::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.StructuredAnnotation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StructuredAnnotation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.StructuredAnnotation.name)
}

// .p4.config.v1.ExpressionList expression_list = 2;
inline bool StructuredAnnotation::_internal_has_expression_list() const {
  return body_case() == kExpressionList;
}
inline bool StructuredAnnotation::has_expression_list() const {
  return _internal_has_expression_list();
}
inline void StructuredAnnotation::set_has_expression_list() {
  _oneof_case_[0] = kExpressionList;
}
inline void StructuredAnnotation::clear_expression_list() {
  if (_internal_has_expression_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.expression_list_;
    }
    clear_has_body();
  }
}
inline ::p4::config::v1::ExpressionList* StructuredAnnotation::release_expression_list() {
  // @@protoc_insertion_point(field_release:p4.config.v1.StructuredAnnotation.expression_list)
  if (_internal_has_expression_list()) {
    clear_has_body();
      ::p4::config::v1::ExpressionList* temp = body_.expression_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.expression_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::ExpressionList& StructuredAnnotation::_internal_expression_list() const {
  return _internal_has_expression_list()
      ? *body_.expression_list_
      : reinterpret_cast< ::p4::config::v1::ExpressionList&>(::p4::config::v1::_ExpressionList_default_instance_);
}
inline const ::p4::config::v1::ExpressionList& StructuredAnnotation::expression_list() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.StructuredAnnotation.expression_list)
  return _internal_expression_list();
}
inline ::p4::config::v1::ExpressionList* StructuredAnnotation::unsafe_arena_release_expression_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.StructuredAnnotation.expression_list)
  if (_internal_has_expression_list()) {
    clear_has_body();
    ::p4::config::v1::ExpressionList* temp = body_.expression_list_;
    body_.expression_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredAnnotation::unsafe_arena_set_allocated_expression_list(::p4::config::v1::ExpressionList* expression_list) {
  clear_body();
  if (expression_list) {
    set_has_expression_list();
    body_.expression_list_ = expression_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.StructuredAnnotation.expression_list)
}
inline ::p4::config::v1::ExpressionList* StructuredAnnotation::_internal_mutable_expression_list() {
  if (!_internal_has_expression_list()) {
    clear_body();
    set_has_expression_list();
    body_.expression_list_ = CreateMaybeMessage< ::p4::config::v1::ExpressionList >(GetArenaForAllocation());
  }
  return body_.expression_list_;
}
inline ::p4::config::v1::ExpressionList* StructuredAnnotation::mutable_expression_list() {
  ::p4::config::v1::ExpressionList* _msg = _internal_mutable_expression_list();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.StructuredAnnotation.expression_list)
  return _msg;
}

// .p4.config.v1.KeyValuePairList kv_pair_list = 3;
inline bool StructuredAnnotation::_internal_has_kv_pair_list() const {
  return body_case() == kKvPairList;
}
inline bool StructuredAnnotation::has_kv_pair_list() const {
  return _internal_has_kv_pair_list();
}
inline void StructuredAnnotation::set_has_kv_pair_list() {
  _oneof_case_[0] = kKvPairList;
}
inline void StructuredAnnotation::clear_kv_pair_list() {
  if (_internal_has_kv_pair_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.kv_pair_list_;
    }
    clear_has_body();
  }
}
inline ::p4::config::v1::KeyValuePairList* StructuredAnnotation::release_kv_pair_list() {
  // @@protoc_insertion_point(field_release:p4.config.v1.StructuredAnnotation.kv_pair_list)
  if (_internal_has_kv_pair_list()) {
    clear_has_body();
      ::p4::config::v1::KeyValuePairList* temp = body_.kv_pair_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.kv_pair_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::KeyValuePairList& StructuredAnnotation::_internal_kv_pair_list() const {
  return _internal_has_kv_pair_list()
      ? *body_.kv_pair_list_
      : reinterpret_cast< ::p4::config::v1::KeyValuePairList&>(::p4::config::v1::_KeyValuePairList_default_instance_);
}
inline const ::p4::config::v1::KeyValuePairList& StructuredAnnotation::kv_pair_list() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.StructuredAnnotation.kv_pair_list)
  return _internal_kv_pair_list();
}
inline ::p4::config::v1::KeyValuePairList* StructuredAnnotation::unsafe_arena_release_kv_pair_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.StructuredAnnotation.kv_pair_list)
  if (_internal_has_kv_pair_list()) {
    clear_has_body();
    ::p4::config::v1::KeyValuePairList* temp = body_.kv_pair_list_;
    body_.kv_pair_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredAnnotation::unsafe_arena_set_allocated_kv_pair_list(::p4::config::v1::KeyValuePairList* kv_pair_list) {
  clear_body();
  if (kv_pair_list) {
    set_has_kv_pair_list();
    body_.kv_pair_list_ = kv_pair_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.StructuredAnnotation.kv_pair_list)
}
inline ::p4::config::v1::KeyValuePairList* StructuredAnnotation::_internal_mutable_kv_pair_list() {
  if (!_internal_has_kv_pair_list()) {
    clear_body();
    set_has_kv_pair_list();
    body_.kv_pair_list_ = CreateMaybeMessage< ::p4::config::v1::KeyValuePairList >(GetArenaForAllocation());
  }
  return body_.kv_pair_list_;
}
inline ::p4::config::v1::KeyValuePairList* StructuredAnnotation::mutable_kv_pair_list() {
  ::p4::config::v1::KeyValuePairList* _msg = _internal_mutable_kv_pair_list();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.StructuredAnnotation.kv_pair_list)
  return _msg;
}

// .p4.config.v1.SourceLocation source_location = 4;
inline bool StructuredAnnotation::_internal_has_source_location() const {
  return this != internal_default_instance() && source_location_ != nullptr;
}
inline bool StructuredAnnotation::has_source_location() const {
  return _internal_has_source_location();
}
inline void StructuredAnnotation::clear_source_location() {
  if (GetArenaForAllocation() == nullptr && source_location_ != nullptr) {
    delete source_location_;
  }
  source_location_ = nullptr;
}
inline const ::p4::config::v1::SourceLocation& StructuredAnnotation::_internal_source_location() const {
  const ::p4::config::v1::SourceLocation* p = source_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::SourceLocation&>(
      ::p4::config::v1::_SourceLocation_default_instance_);
}
inline const ::p4::config::v1::SourceLocation& StructuredAnnotation::source_location() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.StructuredAnnotation.source_location)
  return _internal_source_location();
}
inline void StructuredAnnotation::unsafe_arena_set_allocated_source_location(
    ::p4::config::v1::SourceLocation* source_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_location_);
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.StructuredAnnotation.source_location)
}
inline ::p4::config::v1::SourceLocation* StructuredAnnotation::release_source_location() {
  
  ::p4::config::v1::SourceLocation* temp = source_location_;
  source_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::SourceLocation* StructuredAnnotation::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_release:p4.config.v1.StructuredAnnotation.source_location)
  
  ::p4::config::v1::SourceLocation* temp = source_location_;
  source_location_ = nullptr;
  return temp;
}
inline ::p4::config::v1::SourceLocation* StructuredAnnotation::_internal_mutable_source_location() {
  
  if (source_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::SourceLocation>(GetArenaForAllocation());
    source_location_ = p;
  }
  return source_location_;
}
inline ::p4::config::v1::SourceLocation* StructuredAnnotation::mutable_source_location() {
  ::p4::config::v1::SourceLocation* _msg = _internal_mutable_source_location();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.StructuredAnnotation.source_location)
  return _msg;
}
inline void StructuredAnnotation::set_allocated_source_location(::p4::config::v1::SourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_location_;
  }
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::SourceLocation>::GetOwningArena(source_location);
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    
  } else {
    
  }
  source_location_ = source_location;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.StructuredAnnotation.source_location)
}

inline bool StructuredAnnotation::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void StructuredAnnotation::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline StructuredAnnotation::BodyCase StructuredAnnotation::body_case() const {
  return StructuredAnnotation::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SourceLocation

// string file = 1;
inline void SourceLocation::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& SourceLocation::file() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.SourceLocation.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceLocation::set_file(ArgT0&& arg0, ArgT... args) {
 
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.SourceLocation.file)
}
inline std::string* SourceLocation::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.SourceLocation.file)
  return _s;
}
inline const std::string& SourceLocation::_internal_file() const {
  return file_.Get();
}
inline void SourceLocation::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SourceLocation::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:p4.config.v1.SourceLocation.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SourceLocation::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.SourceLocation.file)
}

// int32 line = 2;
inline void SourceLocation::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceLocation::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.SourceLocation.line)
  return _internal_line();
}
inline void SourceLocation::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void SourceLocation::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.SourceLocation.line)
}

// int32 column = 3;
inline void SourceLocation::clear_column() {
  column_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceLocation::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceLocation::column() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.SourceLocation.column)
  return _internal_column();
}
inline void SourceLocation::_internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  column_ = value;
}
inline void SourceLocation::set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.SourceLocation.column)
}

// -------------------------------------------------------------------

// P4EnumTypeSpec_Member

// string name = 1;
inline void P4EnumTypeSpec_Member::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4EnumTypeSpec_Member::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.Member.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4EnumTypeSpec_Member::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4EnumTypeSpec.Member.name)
}
inline std::string* P4EnumTypeSpec_Member::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.Member.name)
  return _s;
}
inline const std::string& P4EnumTypeSpec_Member::_internal_name() const {
  return name_.Get();
}
inline void P4EnumTypeSpec_Member::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4EnumTypeSpec_Member::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4EnumTypeSpec_Member::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4EnumTypeSpec.Member.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4EnumTypeSpec_Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4EnumTypeSpec.Member.name)
}

// repeated string annotations = 2;
inline int P4EnumTypeSpec_Member::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4EnumTypeSpec_Member::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4EnumTypeSpec_Member::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4EnumTypeSpec_Member::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4EnumTypeSpec.Member.annotations)
  return _s;
}
inline const std::string& P4EnumTypeSpec_Member::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4EnumTypeSpec_Member::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.Member.annotations)
  return _internal_annotations(index);
}
inline std::string* P4EnumTypeSpec_Member::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.Member.annotations)
  return annotations_.Mutable(index);
}
inline void P4EnumTypeSpec_Member::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline std::string* P4EnumTypeSpec_Member::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4EnumTypeSpec_Member::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline void P4EnumTypeSpec_Member::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4EnumTypeSpec.Member.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4EnumTypeSpec_Member::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.Member.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4EnumTypeSpec_Member::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.Member.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 4;
inline int P4EnumTypeSpec_Member::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4EnumTypeSpec_Member::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4EnumTypeSpec_Member::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec_Member::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.Member.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4EnumTypeSpec_Member::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.Member.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4EnumTypeSpec_Member::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4EnumTypeSpec_Member::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.Member.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec_Member::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec_Member::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.Member.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4EnumTypeSpec_Member::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.Member.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
inline int P4EnumTypeSpec_Member::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4EnumTypeSpec_Member::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4EnumTypeSpec_Member::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec_Member::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.Member.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4EnumTypeSpec_Member::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.Member.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4EnumTypeSpec_Member::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4EnumTypeSpec_Member::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.Member.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec_Member::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec_Member::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.Member.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4EnumTypeSpec_Member::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.Member.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4EnumTypeSpec

// repeated .p4.config.v1.P4EnumTypeSpec.Member members = 1;
inline int P4EnumTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4EnumTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4EnumTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4EnumTypeSpec_Member* P4EnumTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4EnumTypeSpec_Member >*
P4EnumTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4EnumTypeSpec_Member& P4EnumTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4EnumTypeSpec_Member& P4EnumTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4EnumTypeSpec_Member* P4EnumTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4EnumTypeSpec_Member* P4EnumTypeSpec::add_members() {
  ::p4::config::v1::P4EnumTypeSpec_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4EnumTypeSpec_Member >&
P4EnumTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.members)
  return members_;
}

// repeated string annotations = 2;
inline int P4EnumTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4EnumTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4EnumTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4EnumTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4EnumTypeSpec.annotations)
  return _s;
}
inline const std::string& P4EnumTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4EnumTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4EnumTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4EnumTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline std::string* P4EnumTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4EnumTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline void P4EnumTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4EnumTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4EnumTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4EnumTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 4;
inline int P4EnumTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4EnumTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4EnumTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4EnumTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4EnumTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4EnumTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4EnumTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4EnumTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 3;
inline int P4EnumTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4EnumTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4EnumTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4EnumTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4EnumTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4EnumTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4EnumTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4EnumTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4EnumTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4EnumTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4EnumTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4EnumTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4EnumTypeSpec.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4SerializableEnumTypeSpec_Member

// string name = 1;
inline void P4SerializableEnumTypeSpec_Member::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& P4SerializableEnumTypeSpec_Member::name() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.Member.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4SerializableEnumTypeSpec_Member::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.Member.name)
}
inline std::string* P4SerializableEnumTypeSpec_Member::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.name)
  return _s;
}
inline const std::string& P4SerializableEnumTypeSpec_Member::_internal_name() const {
  return name_.Get();
}
inline void P4SerializableEnumTypeSpec_Member::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4SerializableEnumTypeSpec_Member::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4SerializableEnumTypeSpec_Member::release_name() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4SerializableEnumTypeSpec.Member.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4SerializableEnumTypeSpec_Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4SerializableEnumTypeSpec.Member.name)
}

// bytes value = 2;
inline void P4SerializableEnumTypeSpec_Member::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& P4SerializableEnumTypeSpec_Member::value() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.Member.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4SerializableEnumTypeSpec_Member::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.Member.value)
}
inline std::string* P4SerializableEnumTypeSpec_Member::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.value)
  return _s;
}
inline const std::string& P4SerializableEnumTypeSpec_Member::_internal_value() const {
  return value_.Get();
}
inline void P4SerializableEnumTypeSpec_Member::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4SerializableEnumTypeSpec_Member::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4SerializableEnumTypeSpec_Member::release_value() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4SerializableEnumTypeSpec.Member.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4SerializableEnumTypeSpec_Member::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4SerializableEnumTypeSpec.Member.value)
}

// repeated string annotations = 3;
inline int P4SerializableEnumTypeSpec_Member::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4SerializableEnumTypeSpec_Member::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4SerializableEnumTypeSpec_Member::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4SerializableEnumTypeSpec_Member::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
  return _s;
}
inline const std::string& P4SerializableEnumTypeSpec_Member::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4SerializableEnumTypeSpec_Member::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
  return _internal_annotations(index);
}
inline std::string* P4SerializableEnumTypeSpec_Member::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
  return annotations_.Mutable(index);
}
inline void P4SerializableEnumTypeSpec_Member::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline std::string* P4SerializableEnumTypeSpec_Member::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4SerializableEnumTypeSpec_Member::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline void P4SerializableEnumTypeSpec_Member::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4SerializableEnumTypeSpec_Member::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4SerializableEnumTypeSpec_Member::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 5;
inline int P4SerializableEnumTypeSpec_Member::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4SerializableEnumTypeSpec_Member::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4SerializableEnumTypeSpec_Member::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec_Member::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4SerializableEnumTypeSpec_Member::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4SerializableEnumTypeSpec_Member::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4SerializableEnumTypeSpec_Member::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec_Member::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec_Member::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4SerializableEnumTypeSpec_Member::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4SerializableEnumTypeSpec_Member::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4SerializableEnumTypeSpec_Member::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4SerializableEnumTypeSpec_Member::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec_Member::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.Member.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4SerializableEnumTypeSpec_Member::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4SerializableEnumTypeSpec_Member::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4SerializableEnumTypeSpec_Member::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.Member.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec_Member::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec_Member::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.Member.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4SerializableEnumTypeSpec_Member::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.Member.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4SerializableEnumTypeSpec

// .p4.config.v1.P4BitTypeSpec underlying_type = 1;
inline bool P4SerializableEnumTypeSpec::_internal_has_underlying_type() const {
  return this != internal_default_instance() && underlying_type_ != nullptr;
}
inline bool P4SerializableEnumTypeSpec::has_underlying_type() const {
  return _internal_has_underlying_type();
}
inline void P4SerializableEnumTypeSpec::clear_underlying_type() {
  if (GetArenaForAllocation() == nullptr && underlying_type_ != nullptr) {
    delete underlying_type_;
  }
  underlying_type_ = nullptr;
}
inline const ::p4::config::v1::P4BitTypeSpec& P4SerializableEnumTypeSpec::_internal_underlying_type() const {
  const ::p4::config::v1::P4BitTypeSpec* p = underlying_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::p4::config::v1::P4BitTypeSpec&>(
      ::p4::config::v1::_P4BitTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4BitTypeSpec& P4SerializableEnumTypeSpec::underlying_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.underlying_type)
  return _internal_underlying_type();
}
inline void P4SerializableEnumTypeSpec::unsafe_arena_set_allocated_underlying_type(
    ::p4::config::v1::P4BitTypeSpec* underlying_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlying_type_);
  }
  underlying_type_ = underlying_type;
  if (underlying_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4SerializableEnumTypeSpec.underlying_type)
}
inline ::p4::config::v1::P4BitTypeSpec* P4SerializableEnumTypeSpec::release_underlying_type() {
  
  ::p4::config::v1::P4BitTypeSpec* temp = underlying_type_;
  underlying_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p4::config::v1::P4BitTypeSpec* P4SerializableEnumTypeSpec::unsafe_arena_release_underlying_type() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4SerializableEnumTypeSpec.underlying_type)
  
  ::p4::config::v1::P4BitTypeSpec* temp = underlying_type_;
  underlying_type_ = nullptr;
  return temp;
}
inline ::p4::config::v1::P4BitTypeSpec* P4SerializableEnumTypeSpec::_internal_mutable_underlying_type() {
  
  if (underlying_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::p4::config::v1::P4BitTypeSpec>(GetArenaForAllocation());
    underlying_type_ = p;
  }
  return underlying_type_;
}
inline ::p4::config::v1::P4BitTypeSpec* P4SerializableEnumTypeSpec::mutable_underlying_type() {
  ::p4::config::v1::P4BitTypeSpec* _msg = _internal_mutable_underlying_type();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.underlying_type)
  return _msg;
}
inline void P4SerializableEnumTypeSpec::set_allocated_underlying_type(::p4::config::v1::P4BitTypeSpec* underlying_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete underlying_type_;
  }
  if (underlying_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::p4::config::v1::P4BitTypeSpec>::GetOwningArena(underlying_type);
    if (message_arena != submessage_arena) {
      underlying_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlying_type, submessage_arena);
    }
    
  } else {
    
  }
  underlying_type_ = underlying_type;
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4SerializableEnumTypeSpec.underlying_type)
}

// repeated .p4.config.v1.P4SerializableEnumTypeSpec.Member members = 2;
inline int P4SerializableEnumTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4SerializableEnumTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4SerializableEnumTypeSpec::clear_members() {
  members_.Clear();
}
inline ::p4::config::v1::P4SerializableEnumTypeSpec_Member* P4SerializableEnumTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >*
P4SerializableEnumTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.members)
  return &members_;
}
inline const ::p4::config::v1::P4SerializableEnumTypeSpec_Member& P4SerializableEnumTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::p4::config::v1::P4SerializableEnumTypeSpec_Member& P4SerializableEnumTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.members)
  return _internal_members(index);
}
inline ::p4::config::v1::P4SerializableEnumTypeSpec_Member* P4SerializableEnumTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline ::p4::config::v1::P4SerializableEnumTypeSpec_Member* P4SerializableEnumTypeSpec::add_members() {
  ::p4::config::v1::P4SerializableEnumTypeSpec_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::P4SerializableEnumTypeSpec_Member >&
P4SerializableEnumTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.members)
  return members_;
}

// repeated string annotations = 3;
inline int P4SerializableEnumTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4SerializableEnumTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4SerializableEnumTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4SerializableEnumTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
  return _s;
}
inline const std::string& P4SerializableEnumTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4SerializableEnumTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4SerializableEnumTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4SerializableEnumTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline std::string* P4SerializableEnumTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4SerializableEnumTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline void P4SerializableEnumTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4SerializableEnumTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4SerializableEnumTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 5;
inline int P4SerializableEnumTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4SerializableEnumTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4SerializableEnumTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4SerializableEnumTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4SerializableEnumTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4SerializableEnumTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4SerializableEnumTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4SerializableEnumTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4SerializableEnumTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4SerializableEnumTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4SerializableEnumTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4SerializableEnumTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4SerializableEnumTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4SerializableEnumTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4SerializableEnumTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4SerializableEnumTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4SerializableEnumTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4SerializableEnumTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4SerializableEnumTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4SerializableEnumTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4SerializableEnumTypeSpec.structured_annotations)
  return structured_annotations_;
}

// -------------------------------------------------------------------

// P4ErrorTypeSpec

// repeated string members = 1;
inline int P4ErrorTypeSpec::_internal_members_size() const {
  return members_.size();
}
inline int P4ErrorTypeSpec::members_size() const {
  return _internal_members_size();
}
inline void P4ErrorTypeSpec::clear_members() {
  members_.Clear();
}
inline std::string* P4ErrorTypeSpec::add_members() {
  std::string* _s = _internal_add_members();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4ErrorTypeSpec.members)
  return _s;
}
inline const std::string& P4ErrorTypeSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const std::string& P4ErrorTypeSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4ErrorTypeSpec.members)
  return _internal_members(index);
}
inline std::string* P4ErrorTypeSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4ErrorTypeSpec.members)
  return members_.Mutable(index);
}
inline void P4ErrorTypeSpec::set_members(int index, const std::string& value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::set_members(int index, std::string&& value) {
  members_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4ErrorTypeSpec.members)
}
inline std::string* P4ErrorTypeSpec::_internal_add_members() {
  return members_.Add();
}
inline void P4ErrorTypeSpec::add_members(const std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::add_members(std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4ErrorTypeSpec.members)
}
inline void P4ErrorTypeSpec::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4ErrorTypeSpec.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4ErrorTypeSpec::members() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4ErrorTypeSpec.members)
  return members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4ErrorTypeSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4ErrorTypeSpec.members)
  return &members_;
}

// -------------------------------------------------------------------

// P4NewTypeTranslation_SdnString

// -------------------------------------------------------------------

// P4NewTypeTranslation

// string uri = 1;
inline void P4NewTypeTranslation::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& P4NewTypeTranslation::uri() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeTranslation.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P4NewTypeTranslation::set_uri(ArgT0&& arg0, ArgT... args) {
 
 uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p4.config.v1.P4NewTypeTranslation.uri)
}
inline std::string* P4NewTypeTranslation::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeTranslation.uri)
  return _s;
}
inline const std::string& P4NewTypeTranslation::_internal_uri() const {
  return uri_.Get();
}
inline void P4NewTypeTranslation::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* P4NewTypeTranslation::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* P4NewTypeTranslation::release_uri() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4NewTypeTranslation.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void P4NewTypeTranslation::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:p4.config.v1.P4NewTypeTranslation.uri)
}

// int32 sdn_bitwidth = 2;
inline bool P4NewTypeTranslation::_internal_has_sdn_bitwidth() const {
  return sdn_type_case() == kSdnBitwidth;
}
inline bool P4NewTypeTranslation::has_sdn_bitwidth() const {
  return _internal_has_sdn_bitwidth();
}
inline void P4NewTypeTranslation::set_has_sdn_bitwidth() {
  _oneof_case_[0] = kSdnBitwidth;
}
inline void P4NewTypeTranslation::clear_sdn_bitwidth() {
  if (_internal_has_sdn_bitwidth()) {
    sdn_type_.sdn_bitwidth_ = 0;
    clear_has_sdn_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4NewTypeTranslation::_internal_sdn_bitwidth() const {
  if (_internal_has_sdn_bitwidth()) {
    return sdn_type_.sdn_bitwidth_;
  }
  return 0;
}
inline void P4NewTypeTranslation::_internal_set_sdn_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sdn_bitwidth()) {
    clear_sdn_type();
    set_has_sdn_bitwidth();
  }
  sdn_type_.sdn_bitwidth_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P4NewTypeTranslation::sdn_bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeTranslation.sdn_bitwidth)
  return _internal_sdn_bitwidth();
}
inline void P4NewTypeTranslation::set_sdn_bitwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sdn_bitwidth(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4NewTypeTranslation.sdn_bitwidth)
}

// .p4.config.v1.P4NewTypeTranslation.SdnString sdn_string = 3;
inline bool P4NewTypeTranslation::_internal_has_sdn_string() const {
  return sdn_type_case() == kSdnString;
}
inline bool P4NewTypeTranslation::has_sdn_string() const {
  return _internal_has_sdn_string();
}
inline void P4NewTypeTranslation::set_has_sdn_string() {
  _oneof_case_[0] = kSdnString;
}
inline void P4NewTypeTranslation::clear_sdn_string() {
  if (_internal_has_sdn_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sdn_type_.sdn_string_;
    }
    clear_has_sdn_type();
  }
}
inline ::p4::config::v1::P4NewTypeTranslation_SdnString* P4NewTypeTranslation::release_sdn_string() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4NewTypeTranslation.sdn_string)
  if (_internal_has_sdn_string()) {
    clear_has_sdn_type();
      ::p4::config::v1::P4NewTypeTranslation_SdnString* temp = sdn_type_.sdn_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sdn_type_.sdn_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NewTypeTranslation_SdnString& P4NewTypeTranslation::_internal_sdn_string() const {
  return _internal_has_sdn_string()
      ? *sdn_type_.sdn_string_
      : reinterpret_cast< ::p4::config::v1::P4NewTypeTranslation_SdnString&>(::p4::config::v1::_P4NewTypeTranslation_SdnString_default_instance_);
}
inline const ::p4::config::v1::P4NewTypeTranslation_SdnString& P4NewTypeTranslation::sdn_string() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeTranslation.sdn_string)
  return _internal_sdn_string();
}
inline ::p4::config::v1::P4NewTypeTranslation_SdnString* P4NewTypeTranslation::unsafe_arena_release_sdn_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4NewTypeTranslation.sdn_string)
  if (_internal_has_sdn_string()) {
    clear_has_sdn_type();
    ::p4::config::v1::P4NewTypeTranslation_SdnString* temp = sdn_type_.sdn_string_;
    sdn_type_.sdn_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4NewTypeTranslation::unsafe_arena_set_allocated_sdn_string(::p4::config::v1::P4NewTypeTranslation_SdnString* sdn_string) {
  clear_sdn_type();
  if (sdn_string) {
    set_has_sdn_string();
    sdn_type_.sdn_string_ = sdn_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4NewTypeTranslation.sdn_string)
}
inline ::p4::config::v1::P4NewTypeTranslation_SdnString* P4NewTypeTranslation::_internal_mutable_sdn_string() {
  if (!_internal_has_sdn_string()) {
    clear_sdn_type();
    set_has_sdn_string();
    sdn_type_.sdn_string_ = CreateMaybeMessage< ::p4::config::v1::P4NewTypeTranslation_SdnString >(GetArenaForAllocation());
  }
  return sdn_type_.sdn_string_;
}
inline ::p4::config::v1::P4NewTypeTranslation_SdnString* P4NewTypeTranslation::mutable_sdn_string() {
  ::p4::config::v1::P4NewTypeTranslation_SdnString* _msg = _internal_mutable_sdn_string();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeTranslation.sdn_string)
  return _msg;
}

inline bool P4NewTypeTranslation::has_sdn_type() const {
  return sdn_type_case() != SDN_TYPE_NOT_SET;
}
inline void P4NewTypeTranslation::clear_has_sdn_type() {
  _oneof_case_[0] = SDN_TYPE_NOT_SET;
}
inline P4NewTypeTranslation::SdnTypeCase P4NewTypeTranslation::sdn_type_case() const {
  return P4NewTypeTranslation::SdnTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// P4NewTypeSpec

// .p4.config.v1.P4DataTypeSpec original_type = 1;
inline bool P4NewTypeSpec::_internal_has_original_type() const {
  return representation_case() == kOriginalType;
}
inline bool P4NewTypeSpec::has_original_type() const {
  return _internal_has_original_type();
}
inline void P4NewTypeSpec::set_has_original_type() {
  _oneof_case_[0] = kOriginalType;
}
inline void P4NewTypeSpec::clear_original_type() {
  if (_internal_has_original_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete representation_.original_type_;
    }
    clear_has_representation();
  }
}
inline ::p4::config::v1::P4DataTypeSpec* P4NewTypeSpec::release_original_type() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4NewTypeSpec.original_type)
  if (_internal_has_original_type()) {
    clear_has_representation();
      ::p4::config::v1::P4DataTypeSpec* temp = representation_.original_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    representation_.original_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4DataTypeSpec& P4NewTypeSpec::_internal_original_type() const {
  return _internal_has_original_type()
      ? *representation_.original_type_
      : reinterpret_cast< ::p4::config::v1::P4DataTypeSpec&>(::p4::config::v1::_P4DataTypeSpec_default_instance_);
}
inline const ::p4::config::v1::P4DataTypeSpec& P4NewTypeSpec::original_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeSpec.original_type)
  return _internal_original_type();
}
inline ::p4::config::v1::P4DataTypeSpec* P4NewTypeSpec::unsafe_arena_release_original_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4NewTypeSpec.original_type)
  if (_internal_has_original_type()) {
    clear_has_representation();
    ::p4::config::v1::P4DataTypeSpec* temp = representation_.original_type_;
    representation_.original_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4NewTypeSpec::unsafe_arena_set_allocated_original_type(::p4::config::v1::P4DataTypeSpec* original_type) {
  clear_representation();
  if (original_type) {
    set_has_original_type();
    representation_.original_type_ = original_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4NewTypeSpec.original_type)
}
inline ::p4::config::v1::P4DataTypeSpec* P4NewTypeSpec::_internal_mutable_original_type() {
  if (!_internal_has_original_type()) {
    clear_representation();
    set_has_original_type();
    representation_.original_type_ = CreateMaybeMessage< ::p4::config::v1::P4DataTypeSpec >(GetArenaForAllocation());
  }
  return representation_.original_type_;
}
inline ::p4::config::v1::P4DataTypeSpec* P4NewTypeSpec::mutable_original_type() {
  ::p4::config::v1::P4DataTypeSpec* _msg = _internal_mutable_original_type();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeSpec.original_type)
  return _msg;
}

// .p4.config.v1.P4NewTypeTranslation translated_type = 2;
inline bool P4NewTypeSpec::_internal_has_translated_type() const {
  return representation_case() == kTranslatedType;
}
inline bool P4NewTypeSpec::has_translated_type() const {
  return _internal_has_translated_type();
}
inline void P4NewTypeSpec::set_has_translated_type() {
  _oneof_case_[0] = kTranslatedType;
}
inline void P4NewTypeSpec::clear_translated_type() {
  if (_internal_has_translated_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete representation_.translated_type_;
    }
    clear_has_representation();
  }
}
inline ::p4::config::v1::P4NewTypeTranslation* P4NewTypeSpec::release_translated_type() {
  // @@protoc_insertion_point(field_release:p4.config.v1.P4NewTypeSpec.translated_type)
  if (_internal_has_translated_type()) {
    clear_has_representation();
      ::p4::config::v1::P4NewTypeTranslation* temp = representation_.translated_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    representation_.translated_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::p4::config::v1::P4NewTypeTranslation& P4NewTypeSpec::_internal_translated_type() const {
  return _internal_has_translated_type()
      ? *representation_.translated_type_
      : reinterpret_cast< ::p4::config::v1::P4NewTypeTranslation&>(::p4::config::v1::_P4NewTypeTranslation_default_instance_);
}
inline const ::p4::config::v1::P4NewTypeTranslation& P4NewTypeSpec::translated_type() const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeSpec.translated_type)
  return _internal_translated_type();
}
inline ::p4::config::v1::P4NewTypeTranslation* P4NewTypeSpec::unsafe_arena_release_translated_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:p4.config.v1.P4NewTypeSpec.translated_type)
  if (_internal_has_translated_type()) {
    clear_has_representation();
    ::p4::config::v1::P4NewTypeTranslation* temp = representation_.translated_type_;
    representation_.translated_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void P4NewTypeSpec::unsafe_arena_set_allocated_translated_type(::p4::config::v1::P4NewTypeTranslation* translated_type) {
  clear_representation();
  if (translated_type) {
    set_has_translated_type();
    representation_.translated_type_ = translated_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p4.config.v1.P4NewTypeSpec.translated_type)
}
inline ::p4::config::v1::P4NewTypeTranslation* P4NewTypeSpec::_internal_mutable_translated_type() {
  if (!_internal_has_translated_type()) {
    clear_representation();
    set_has_translated_type();
    representation_.translated_type_ = CreateMaybeMessage< ::p4::config::v1::P4NewTypeTranslation >(GetArenaForAllocation());
  }
  return representation_.translated_type_;
}
inline ::p4::config::v1::P4NewTypeTranslation* P4NewTypeSpec::mutable_translated_type() {
  ::p4::config::v1::P4NewTypeTranslation* _msg = _internal_mutable_translated_type();
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeSpec.translated_type)
  return _msg;
}

// repeated string annotations = 3;
inline int P4NewTypeSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int P4NewTypeSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void P4NewTypeSpec::clear_annotations() {
  annotations_.Clear();
}
inline std::string* P4NewTypeSpec::add_annotations() {
  std::string* _s = _internal_add_annotations();
  // @@protoc_insertion_point(field_add_mutable:p4.config.v1.P4NewTypeSpec.annotations)
  return _s;
}
inline const std::string& P4NewTypeSpec::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const std::string& P4NewTypeSpec::annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeSpec.annotations)
  return _internal_annotations(index);
}
inline std::string* P4NewTypeSpec::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeSpec.annotations)
  return annotations_.Mutable(index);
}
inline void P4NewTypeSpec::set_annotations(int index, const std::string& value) {
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::set_annotations(int index, std::string&& value) {
  annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::set_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::set_annotations(int index, const char* value, size_t size) {
  annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.config.v1.P4NewTypeSpec.annotations)
}
inline std::string* P4NewTypeSpec::_internal_add_annotations() {
  return annotations_.Add();
}
inline void P4NewTypeSpec::add_annotations(const std::string& value) {
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::add_annotations(std::string&& value) {
  annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::add_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.config.v1.P4NewTypeSpec.annotations)
}
inline void P4NewTypeSpec::add_annotations(const char* value, size_t size) {
  annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.config.v1.P4NewTypeSpec.annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P4NewTypeSpec::annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4NewTypeSpec.annotations)
  return annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P4NewTypeSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4NewTypeSpec.annotations)
  return &annotations_;
}

// repeated .p4.config.v1.SourceLocation annotation_locations = 5;
inline int P4NewTypeSpec::_internal_annotation_locations_size() const {
  return annotation_locations_.size();
}
inline int P4NewTypeSpec::annotation_locations_size() const {
  return _internal_annotation_locations_size();
}
inline void P4NewTypeSpec::clear_annotation_locations() {
  annotation_locations_.Clear();
}
inline ::p4::config::v1::SourceLocation* P4NewTypeSpec::mutable_annotation_locations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeSpec.annotation_locations)
  return annotation_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >*
P4NewTypeSpec::mutable_annotation_locations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4NewTypeSpec.annotation_locations)
  return &annotation_locations_;
}
inline const ::p4::config::v1::SourceLocation& P4NewTypeSpec::_internal_annotation_locations(int index) const {
  return annotation_locations_.Get(index);
}
inline const ::p4::config::v1::SourceLocation& P4NewTypeSpec::annotation_locations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeSpec.annotation_locations)
  return _internal_annotation_locations(index);
}
inline ::p4::config::v1::SourceLocation* P4NewTypeSpec::_internal_add_annotation_locations() {
  return annotation_locations_.Add();
}
inline ::p4::config::v1::SourceLocation* P4NewTypeSpec::add_annotation_locations() {
  ::p4::config::v1::SourceLocation* _add = _internal_add_annotation_locations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4NewTypeSpec.annotation_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::SourceLocation >&
P4NewTypeSpec::annotation_locations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4NewTypeSpec.annotation_locations)
  return annotation_locations_;
}

// repeated .p4.config.v1.StructuredAnnotation structured_annotations = 4;
inline int P4NewTypeSpec::_internal_structured_annotations_size() const {
  return structured_annotations_.size();
}
inline int P4NewTypeSpec::structured_annotations_size() const {
  return _internal_structured_annotations_size();
}
inline void P4NewTypeSpec::clear_structured_annotations() {
  structured_annotations_.Clear();
}
inline ::p4::config::v1::StructuredAnnotation* P4NewTypeSpec::mutable_structured_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:p4.config.v1.P4NewTypeSpec.structured_annotations)
  return structured_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >*
P4NewTypeSpec::mutable_structured_annotations() {
  // @@protoc_insertion_point(field_mutable_list:p4.config.v1.P4NewTypeSpec.structured_annotations)
  return &structured_annotations_;
}
inline const ::p4::config::v1::StructuredAnnotation& P4NewTypeSpec::_internal_structured_annotations(int index) const {
  return structured_annotations_.Get(index);
}
inline const ::p4::config::v1::StructuredAnnotation& P4NewTypeSpec::structured_annotations(int index) const {
  // @@protoc_insertion_point(field_get:p4.config.v1.P4NewTypeSpec.structured_annotations)
  return _internal_structured_annotations(index);
}
inline ::p4::config::v1::StructuredAnnotation* P4NewTypeSpec::_internal_add_structured_annotations() {
  return structured_annotations_.Add();
}
inline ::p4::config::v1::StructuredAnnotation* P4NewTypeSpec::add_structured_annotations() {
  ::p4::config::v1::StructuredAnnotation* _add = _internal_add_structured_annotations();
  // @@protoc_insertion_point(field_add:p4.config.v1.P4NewTypeSpec.structured_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::p4::config::v1::StructuredAnnotation >&
P4NewTypeSpec::structured_annotations() const {
  // @@protoc_insertion_point(field_list:p4.config.v1.P4NewTypeSpec.structured_annotations)
  return structured_annotations_;
}

inline bool P4NewTypeSpec::has_representation() const {
  return representation_case() != REPRESENTATION_NOT_SET;
}
inline void P4NewTypeSpec::clear_has_representation() {
  _oneof_case_[0] = REPRESENTATION_NOT_SET;
}
inline P4NewTypeSpec::RepresentationCase P4NewTypeSpec::representation_case() const {
  return P4NewTypeSpec::RepresentationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace config
}  // namespace p4

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p4_2fconfig_2fv1_2fp4types_2eproto
